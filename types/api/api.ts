/* tslint:disable */
/* eslint-disable */
/**
 * Own World Admin API specifications
 * A specification that describes API interfaces for admin API of OW project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountAppliesResponse
 */
export interface AccountAppliesResponse {
    /**
     * 
     * @type {Array<AccountApply>}
     * @memberof AccountAppliesResponse
     */
    'account_applies': Array<AccountApply>;
}
/**
 * 
 * @export
 * @interface AccountApply
 */
export interface AccountApply {
    /**
     * アカウント申請ID
     * @type {string}
     * @memberof AccountApply
     */
    'id': string;
    /**
     * アカウント名
     * @type {string}
     * @memberof AccountApply
     */
    'tenant_name': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AccountApply
     */
    'email': string;
    /**
     * 会社名
     * @type {string}
     * @memberof AccountApply
     */
    'company_name': string;
    /**
     * 会社番号
     * @type {string}
     * @memberof AccountApply
     */
    'company_number': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof AccountApply
     */
    'postal_code': string;
    /**
     * 都道府県
     * @type {string}
     * @memberof AccountApply
     */
    'province': string;
    /**
     * 市区町村
     * @type {string}
     * @memberof AccountApply
     */
    'city': string;
    /**
     * 住所
     * @type {string}
     * @memberof AccountApply
     */
    'address': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof AccountApply
     */
    'phone_number': string;
    /**
     * 部署
     * @type {string}
     * @memberof AccountApply
     */
    'department': string;
    /**
     * 担当者名
     * @type {string}
     * @memberof AccountApply
     */
    'pic_name': string;
    /**
     * ステータス
     * @type {string}
     * @memberof AccountApply
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface AccountApplyResponse
 */
export interface AccountApplyResponse {
    /**
     * 
     * @type {AccountApply}
     * @memberof AccountApplyResponse
     */
    'account_apply': AccountApply;
}
/**
 * 
 * @export
 * @interface AdminDashboardResponse
 */
export interface AdminDashboardResponse {
    /**
     * 成功したidの一覧  {project_id}_{dashboard_key}の形式 
     * @type {Array<string>}
     * @memberof AdminDashboardResponse
     */
    'success_dashboard_ids': Array<string>;
    /**
     * 失敗したidの一覧 {project_id}_{dashboard_key}の形式 
     * @type {Array<string>}
     * @memberof AdminDashboardResponse
     */
    'failed_dashboard_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Adminuser
 */
export interface Adminuser {
    /**
     * 管理ユーザーID
     * @type {string}
     * @memberof Adminuser
     */
    'id': string;
    /**
     * 権限種別
     * @type {string}
     * @memberof Adminuser
     */
    'role': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Adminuser
     */
    'email': string;
    /**
     * 管理対象テナントID（カンマ区切り）
     * @type {string}
     * @memberof Adminuser
     */
    'tenant_ids': string;
    /**
     * 管理対象テナント
     * @type {Array<Tenant>}
     * @memberof Adminuser
     */
    'tenants'?: Array<Tenant>;
    /**
     * 管理対象テナント
     * @type {Array<Adminusertenant>}
     * @memberof Adminuser
     */
    'adminusertenants'?: Array<Adminusertenant>;
}
/**
 * 
 * @export
 * @interface AdminuserOnlyTenantAdminResponse
 */
export interface AdminuserOnlyTenantAdminResponse {
    /**
     * 
     * @type {AdminuserTenantAdmin}
     * @memberof AdminuserOnlyTenantAdminResponse
     */
    'adminuser': AdminuserTenantAdmin;
}
/**
 * 
 * @export
 * @interface AdminuserResponse
 */
export interface AdminuserResponse {
    /**
     * 
     * @type {Adminuser}
     * @memberof AdminuserResponse
     */
    'adminuser': Adminuser;
}
/**
 * 
 * @export
 * @interface AdminuserTenantAdmin
 */
export interface AdminuserTenantAdmin {
    /**
     * 管理ユーザーID
     * @type {string}
     * @memberof AdminuserTenantAdmin
     */
    'id': string;
    /**
     * 権限種別
     * @type {string}
     * @memberof AdminuserTenantAdmin
     */
    'role': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AdminuserTenantAdmin
     */
    'email': string;
    /**
     * 管理対象テナントID（カンマ区切り）
     * @type {string}
     * @memberof AdminuserTenantAdmin
     */
    'tenant_ids': string;
    /**
     * 管理対象テナント
     * @type {Array<Tenant>}
     * @memberof AdminuserTenantAdmin
     */
    'tenants'?: Array<Tenant>;
    /**
     * 管理対象テナント
     * @type {Array<Adminusertenant>}
     * @memberof AdminuserTenantAdmin
     */
    'adminusertenants'?: Array<Adminusertenant>;
}
/**
 * 
 * @export
 * @interface AdminusersResponse
 */
export interface AdminusersResponse {
    /**
     * 
     * @type {Array<Adminuser>}
     * @memberof AdminusersResponse
     */
    'adminusers': Array<Adminuser>;
}
/**
 * 
 * @export
 * @interface Adminusertenant
 */
export interface Adminusertenant {
    /**
     * id of adminusertenants
     * @type {string}
     * @memberof Adminusertenant
     */
    'id': string;
    /**
     * id of adminusers
     * @type {string}
     * @memberof Adminusertenant
     */
    'adminuser_id': string;
    /**
     * id of tenants
     * @type {string}
     * @memberof Adminusertenant
     */
    'tenant_id': string;
    /**
     * is_owner
     * @type {boolean}
     * @memberof Adminusertenant
     */
    'is_owner': boolean;
    /**
     * 
     * @type {Tenant}
     * @memberof Adminusertenant
     */
    'tenant'?: Tenant;
}
/**
 * 
 * @export
 * @interface AppversionResponse
 */
export interface AppversionResponse {
    /**
     * Appversion ID
     * @type {string}
     * @memberof AppversionResponse
     */
    'id': string;
    /**
     * Project ID
     * @type {string}
     * @memberof AppversionResponse
     */
    'project_id': string;
    /**
     * version
     * @type {string}
     * @memberof AppversionResponse
     */
    'version': string;
    /**
     * API URL
     * @type {string}
     * @memberof AppversionResponse
     */
    'api_url': string;
    /**
     * 強制アップデートフラグ
     * @type {boolean}
     * @memberof AppversionResponse
     */
    'force_update': boolean;
    /**
     * Photon Application Id
     * @type {string}
     * @memberof AppversionResponse
     */
    'photon_application_id': string;
}
/**
 * 
 * @export
 * @interface AppversionsByProjectResponse
 */
export interface AppversionsByProjectResponse {
    /**
     * 
     * @type {Array<AppversionResponse>}
     * @memberof AppversionsByProjectResponse
     */
    'appversions'?: Array<AppversionResponse>;
}
/**
 * 
 * @export
 * @interface Bodypart
 */
export interface Bodypart {
    /**
     * id
     * @type {string}
     * @memberof Bodypart
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof Bodypart
     */
    'project_id': string;
    /**
     * ボディパーツ名
     * @type {string}
     * @memberof Bodypart
     */
    'name': string;
    /**
     * false: 男性用 true: 女性用 
     * @type {boolean}
     * @memberof Bodypart
     */
    'is_f': boolean;
    /**
     * 1: FACE 2: BODY 3: HAIR 
     * @type {number}
     * @memberof Bodypart
     */
    'bodypart_type': number;
    /**
     * アバターアイテムのサムネイル画像
     * @type {string}
     * @memberof Bodypart
     */
    'avatar_item_thumbnail': string;
    /**
     * アイコン画像
     * @type {string}
     * @memberof Bodypart
     */
    'icon_image': string;
    /**
     * SK
     * @type {string}
     * @memberof Bodypart
     */
    'SK': string;
    /**
     * ABP
     * @type {string}
     * @memberof Bodypart
     */
    'ABP': string;
    /**
     * IKRTG
     * @type {string}
     * @memberof Bodypart
     */
    'IKRTG': string;
    /**
     * アクティベートアイテムID
     * @type {string}
     * @memberof Bodypart
     */
    'activate_item_id': string;
}
/**
 * 
 * @export
 * @interface BodypartResponse
 */
export interface BodypartResponse {
    /**
     * 
     * @type {Bodypart}
     * @memberof BodypartResponse
     */
    'bodypart': Bodypart;
}
/**
 * 
 * @export
 * @interface BodypartsResponse
 */
export interface BodypartsResponse {
    /**
     * 
     * @type {Array<Bodypart>}
     * @memberof BodypartsResponse
     */
    'bodyparts': Array<Bodypart>;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * カテゴリー ID
     * @type {string}
     * @memberof Category
     */
    'category_id': string;
    /**
     * プロジェクト ID
     * @type {string}
     * @memberof Category
     */
    'project_id': string;
    /**
     * 表示順
     * @type {number}
     * @memberof Category
     */
    'sort_index'?: number;
    /**
     * カテゴリー名
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 説明
     * @type {string}
     * @memberof Category
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CategoryRequestBody
 */
export interface CategoryRequestBody {
    /**
     * 表示順
     * @type {number}
     * @memberof CategoryRequestBody
     */
    'sort_index'?: number;
    /**
     * カテゴリー名
     * @type {string}
     * @memberof CategoryRequestBody
     */
    'name': string;
    /**
     * 説明
     * @type {string}
     * @memberof CategoryRequestBody
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CategoryUpdateResponse
 */
export interface CategoryUpdateResponse {
    /**
     * 
     * @type {Category}
     * @memberof CategoryUpdateResponse
     */
    'category': Category;
}
/**
 * 
 * @export
 * @interface CronjobResponse
 */
export interface CronjobResponse {
    /**
     * ステータス - success: 成功 - error: 失敗 
     * @type {string}
     * @memberof CronjobResponse
     */
    'status': string;
    /**
     * メッセージ
     * @type {string}
     * @memberof CronjobResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Dashboard
 */
export interface Dashboard {
    /**
     * ダッシュボード管理key
     * @type {string}
     * @memberof Dashboard
     */
    'dashboard_key'?: string;
    /**
     * アップロード先
     * @type {string}
     * @memberof Dashboard
     */
    'url': string;
    /**
     * バージョン情報
     * @type {number}
     * @memberof Dashboard
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface DashboardResult
 */
export interface DashboardResult {
    /**
     * 
     * @type {string}
     * @memberof DashboardResult
     */
    'project_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DashboardResult
     */
    'success_keys': Array<string>;
    /**
     * タイポ等で存在しないダッシュボード管理キーのリスト
     * @type {Array<string>}
     * @memberof DashboardResult
     */
    'none_keys'?: Array<string>;
    /**
     * 存在しているがアップロードに失敗したダッシュボード管理キーのリスト 
     * @type {Array<string>}
     * @memberof DashboardResult
     */
    'failed_keys'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DashboardUploadRequestBody
 */
export interface DashboardUploadRequestBody {
    /**
     * ダッシュボード管理keyのリスト signage サイネージマスタの更新 level レベル情報の更新 ※都度追加されます
     * @type {Array<string>}
     * @memberof DashboardUploadRequestBody
     */
    'dashboard_keys': Array<string>;
}
/**
 * 
 * @export
 * @interface DashboardUploadResponse
 */
export interface DashboardUploadResponse {
    /**
     * 
     * @type {DashboardResult}
     * @memberof DashboardUploadResponse
     */
    'results'?: DashboardResult;
}
/**
 * unexpected error format
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 1000: 何かしらのエラー(サンプル用なのでテキトウです) 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code': ErrorResponseCodeEnum;
    /**
     * 開発環境のみ含める
     * @type {string}
     * @memberof ErrorResponse
     */
    'detail': string;
    /**
     * stacktraceを開発環境のみ含める
     * @type {Array<string>}
     * @memberof ErrorResponse
     */
    'trace': Array<string>;
}

export const ErrorResponseCodeEnum = {
    NUMBER_1000: 1000
} as const;

export type ErrorResponseCodeEnum = typeof ErrorResponseCodeEnum[keyof typeof ErrorResponseCodeEnum];

/**
 * 
 * @export
 * @interface Faq
 */
export interface Faq {
    /**
     * FAQ ID
     * @type {string}
     * @memberof Faq
     */
    'faq_id': string;
    /**
     * プロジェクト ID
     * @type {string}
     * @memberof Faq
     */
    'project_id': string;
    /**
     * 表示順
     * @type {number}
     * @memberof Faq
     */
    'sort_index'?: number;
    /**
     * 
     * @type {string}
     * @memberof Faq
     */
    'category_id': string;
    /**
     * 質問事項
     * @type {string}
     * @memberof Faq
     */
    'question': string;
    /**
     * 解答
     * @type {string}
     * @memberof Faq
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface FaqRequestBody
 */
export interface FaqRequestBody {
    /**
     * カテゴリー ID
     * @type {string}
     * @memberof FaqRequestBody
     */
    'category_id': string;
    /**
     * 表示順
     * @type {number}
     * @memberof FaqRequestBody
     */
    'sort_index'?: number;
    /**
     * カテゴリー名
     * @type {string}
     * @memberof FaqRequestBody
     */
    'question': string;
    /**
     * 説明
     * @type {string}
     * @memberof FaqRequestBody
     */
    'answer': string;
}
/**
 * 
 * @export
 * @interface FaqUpdateResponse
 */
export interface FaqUpdateResponse {
    /**
     * 
     * @type {Faq}
     * @memberof FaqUpdateResponse
     */
    'faq': Faq;
}
/**
 * 
 * @export
 * @interface GetCategoriesResponse
 */
export interface GetCategoriesResponse {
    /**
     * 
     * @type {Array<Category>}
     * @memberof GetCategoriesResponse
     */
    'categories'?: Array<Category>;
}
/**
 * 
 * @export
 * @interface GetCategoryFaqsResponse
 */
export interface GetCategoryFaqsResponse {
    /**
     * 
     * @type {Array<Faq>}
     * @memberof GetCategoryFaqsResponse
     */
    'faqs': Array<Faq>;
}
/**
 * 
 * @export
 * @interface GetCategoryResponse
 */
export interface GetCategoryResponse {
    /**
     * 
     * @type {Category}
     * @memberof GetCategoryResponse
     */
    'category'?: Category;
}
/**
 * 
 * @export
 * @interface GetDashboardsResponse
 */
export interface GetDashboardsResponse {
    /**
     * 
     * @type {Array<Dashboard>}
     * @memberof GetDashboardsResponse
     */
    'dashboards': Array<Dashboard>;
}
/**
 * 
 * @export
 * @interface GetFaqResponse
 */
export interface GetFaqResponse {
    /**
     * 
     * @type {Faq}
     * @memberof GetFaqResponse
     */
    'faq': Faq;
}
/**
 * 
 * @export
 * @interface GetLevelSignages
 */
export interface GetLevelSignages {
    /**
     * レベル名
     * @type {string}
     * @memberof GetLevelSignages
     */
    'level': string;
}
/**
 * 
 * @export
 * @interface GetSignageResponse
 */
export interface GetSignageResponse {
    /**
     * 
     * @type {Signage}
     * @memberof GetSignageResponse
     */
    'signage': Signage;
}
/**
 * 
 * @export
 * @interface GetSignageSettingResponse
 */
export interface GetSignageSettingResponse {
    /**
     * 
     * @type {SignageSetting}
     * @memberof GetSignageSettingResponse
     */
    'setting'?: SignageSetting;
}
/**
 * 
 * @export
 * @interface GetSignagesResponse
 */
export interface GetSignagesResponse {
    /**
     * 
     * @type {Array<Signage>}
     * @memberof GetSignagesResponse
     */
    'signages'?: Array<Signage>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Item ID
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Item
     */
    'project_id': string;
    /**
     * アイテム種類 1: スキンアイテム 2: 回復アイテム 3: トロフィーアイテム 4: 回復以外消費アイテム 
     * @type {number}
     * @memberof Item
     */
    'category': number;
    /**
     * アイテム名
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * アイテム説明
     * @type {string}
     * @memberof Item
     */
    'description': string;
    /**
     * アイテム画像パス
     * @type {string}
     * @memberof Item
     */
    'image_path': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof Item
     */
    'filetype': string;
    /**
     * アイテムの種類 使用不可アイテム = 0 消費アイテム = 1 恒常アイテム = 2 
     * @type {number}
     * @memberof Item
     */
    'type': number;
    /**
     * NFTかどうか
     * @type {boolean}
     * @memberof Item
     */
    'is_nft': boolean;
    /**
     * 利用種別
     * @type {number}
     * @memberof Item
     */
    'use_type': number;
    /**
     * 利用パラメータ
     * @type {string}
     * @memberof Item
     */
    'use_parameter': string;
    /**
     * 有効期限開始日時
     * @type {string}
     * @memberof Item
     */
    'limit_start': string;
    /**
     * 有効期限終了日時
     * @type {string}
     * @memberof Item
     */
    'limit_end': string;
}
/**
 * 
 * @export
 * @interface ItemLevel
 */
export interface ItemLevel {
    /**
     * LevelItem ID
     * @type {string}
     * @memberof ItemLevel
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof ItemLevel
     */
    'project_id': string;
    /**
     * アイテムID
     * @type {string}
     * @memberof ItemLevel
     */
    'master_item_id': string;
    /**
     * アイテム消費フラグ true: 消費する false: 消費しない 
     * @type {boolean}
     * @memberof ItemLevel
     */
    'is_item_consumed': boolean;
    /**
     * パスアイテムフラグ true: パスアイテム false: パスアイテムではない 
     * @type {boolean}
     * @memberof ItemLevel
     */
    'is_passitem': boolean;
    /**
     * アイテム数
     * @type {number}
     * @memberof ItemLevel
     */
    'item_amount': number;
    /**
     * レベルID
     * @type {string}
     * @memberof ItemLevel
     */
    'master_level_id': string;
}
/**
 * 
 * @export
 * @interface ItemLevelResponse
 */
export interface ItemLevelResponse {
    /**
     * 
     * @type {ItemLevel}
     * @memberof ItemLevelResponse
     */
    'item_level': ItemLevel;
}
/**
 * 
 * @export
 * @interface ItemResponse
 */
export interface ItemResponse {
    /**
     * 
     * @type {Item}
     * @memberof ItemResponse
     */
    'item': Item;
}
/**
 * 
 * @export
 * @interface ItemsResponse
 */
export interface ItemsResponse {
    /**
     * 
     * @type {Array<Item>}
     * @memberof ItemsResponse
     */
    'items': Array<Item>;
}
/**
 * 
 * @export
 * @interface Level
 */
export interface Level {
    /**
     * Level ID
     * @type {string}
     * @memberof Level
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Level
     */
    'project_id': string;
    /**
     * レベル名
     * @type {string}
     * @memberof Level
     */
    'level': string;
    /**
     * ランドマーク名
     * @type {string}
     * @memberof Level
     */
    'landmark_name': string;
    /**
     * レベルサムネイル
     * @type {string}
     * @memberof Level
     */
    'level_thumbnail': string;
    /**
     * レベル遷移開始日時
     * @type {string}
     * @memberof Level
     */
    'level_transition_begin_at': string;
    /**
     * レベル遷移終了日時
     * @type {string}
     * @memberof Level
     */
    'level_transition_end_at': string;
    /**
     * アイテムレベル
     * @type {Array<ItemLevel>}
     * @memberof Level
     */
    'item_levels': Array<ItemLevel>;
}
/**
 * 
 * @export
 * @interface LevelResponse
 */
export interface LevelResponse {
    /**
     * 
     * @type {Level}
     * @memberof LevelResponse
     */
    'level': Level;
}
/**
 * 
 * @export
 * @interface LevelSignageResponse
 */
export interface LevelSignageResponse {
    /**
     * 
     * @type {Array<Signage>}
     * @memberof LevelSignageResponse
     */
    'signages': Array<Signage>;
}
/**
 * 
 * @export
 * @interface LevelsResponse
 */
export interface LevelsResponse {
    /**
     * 
     * @type {Array<Level>}
     * @memberof LevelsResponse
     */
    'levels': Array<Level>;
}
/**
 * 
 * @export
 * @interface LoginBonusResponse
 */
export interface LoginBonusResponse {
    /**
     * 
     * @type {Loginbonus}
     * @memberof LoginBonusResponse
     */
    'loginbonus': Loginbonus;
}
/**
 * 
 * @export
 * @interface LoginBonusRewardResponse
 */
export interface LoginBonusRewardResponse {
    /**
     * 
     * @type {LoginbonusReward}
     * @memberof LoginBonusRewardResponse
     */
    'loginbonus_reward': LoginbonusReward;
}
/**
 * 
 * @export
 * @interface LoginBonusesResponse
 */
export interface LoginBonusesResponse {
    /**
     * 
     * @type {Array<Loginbonus>}
     * @memberof LoginBonusesResponse
     */
    'loginbonuses': Array<Loginbonus>;
}
/**
 * 
 * @export
 * @interface Loginbonus
 */
export interface Loginbonus {
    /**
     * id
     * @type {string}
     * @memberof Loginbonus
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof Loginbonus
     */
    'project_id': string;
    /**
     * アイコン種類ログインボーナスリワード種類 0: 不明 1: 通常（デイリー） 2: 歓迎 3: イベント（季節） 4: イベント（その他） 
     * @type {number}
     * @memberof Loginbonus
     */
    'loginbonus_type': number;
    /**
     * ログインボーナスのタイトル
     * @type {string}
     * @memberof Loginbonus
     */
    'title': string;
    /**
     * ログインボーナスの説明
     * @type {string}
     * @memberof Loginbonus
     */
    'description': string;
    /**
     * ログインボーナスの画像パス
     * @type {string}
     * @memberof Loginbonus
     */
    'image_path': string;
    /**
     * ログインボーナスの有効期限
     * @type {string}
     * @memberof Loginbonus
     */
    'expire_at': string;
    /**
     * ログインボーナスの繰り返し
     * @type {boolean}
     * @memberof Loginbonus
     */
    'repeat': boolean;
    /**
     * ログインボーナスの順番
     * @type {number}
     * @memberof Loginbonus
     */
    'order': number;
    /**
     * ログインボーナスの受け取り可能時間タイムゾーン
     * @type {string}
     * @memberof Loginbonus
     */
    'receive_time_tz': string;
    /**
     * ログインボーナスの受け取り可能時間
     * @type {string}
     * @memberof Loginbonus
     */
    'receive_time': string;
    /**
     * ログインボーナスの報酬
     * @type {Array<LoginbonusReward>}
     * @memberof Loginbonus
     */
    'loginbonus_rewards': Array<LoginbonusReward>;
}
/**
 * 
 * @export
 * @interface LoginbonusReward
 */
export interface LoginbonusReward {
    /**
     * id
     * @type {string}
     * @memberof LoginbonusReward
     */
    'id': string;
    /**
     * ログインボーナスの日数
     * @type {number}
     * @memberof LoginbonusReward
     */
    'day_count': number;
    /**
     * id of loginbonus
     * @type {string}
     * @memberof LoginbonusReward
     */
    'master_loginbonus_id': string;
    /**
     * id of master_reward
     * @type {string}
     * @memberof LoginbonusReward
     */
    'master_reward_id': string;
    /**
     * 
     * @type {Reward}
     * @memberof LoginbonusReward
     */
    'reward': Reward;
}
/**
 * 
 * @export
 * @interface MailboxItem
 */
export interface MailboxItem {
    /**
     * id of mailbox_item
     * @type {string}
     * @memberof MailboxItem
     */
    'id': string;
    /**
     * id of mailbox
     * @type {string}
     * @memberof MailboxItem
     */
    'mailbox_id': string;
    /**
     * プレゼントアイテム種類 1: アイテム 2: コイン 3: ジェム 4: アバターボディパーツ 5: アバター衣装 
     * @type {number}
     * @memberof MailboxItem
     */
    'reward_type': number;
    /**
     * プレゼントアイテム種類のパラメータ ※ 例えば、アイテム使用の場合はアイテムIDを指定する 
     * @type {string}
     * @memberof MailboxItem
     */
    'value': string;
    /**
     * 個数
     * @type {number}
     * @memberof MailboxItem
     */
    'quantity': number;
    /**
     * 既に受け取ったかどうか
     * @type {boolean}
     * @memberof MailboxItem
     */
    'already_taken': boolean;
}
/**
 * 
 * @export
 * @interface MailboxItemBody
 */
export interface MailboxItemBody {
    /**
     * id of mailbox_item
     * @type {string}
     * @memberof MailboxItemBody
     */
    'id'?: string;
    /**
     * プレゼントアイテム種類 1: アイテム 2: コイン 3: ジェム 4: アバターボディパーツ 5: アバター衣装 
     * @type {number}
     * @memberof MailboxItemBody
     */
    'reward_type': number;
    /**
     * プレゼントアイテム種類のパラメータ ※ 例えば、アイテム使用の場合はアイテムIDを指定する 
     * @type {string}
     * @memberof MailboxItemBody
     */
    'value'?: string;
    /**
     * 個数
     * @type {number}
     * @memberof MailboxItemBody
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface MailboxMessage
 */
export interface MailboxMessage {
    /**
     * id
     * @type {string}
     * @memberof MailboxMessage
     */
    'id': string;
    /**
     * id of userprofiles
     * @type {string}
     * @memberof MailboxMessage
     */
    'userprofile_id': string;
    /**
     * title
     * @type {string}
     * @memberof MailboxMessage
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof MailboxMessage
     */
    'body': string;
    /**
     * important
     * @type {boolean}
     * @memberof MailboxMessage
     */
    'important': boolean;
    /**
     * url
     * @type {string}
     * @memberof MailboxMessage
     */
    'url': string;
    /**
     * メール元 0: 不明 1: ミッション 2: ログインボーナス 3: フレンド 4: ランクアップ 5: サーバーギフト 6: NPC 7: ガイド 8: 動画 9: ユーザー登録 
     * @type {number}
     * @memberof MailboxMessage
     */
    'source': number;
    /**
     * メール元（差出人など） Id 
     * @type {string}
     * @memberof MailboxMessage
     */
    'source_id': string;
    /**
     * メールボックス状態 1: 新着 2: 未読 3: 既読 
     * @type {number}
     * @memberof MailboxMessage
     */
    'status': number;
    /**
     * 既に受け取ったかどうか
     * @type {boolean}
     * @memberof MailboxMessage
     */
    'already_taken': boolean;
    /**
     * accepted_at
     * @type {string}
     * @memberof MailboxMessage
     */
    'accepted_at'?: string;
    /**
     * deleted
     * @type {boolean}
     * @memberof MailboxMessage
     */
    'deleted': boolean;
    /**
     * days_limit
     * @type {number}
     * @memberof MailboxMessage
     */
    'days_limit': number;
    /**
     * is_official
     * @type {boolean}
     * @memberof MailboxMessage
     */
    'is_official': boolean;
    /**
     * is_ambassador
     * @type {boolean}
     * @memberof MailboxMessage
     */
    'is_ambassador': boolean;
    /**
     * mailbox_items
     * @type {Array<MailboxItem>}
     * @memberof MailboxMessage
     */
    'mailbox_items'?: Array<MailboxItem>;
}
/**
 * 
 * @export
 * @interface MailboxMessageResponse
 */
export interface MailboxMessageResponse {
    /**
     * 
     * @type {MailboxMessage}
     * @memberof MailboxMessageResponse
     */
    'mailbox_message': MailboxMessage;
}
/**
 * 
 * @export
 * @interface MailboxMessagesResponse
 */
export interface MailboxMessagesResponse {
    /**
     * mailbox_messages
     * @type {Array<MailboxMessage>}
     * @memberof MailboxMessagesResponse
     */
    'mailbox_messages': Array<MailboxMessage>;
}
/**
 * 
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * id
     * @type {string}
     * @memberof Mission
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof Mission
     */
    'project_id': string;
    /**
     * 1: MISSION_TYPE_DAILY 2: MISSION_TYPE_WEEKLY 3: MISSION_TYPE_BEGINNER 
     * @type {number}
     * @memberof Mission
     */
    'mission_type': number;
    /**
     * id of master_translations
     * @type {string}
     * @memberof Mission
     */
    'title_id': string;
    /**
     * id of master_translations
     * @type {string}
     * @memberof Mission
     */
    'description_id': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof Mission
     */
    'master_reward_id': string;
    /**
     * Condition starting rank
     * @type {number}
     * @memberof Mission
     */
    'rank_start': number;
    /**
     * Condition ending rank
     * @type {number}
     * @memberof Mission
     */
    'rank_end': number;
    /**
     * Condition objective
     * @type {number}
     * @memberof Mission
     */
    'objective': number;
    /**
     * 1: アイテム使用 2: いいねを行う 3: コイン消費 4: デイリーミッション達成 5: ウィークリーミッション達成 
     * @type {number}
     * @memberof Mission
     */
    'objective_type': number;
    /**
     * false: 普通ミッション true: スペシャルミッション 
     * @type {boolean}
     * @memberof Mission
     */
    'is_special': boolean;
    /**
     * ミッション開始日時 ※ 未来日時を指定すると、指定した日時にミッションが開始される 
     * @type {string}
     * @memberof Mission
     */
    'start': string;
    /**
     * ミッション終了日時 ※ 未来日時を指定すると、指定した日時にミッションが終了される 
     * @type {string}
     * @memberof Mission
     */
    'end': string;
    /**
     * ミッション目標のパラメータ ※ 例えば、アイテム使用の場合はアイテムIDを指定する 
     * @type {string}
     * @memberof Mission
     */
    'objective_parameter': string;
    /**
     * 
     * @type {Reward}
     * @memberof Mission
     */
    'reward': Reward;
}
/**
 * 
 * @export
 * @interface MissionResponse
 */
export interface MissionResponse {
    /**
     * 
     * @type {Mission}
     * @memberof MissionResponse
     */
    'mission': Mission;
}
/**
 * 
 * @export
 * @interface MissionsResponse
 */
export interface MissionsResponse {
    /**
     * 
     * @type {Array<Mission>}
     * @memberof MissionsResponse
     */
    'missions': Array<Mission>;
}
/**
 * 
 * @export
 * @interface NpcAction
 */
export interface NpcAction {
    /**
     * Npc Action ID
     * @type {string}
     * @memberof NpcAction
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof NpcAction
     */
    'project_id': string;
    /**
     * Data Table Name
     * @type {string}
     * @memberof NpcAction
     */
    'dt_name': string;
    /**
     * Data Table Detail
     * @type {string}
     * @memberof NpcAction
     */
    'json_data': string;
    /**
     * 期間開始
     * @type {string}
     * @memberof NpcAction
     */
    'from_date': string;
}
/**
 * 
 * @export
 * @interface NpcActionResponse
 */
export interface NpcActionResponse {
    /**
     * 
     * @type {NpcAction}
     * @memberof NpcActionResponse
     */
    'npc_action': NpcAction;
}
/**
 * 
 * @export
 * @interface NpcActionsResponse
 */
export interface NpcActionsResponse {
    /**
     * 
     * @type {Array<NpcAction>}
     * @memberof NpcActionsResponse
     */
    'npc_actions': Array<NpcAction>;
}
/**
 * 
 * @export
 * @interface OfficialMail
 */
export interface OfficialMail {
    /**
     * id
     * @type {string}
     * @memberof OfficialMail
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof OfficialMail
     */
    'project_id': string;
    /**
     * title
     * @type {string}
     * @memberof OfficialMail
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof OfficialMail
     */
    'body': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof OfficialMail
     */
    'master_reward_id': string;
    /**
     * url
     * @type {string}
     * @memberof OfficialMail
     */
    'url': string;
    /**
     * start_rank
     * @type {number}
     * @memberof OfficialMail
     */
    'start_rank': number;
    /**
     * end_rank
     * @type {number}
     * @memberof OfficialMail
     */
    'end_rank': number;
    /**
     * login_count
     * @type {number}
     * @memberof OfficialMail
     */
    'login_count': number;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof OfficialMail
     */
    'target_type': number;
    /**
     * 開始日時
     * @type {string}
     * @memberof OfficialMail
     */
    'start_period_at': string;
    /**
     * 終了日時
     * @type {string}
     * @memberof OfficialMail
     */
    'end_period_at': string;
    /**
     * 受け取れる期間
     * @type {number}
     * @memberof OfficialMail
     */
    'days_limit': number;
    /**
     * false: 配信不可 true: 配信可 
     * @type {boolean}
     * @memberof OfficialMail
     */
    'is_distribute': boolean;
    /**
     * true: 重要設定 
     * @type {boolean}
     * @memberof OfficialMail
     */
    'is_important': boolean;
    /**
     * 
     * @type {Reward}
     * @memberof OfficialMail
     */
    'reward'?: Reward;
}
/**
 * 
 * @export
 * @interface OfficialMailResponse
 */
export interface OfficialMailResponse {
    /**
     * 
     * @type {OfficialMail}
     * @memberof OfficialMailResponse
     */
    'official_mail'?: OfficialMail;
}
/**
 * 
 * @export
 * @interface OfficialMailTarget
 */
export interface OfficialMailTarget {
    /**
     * id
     * @type {number}
     * @memberof OfficialMailTarget
     */
    'id': number;
    /**
     * id of official_mail
     * @type {string}
     * @memberof OfficialMailTarget
     */
    'official_mail_id': string;
    /**
     * id of userprofile
     * @type {string}
     * @memberof OfficialMailTarget
     */
    'userprofile_id': string;
}
/**
 * 
 * @export
 * @interface OfficialMailTargetResponse
 */
export interface OfficialMailTargetResponse {
    /**
     * 
     * @type {OfficialMailTarget}
     * @memberof OfficialMailTargetResponse
     */
    'official_mail_target'?: OfficialMailTarget;
}
/**
 * 
 * @export
 * @interface OfficialMailTargetsResponse
 */
export interface OfficialMailTargetsResponse {
    /**
     * 
     * @type {Array<OfficialMailTarget>}
     * @memberof OfficialMailTargetsResponse
     */
    'official_mail_targets'?: Array<OfficialMailTarget>;
}
/**
 * 
 * @export
 * @interface OfficialMailsResponse
 */
export interface OfficialMailsResponse {
    /**
     * 
     * @type {Array<OfficialMail>}
     * @memberof OfficialMailsResponse
     */
    'official_mails'?: Array<OfficialMail>;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * プランID
     * @type {number}
     * @memberof Plan
     */
    'id': number;
    /**
     * プラン名
     * @type {string}
     * @memberof Plan
     */
    'name': string;
    /**
     * プラン説明
     * @type {string}
     * @memberof Plan
     */
    'description'?: string;
    /**
     * 申し込み可能か
     * @type {boolean}
     * @memberof Plan
     */
    'can_apply'?: boolean;
}
/**
 * 
 * @export
 * @interface PlansResponse
 */
export interface PlansResponse {
    /**
     * 
     * @type {Array<Plan>}
     * @memberof PlansResponse
     */
    'plans': Array<Plan>;
}
/**
 * 
 * @export
 * @interface PostAccountAppliesBody
 */
export interface PostAccountAppliesBody {
    /**
     * アカウント名
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'tenant_name': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'email': string;
    /**
     * 会社名
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'company_name': string;
    /**
     * 会社番号
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'company_number': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'postal_code': string;
    /**
     * 都道府県
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'province': string;
    /**
     * 市区町村
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'city': string;
    /**
     * 住所
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'address': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'phone_number': string;
    /**
     * 部署
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'department'?: string;
    /**
     * 担当者名
     * @type {string}
     * @memberof PostAccountAppliesBody
     */
    'pic_name': string;
}
/**
 * 
 * @export
 * @interface PostAdminusersBody
 */
export interface PostAdminusersBody {
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostAdminusersBody
     */
    'email': string;
    /**
     * 権限種別
     * @type {string}
     * @memberof PostAdminusersBody
     */
    'role': string;
    /**
     * 管理対象テナントID（カンマ区切り）
     * @type {string}
     * @memberof PostAdminusersBody
     */
    'tenant_ids'?: string;
}
/**
 * 
 * @export
 * @interface PostAdminusersOnlyTenantAdminBody
 */
export interface PostAdminusersOnlyTenantAdminBody {
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostAdminusersOnlyTenantAdminBody
     */
    'email': string;
    /**
     * 管理対象テナントID（カンマ区切り）
     * @type {string}
     * @memberof PostAdminusersOnlyTenantAdminBody
     */
    'tenant_ids': string;
}
/**
 * 
 * @export
 * @interface PostAdminusertenantAttachOwnerBody
 */
export interface PostAdminusertenantAttachOwnerBody {
    /**
     * id of adminuser
     * @type {string}
     * @memberof PostAdminusertenantAttachOwnerBody
     */
    'adminuser_id': string;
}
/**
 * 
 * @export
 * @interface PostAppversionsBody
 */
export interface PostAppversionsBody {
    /**
     * Appversion ID
     * @type {string}
     * @memberof PostAppversionsBody
     */
    'id': string;
    /**
     * Project ID
     * @type {string}
     * @memberof PostAppversionsBody
     */
    'project_id': string;
    /**
     * version
     * @type {string}
     * @memberof PostAppversionsBody
     */
    'version': string;
    /**
     * API URL
     * @type {string}
     * @memberof PostAppversionsBody
     */
    'api_url': string;
    /**
     * 強制アップデートフラグ
     * @type {boolean}
     * @memberof PostAppversionsBody
     */
    'force_update': boolean;
    /**
     * Photon Application Id
     * @type {string}
     * @memberof PostAppversionsBody
     */
    'photon_application_id'?: string;
}
/**
 * 
 * @export
 * @interface PostAuthBody
 */
export interface PostAuthBody {
    /**
     * 認証用トークン
     * @type {string}
     * @memberof PostAuthBody
     */
    'verify_token': string;
    /**
     * ワンタイムパスワード
     * @type {string}
     * @memberof PostAuthBody
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostAuthRequestBody
 */
export interface PostAuthRequestBody {
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostAuthRequestBody
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PostAuthRequestResponse
 */
export interface PostAuthRequestResponse {
    /**
     * 認証用トークン
     * @type {string}
     * @memberof PostAuthRequestResponse
     */
    'verify_token': string;
}
/**
 * 
 * @export
 * @interface PostAuthResponse
 */
export interface PostAuthResponse {
    /**
     * アクセストークン
     * @type {string}
     * @memberof PostAuthResponse
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface PostBodypartBody
 */
export interface PostBodypartBody {
    /**
     * ボディパーツ名
     * @type {string}
     * @memberof PostBodypartBody
     */
    'name': string;
    /**
     * false: 男性用 true: 女性用 
     * @type {boolean}
     * @memberof PostBodypartBody
     */
    'is_f': boolean;
    /**
     * 1: FACE 2: BODY 3: HAIR 
     * @type {number}
     * @memberof PostBodypartBody
     */
    'bodypart_type': number;
    /**
     * アバターアイテムのサムネイル画像
     * @type {string}
     * @memberof PostBodypartBody
     */
    'avatar_item_thumbnail': string;
    /**
     * アイコン画像
     * @type {string}
     * @memberof PostBodypartBody
     */
    'icon_image': string;
    /**
     * SK
     * @type {string}
     * @memberof PostBodypartBody
     */
    'SK': string;
    /**
     * ABP
     * @type {string}
     * @memberof PostBodypartBody
     */
    'ABP': string;
    /**
     * IKRTG
     * @type {string}
     * @memberof PostBodypartBody
     */
    'IKRTG': string;
    /**
     * アクティベートアイテムID
     * @type {string}
     * @memberof PostBodypartBody
     */
    'activate_item_id'?: string;
}
/**
 * 
 * @export
 * @interface PostEarnFreeGemsRequest
 */
export interface PostEarnFreeGemsRequest {
    /**
     * ユーザー Id
     * @type {string}
     * @memberof PostEarnFreeGemsRequest
     */
    'user_id': string;
    /**
     * 消費するゲーム内通貨
     * @type {number}
     * @memberof PostEarnFreeGemsRequest
     */
    'gems': number;
}
/**
 * 
 * @export
 * @interface PostEarnFreeGemsResponse
 */
export interface PostEarnFreeGemsResponse {
    /**
     * 
     * @type {Wallet}
     * @memberof PostEarnFreeGemsResponse
     */
    'wallet': Wallet;
}
/**
 * 
 * @export
 * @interface PostItemLevelBody
 */
export interface PostItemLevelBody {
    /**
     * アイテムID
     * @type {string}
     * @memberof PostItemLevelBody
     */
    'master_item_id': string;
    /**
     * アイテム消費フラグ true: 消費する false: 消費しない 
     * @type {boolean}
     * @memberof PostItemLevelBody
     */
    'is_item_consumed': boolean;
    /**
     * パスアイテムフラグ true: パスアイテム false: パスアイテムではない 
     * @type {boolean}
     * @memberof PostItemLevelBody
     */
    'is_passitem': boolean;
    /**
     * アイテム数
     * @type {number}
     * @memberof PostItemLevelBody
     */
    'item_amount': number;
    /**
     * レベルID
     * @type {string}
     * @memberof PostItemLevelBody
     */
    'master_level_id': string;
}
/**
 * 
 * @export
 * @interface PostItemsBody
 */
export interface PostItemsBody {
    /**
     * アイテム種類 1: スキンアイテム 2: 回復アイテム 3: トロフィーアイテム 4: 回復以外消費アイテム 
     * @type {number}
     * @memberof PostItemsBody
     */
    'category': number;
    /**
     * アイテム名
     * @type {string}
     * @memberof PostItemsBody
     */
    'name': string;
    /**
     * アイテム説明
     * @type {string}
     * @memberof PostItemsBody
     */
    'description': string;
    /**
     * アイテム画像パス
     * @type {string}
     * @memberof PostItemsBody
     */
    'image_path': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PostItemsBody
     */
    'filetype': string;
    /**
     * アイテムの種類 使用不可アイテム = 0 消費アイテム = 1 恒常アイテム = 2 
     * @type {number}
     * @memberof PostItemsBody
     */
    'type': number;
    /**
     * NFTかどうか
     * @type {boolean}
     * @memberof PostItemsBody
     */
    'is_nft': boolean;
    /**
     * 利用種別
     * @type {number}
     * @memberof PostItemsBody
     */
    'use_type': number;
    /**
     * 利用パラメータ
     * @type {string}
     * @memberof PostItemsBody
     */
    'use_parameter': string;
    /**
     * 有効期限開始日時
     * @type {string}
     * @memberof PostItemsBody
     */
    'limit_start': string;
    /**
     * 有効期限終了日時
     * @type {string}
     * @memberof PostItemsBody
     */
    'limit_end': string;
}
/**
 * 
 * @export
 * @interface PostLevelsBody
 */
export interface PostLevelsBody {
    /**
     * Level ID
     * @type {string}
     * @memberof PostLevelsBody
     */
    'id': string;
    /**
     * レベル名
     * @type {string}
     * @memberof PostLevelsBody
     */
    'level': string;
    /**
     * ランドマーク名
     * @type {string}
     * @memberof PostLevelsBody
     */
    'landmark_name': string;
    /**
     * レベルサムネイル
     * @type {string}
     * @memberof PostLevelsBody
     */
    'level_thumbnail': string;
    /**
     * レベル遷移開始日時
     * @type {string}
     * @memberof PostLevelsBody
     */
    'level_transition_begin_at': string;
    /**
     * レベル遷移終了日時
     * @type {string}
     * @memberof PostLevelsBody
     */
    'level_transition_end_at': string;
}
/**
 * 
 * @export
 * @interface PostLoginBonusRewardsBody
 */
export interface PostLoginBonusRewardsBody {
    /**
     * ログインボーナスの日数
     * @type {number}
     * @memberof PostLoginBonusRewardsBody
     */
    'day_count': number;
    /**
     * id of master_loginbonus
     * @type {string}
     * @memberof PostLoginBonusRewardsBody
     */
    'master_loginbonus_id': string;
    /**
     * id of master_reward
     * @type {string}
     * @memberof PostLoginBonusRewardsBody
     */
    'master_reward_id': string;
}
/**
 * 
 * @export
 * @interface PostLoginBonusesBody
 */
export interface PostLoginBonusesBody {
    /**
     * アイコン種類ログインボーナスリワード種類 0: 不明 1: 通常（デイリー） 2: 歓迎 3: イベント（季節） 4: イベント（その他） 
     * @type {number}
     * @memberof PostLoginBonusesBody
     */
    'loginbonus_type': number;
    /**
     * ログインボーナスのタイトル
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'title': string;
    /**
     * ログインボーナスの説明
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'description': string;
    /**
     * ログインボーナスの画像パス
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'image_path': string;
    /**
     * ログインボーナスの有効期限
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'expire_at'?: string;
    /**
     * ログインボーナスの繰り返し
     * @type {boolean}
     * @memberof PostLoginBonusesBody
     */
    'repeat': boolean;
    /**
     * ログインボーナスの順番
     * @type {number}
     * @memberof PostLoginBonusesBody
     */
    'order': number;
    /**
     * ログインボーナスの受け取り可能時間タイムゾーン
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'receive_time_tz': string;
    /**
     * ログインボーナスの受け取り可能時間
     * @type {string}
     * @memberof PostLoginBonusesBody
     */
    'receive_time': string;
}
/**
 * 
 * @export
 * @interface PostMailboxMessagesBody
 */
export interface PostMailboxMessagesBody {
    /**
     * title
     * @type {string}
     * @memberof PostMailboxMessagesBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PostMailboxMessagesBody
     */
    'body'?: string;
    /**
     * important
     * @type {boolean}
     * @memberof PostMailboxMessagesBody
     */
    'important': boolean;
    /**
     * url
     * @type {string}
     * @memberof PostMailboxMessagesBody
     */
    'url'?: string;
    /**
     * メール元 0: 不明 1: ミッション 2: ログインボーナス 3: フレンド 4: ランクアップ 5: サーバーギフト 6: NPC 7: ガイド 8: 動画 9: ユーザー登録 
     * @type {number}
     * @memberof PostMailboxMessagesBody
     */
    'source': number;
    /**
     * メール元（差出人など） Id 
     * @type {string}
     * @memberof PostMailboxMessagesBody
     */
    'source_id'?: string;
    /**
     * days_limit
     * @type {number}
     * @memberof PostMailboxMessagesBody
     */
    'days_limit': number;
    /**
     * is_official
     * @type {boolean}
     * @memberof PostMailboxMessagesBody
     */
    'is_official': boolean;
    /**
     * is_ambassador
     * @type {boolean}
     * @memberof PostMailboxMessagesBody
     */
    'is_ambassador': boolean;
    /**
     * mailbox_items
     * @type {Array<MailboxItemBody>}
     * @memberof PostMailboxMessagesBody
     */
    'mailbox_items'?: Array<MailboxItemBody>;
}
/**
 * 
 * @export
 * @interface PostMissionsBody
 */
export interface PostMissionsBody {
    /**
     * 1: MISSION_TYPE_DAILY 2: MISSION_TYPE_WEEKLY 3: MISSION_TYPE_BEGINNER 
     * @type {number}
     * @memberof PostMissionsBody
     */
    'mission_type': number;
    /**
     * id of master_translations
     * @type {string}
     * @memberof PostMissionsBody
     */
    'title_id': string;
    /**
     * id of master_translations
     * @type {string}
     * @memberof PostMissionsBody
     */
    'description_id': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PostMissionsBody
     */
    'master_reward_id': string;
    /**
     * Condition starting rank
     * @type {number}
     * @memberof PostMissionsBody
     */
    'rank_start': number;
    /**
     * Condition ending rank
     * @type {number}
     * @memberof PostMissionsBody
     */
    'rank_end': number;
    /**
     * Condition objective
     * @type {number}
     * @memberof PostMissionsBody
     */
    'objective': number;
    /**
     * 1: アイテム使用 2: いいねを行う 3: コイン消費 4: デイリーミッション達成 5: ウィークリーミッション達成 
     * @type {number}
     * @memberof PostMissionsBody
     */
    'objective_type': number;
    /**
     * false: 普通ミッション true: スペシャルミッション 
     * @type {boolean}
     * @memberof PostMissionsBody
     */
    'is_special': boolean;
    /**
     * ミッション開始日時 ※ 未来日時を指定すると、指定した日時にミッションが開始される 
     * @type {string}
     * @memberof PostMissionsBody
     */
    'start'?: string;
    /**
     * ミッション終了日時 ※ 未来日時を指定すると、指定した日時にミッションが終了される 
     * @type {string}
     * @memberof PostMissionsBody
     */
    'end'?: string;
    /**
     * ミッション目標のパラメータ ※ 例えば、アイテム使用の場合はアイテムIDを指定する 
     * @type {string}
     * @memberof PostMissionsBody
     */
    'objective_parameter'?: string;
}
/**
 * 
 * @export
 * @interface PostNpcActionsBody
 */
export interface PostNpcActionsBody {
    /**
     * Data Table Name
     * @type {string}
     * @memberof PostNpcActionsBody
     */
    'dt_name': string;
    /**
     * Data Table Master Json
     * @type {any}
     * @memberof PostNpcActionsBody
     */
    'json_data': any;
    /**
     * 期間開始
     * @type {string}
     * @memberof PostNpcActionsBody
     */
    'from_date': string;
}
/**
 * 
 * @export
 * @interface PostOfficialMailBody
 */
export interface PostOfficialMailBody {
    /**
     * title
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'body': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'master_reward_id'?: string;
    /**
     * url
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'url'?: string;
    /**
     * start_rank
     * @type {number}
     * @memberof PostOfficialMailBody
     */
    'start_rank': number;
    /**
     * end_rank
     * @type {number}
     * @memberof PostOfficialMailBody
     */
    'end_rank': number;
    /**
     * login_count
     * @type {number}
     * @memberof PostOfficialMailBody
     */
    'login_count': number;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof PostOfficialMailBody
     */
    'target_type': number;
    /**
     * 開始日時
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'start_period_at': string;
    /**
     * 終了日時
     * @type {string}
     * @memberof PostOfficialMailBody
     */
    'end_period_at': string;
    /**
     * 受け取れる期間
     * @type {number}
     * @memberof PostOfficialMailBody
     */
    'days_limit': number;
    /**
     * false: 配信不可 true: 配信可 
     * @type {boolean}
     * @memberof PostOfficialMailBody
     */
    'is_distribute': boolean;
    /**
     * true: 重要タブ設定 
     * @type {boolean}
     * @memberof PostOfficialMailBody
     */
    'is_important': boolean;
}
/**
 * 
 * @export
 * @interface PostOfficialMailTargetBody
 */
export interface PostOfficialMailTargetBody {
    /**
     * id of userprofile
     * @type {Array<string>}
     * @memberof PostOfficialMailTargetBody
     */
    'userprofile_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface PostProjectAnnouncementsByProjectBody
 */
export interface PostProjectAnnouncementsByProjectBody {
    /**
     * プロジェクト告知タイトル
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'title': string;
    /**
     * プロジェクト告知タイプ 0: 不明（未設定） 1: キャンペーン 2: メンテナンス 3: 不具合 4: 全部 
     * @type {number}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'announcement_type': number;
    /**
     * プロジェクト告知本文
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'body': string;
    /**
     * プロジェクト告知有効な日付から
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'from_date': string;
    /**
     * プロジェクト告知有効な日付まで
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'until_date': string;
    /**
     * プロジェクト告知画像リンク
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'image': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'filetype': string;
    /**
     * プロジェクト告知外部遷移 URL
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'external_url'?: string;
    /**
     * プロジェクト告知重要フラグ
     * @type {boolean}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'important': boolean;
    /**
     * お知らせ詳細内の画像
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'body_image_path'?: string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'body_image_filetype'?: string;
    /**
     * プロジェクト告知の順番
     * @type {number}
     * @memberof PostProjectAnnouncementsByProjectBody
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface PostProjectBinaryfilesByProjectBody
 */
export interface PostProjectBinaryfilesByProjectBody {
    /**
     * バージョン
     * @type {string}
     * @memberof PostProjectBinaryfilesByProjectBody
     */
    'version': string;
    /**
     * OSSファイルURL
     * @type {string}
     * @memberof PostProjectBinaryfilesByProjectBody
     */
    'oss_file_url': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PostProjectBinaryfilesByProjectBody
     */
    'filetype': string;
}
/**
 * 
 * @export
 * @interface PostProjectServiceplanAppliesBody
 */
export interface PostProjectServiceplanAppliesBody {
    /**
     * プランID
     * @type {number}
     * @memberof PostProjectServiceplanAppliesBody
     */
    'plan_id': number;
    /**
     * プラン変更希望日時
     * @type {string}
     * @memberof PostProjectServiceplanAppliesBody
     */
    'plan_change_at'?: string;
}
/**
 * 
 * @export
 * @interface PostProjectsBody
 */
export interface PostProjectsBody {
    /**
     * プロジェクト名
     * @type {string}
     * @memberof PostProjectsBody
     */
    'name': string;
    /**
     * NewronApplicationId
     * @type {string}
     * @memberof PostProjectsBody
     */
    'newron_application_id': string;
    /**
     * GoogleCredentialJson
     * @type {string}
     * @memberof PostProjectsBody
     */
    'google_credential_json': string;
    /**
     * GoogleProjectId
     * @type {string}
     * @memberof PostProjectsBody
     */
    'google_project_id': string;
}
/**
 * 
 * @export
 * @interface PostPushMessageBody
 */
export interface PostPushMessageBody {
    /**
     * title
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'body': string;
    /**
     * icon
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'icon'?: string;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof PostPushMessageBody
     */
    'target_type': number;
    /**
     * target userprofile ids
     * @type {Array<string>}
     * @memberof PostPushMessageBody
     */
    'target_userprofile_ids'?: Array<string>;
    /**
     * 1: 即時配信 2: 日時指定配信 3: 定期配信（毎日） 4: 定期配信（曜日指定） 
     * @type {number}
     * @memberof PostPushMessageBody
     */
    'delivery_schedule_type': number;
    /**
     * 配信日時
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'delivery_at'?: string;
    /**
     * 配信曜日 1: 日曜日 2: 月曜日 3: 火曜日 4: 水曜日 5: 木曜日 6: 金曜日 7: 土曜日 12: 日曜日・月曜日 137: 日曜日・火曜日・土曜日 23456: 月曜日〜金曜日 
     * @type {number}
     * @memberof PostPushMessageBody
     */
    'delivery_day_of_week'?: number;
    /**
     * 配信時間
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'delivery_time'?: string;
    /**
     * 配信開始日時
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'delivery_begin_at'?: string;
    /**
     * 配信終了日時
     * @type {string}
     * @memberof PostPushMessageBody
     */
    'delivery_end_at'?: string;
    /**
     * 通知の有効期限（秒） 0: 即時通知成功分のみ有効 2419200: 通知を28日後（4週）まで待機可能 
     * @type {number}
     * @memberof PostPushMessageBody
     */
    'time_to_live': number;
}
/**
 * 
 * @export
 * @interface PostRanksBody
 */
export interface PostRanksBody {
    /**
     * ランク
     * @type {number}
     * @memberof PostRanksBody
     */
    'rank': number;
    /**
     * 必要経験値
     * @type {number}
     * @memberof PostRanksBody
     */
    'required_exp': number;
    /**
     * 位置情報投稿可能回数
     * @type {number}
     * @memberof PostRanksBody
     */
    'location_post_limit': number;
    /**
     * 最大スタミナ
     * @type {number}
     * @memberof PostRanksBody
     */
    'max_stamina': number;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PostRanksBody
     */
    'master_reward_id'?: string;
}
/**
 * 
 * @export
 * @interface PostRewarditemsBody
 */
export interface PostRewarditemsBody {
    /**
     * id of master_reward
     * @type {string}
     * @memberof PostRewarditemsBody
     */
    'master_reward_id': string;
    /**
     * リワード種類 1: アイテム 2: アバターボディパーツ 3: アバター衣装 4: コイン 5: ジェム 6: 経験値 7: 期限付きジェム 
     * @type {number}
     * @memberof PostRewarditemsBody
     */
    'item_type': number;
    /**
     * id of item
     * @type {string}
     * @memberof PostRewarditemsBody
     */
    'item_id'?: string;
    /**
     * アイテム個数
     * @type {number}
     * @memberof PostRewarditemsBody
     */
    'quantity': number;
    /**
     * item_type = 7 の場合のみ必須 1: 1日 2: 2日 
     * @type {string}
     * @memberof PostRewarditemsBody
     */
    'parameter'?: string;
}
/**
 * 
 * @export
 * @interface PostRewardsBody
 */
export interface PostRewardsBody {
    /**
     * リワードの説明
     * @type {string}
     * @memberof PostRewardsBody
     */
    'description': string;
    /**
     * リワードの画像パス
     * @type {string}
     * @memberof PostRewardsBody
     */
    'image_path': string;
}
/**
 * 
 * @export
 * @interface PostTenantNoticeBody
 */
export interface PostTenantNoticeBody {
    /**
     * 1: 全体通知 2: ID指定通知 
     * @type {number}
     * @memberof PostTenantNoticeBody
     */
    'notice_type': number;
    /**
     * notice_typeが2の場合、対象のテナントIDをカンマ区切りで指定する 
     * @type {string}
     * @memberof PostTenantNoticeBody
     */
    'notice_target'?: string;
    /**
     * お知らせタイトル 
     * @type {string}
     * @memberof PostTenantNoticeBody
     */
    'title': string;
    /**
     * お知らせ本文 
     * @type {string}
     * @memberof PostTenantNoticeBody
     */
    'body': string;
    /**
     * 公開日時 ※ 未来日時を指定すると、指定した日時に公開される 
     * @type {string}
     * @memberof PostTenantNoticeBody
     */
    'published_at': string;
    /**
     * 公開終了日時 ※ 未来日時を指定すると、指定した日時に公開終了する 
     * @type {string}
     * @memberof PostTenantNoticeBody
     */
    'expired_at': string;
}
/**
 * 
 * @export
 * @interface PostTenantsBody
 */
export interface PostTenantsBody {
    /**
     * 作成するテナントのテナント名
     * @type {string}
     * @memberof PostTenantsBody
     */
    'tenant_name': string;
}
/**
 * 
 * @export
 * @interface PostToggleDisableUserBody
 */
export interface PostToggleDisableUserBody {
    /**
     * ユーザー Id
     * @type {string}
     * @memberof PostToggleDisableUserBody
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface PostToggleDisableUserResponse
 */
export interface PostToggleDisableUserResponse {
    /**
     * 結果メッセージ
     * @type {string}
     * @memberof PostToggleDisableUserResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostTradeItemsBody
 */
export interface PostTradeItemsBody {
    /**
     * TradeID
     * @type {string}
     * @memberof PostTradeItemsBody
     */
    'master_trade_center_id': string;
    /**
     * トレード先ItemID（交換されて取得できる物）
     * @type {string}
     * @memberof PostTradeItemsBody
     */
    'return_item_id': string;
    /**
     * トレード先Item個数（交換されて取得できるアイテム個数）
     * @type {number}
     * @memberof PostTradeItemsBody
     */
    'return_item_quantity': number;
    /**
     * 換金種類 0: アイテムトレード（換金無し） 1: SoftCurrency 
     * @type {number}
     * @memberof PostTradeItemsBody
     */
    'return_cashing_type'?: number;
    /**
     * トレード元ItemID（交換時に消費される物）
     * @type {string}
     * @memberof PostTradeItemsBody
     */
    'offering_item_id': string;
    /**
     * トレード元Item個数（交換時に消費されアイテム個数）
     * @type {number}
     * @memberof PostTradeItemsBody
     */
    'offering_item_quantity': number;
}
/**
 * 
 * @export
 * @interface PostTradesBody
 */
export interface PostTradesBody {
    /**
     * トレード種類 1: アイテムトレード 2: 売却（換金） 
     * @type {number}
     * @memberof PostTradesBody
     */
    'trade_category': number;
    /**
     * トレードタイトル
     * @type {string}
     * @memberof PostTradesBody
     */
    'title': string;
    /**
     * NPCのID
     * @type {string}
     * @memberof PostTradesBody
     */
    'npc_id': string;
}
/**
 * 
 * @export
 * @interface PostUserprofileItemsBody
 */
export interface PostUserprofileItemsBody {
    /**
     * アイテムID
     * @type {string}
     * @memberof PostUserprofileItemsBody
     */
    'master_item_id': string;
    /**
     * 数量
     * @type {number}
     * @memberof PostUserprofileItemsBody
     */
    'quantity': number;
    /**
     * お気に入りフラグ
     * @type {boolean}
     * @memberof PostUserprofileItemsBody
     */
    'is_favorited': boolean;
    /**
     * 閲覧済みフラグ
     * @type {boolean}
     * @memberof PostUserprofileItemsBody
     */
    'seen': boolean;
    /**
     * 最新取得日時
     * @type {string}
     * @memberof PostUserprofileItemsBody
     */
    'latest_obtained_at': string;
    /**
     * NFTトークンID
     * @type {string}
     * @memberof PostUserprofileItemsBody
     */
    'contract_token_id': string;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * Project ID
     * @type {string}
     * @memberof Project
     */
    'id': string;
    /**
     * プロジェクト名
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * テナントID
     * @type {string}
     * @memberof Project
     */
    'tenant_id': string;
    /**
     * 公開ステータス
     * @type {string}
     * @memberof Project
     */
    'public_status': string;
    /**
     * 稼働ステータス
     * @type {string}
     * @memberof Project
     */
    'health_status': string;
    /**
     * ユーザー最近のアクション
     * @type {Array<Userrecentaction>}
     * @memberof Project
     */
    'userrecentactions': Array<Userrecentaction>;
    /**
     * ユーザー最近のアクション数
     * @type {number}
     * @memberof Project
     */
    'userrecentactions_count': number;
    /**
     * NewronApplicationId
     * @type {string}
     * @memberof Project
     */
    'newron_application_id': string;
    /**
     * GoogleCredentialJson
     * @type {string}
     * @memberof Project
     */
    'google_credential_json': string;
    /**
     * GoogleProjectId
     * @type {string}
     * @memberof Project
     */
    'google_project_id': string;
    /**
     * プランID
     * @type {number}
     * @memberof Project
     */
    'plan_id': number;
    /**
     * 
     * @type {Plan}
     * @memberof Project
     */
    'plan'?: Plan;
}
/**
 * 
 * @export
 * @interface ProjectAnnouncement
 */
export interface ProjectAnnouncement {
    /**
     * ProjectAnnouncement ID
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'project_id': string;
    /**
     * プロジェクト告知タイトル
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'title': string;
    /**
     * プロジェクト告知タイプ 0: 不明（未設定） 1: キャンペーン 2: メンテナンス 3: 不具合 4: 全部 
     * @type {number}
     * @memberof ProjectAnnouncement
     */
    'announcement_type': number;
    /**
     * プロジェクト告知本文
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'body': string;
    /**
     * プロジェクト告知有効な日付から
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'from_date'?: string;
    /**
     * プロジェクト告知有効な日付まで
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'until_date'?: string;
    /**
     * プロジェクト告知画像リンク
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'image': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'filetype': string;
    /**
     * プロジェクト告知外部遷移 URL
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'external_url'?: string;
    /**
     * プロジェクト告知重要フラグ
     * @type {boolean}
     * @memberof ProjectAnnouncement
     */
    'important': boolean;
    /**
     * お知らせ詳細内の画像
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'body_image_path'?: string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof ProjectAnnouncement
     */
    'body_image_filetype'?: string;
    /**
     * プロジェクト告知の順番
     * @type {number}
     * @memberof ProjectAnnouncement
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface ProjectAnnouncementResponse
 */
export interface ProjectAnnouncementResponse {
    /**
     * 
     * @type {ProjectAnnouncement}
     * @memberof ProjectAnnouncementResponse
     */
    'project_announcement': ProjectAnnouncement;
}
/**
 * 
 * @export
 * @interface ProjectAnnouncementsResponse
 */
export interface ProjectAnnouncementsResponse {
    /**
     * プロジェクト告知一覧
     * @type {Array<ProjectAnnouncement>}
     * @memberof ProjectAnnouncementsResponse
     */
    'project_announcements': Array<ProjectAnnouncement>;
}
/**
 * 
 * @export
 * @interface ProjectBinaryfile
 */
export interface ProjectBinaryfile {
    /**
     * プロジェクトバイナリファイルID
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'project_id': string;
    /**
     * バージョン
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'version': string;
    /**
     * OSSファイルURL
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'oss_file_url': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'filetype': string;
    /**
     * ファイルの存在有無
     * @type {boolean}
     * @memberof ProjectBinaryfile
     */
    'is_exist': boolean;
    /**
     * 作成日時
     * @type {string}
     * @memberof ProjectBinaryfile
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface ProjectBinaryfileResponse
 */
export interface ProjectBinaryfileResponse {
    /**
     * 
     * @type {ProjectBinaryfile}
     * @memberof ProjectBinaryfileResponse
     */
    'project_binaryfile': ProjectBinaryfile;
}
/**
 * 
 * @export
 * @interface ProjectBinaryfilesResponse
 */
export interface ProjectBinaryfilesResponse {
    /**
     * 
     * @type {Array<ProjectBinaryfile>}
     * @memberof ProjectBinaryfilesResponse
     */
    'project_binaryfiles': Array<ProjectBinaryfile>;
}
/**
 * 
 * @export
 * @interface ProjectResponse
 */
export interface ProjectResponse {
    /**
     * 
     * @type {Project}
     * @memberof ProjectResponse
     */
    'project': Project;
}
/**
 * 
 * @export
 * @interface ProjectServiceplanAppliesResponse
 */
export interface ProjectServiceplanAppliesResponse {
    /**
     * 
     * @type {Array<ProjectServiceplanApply>}
     * @memberof ProjectServiceplanAppliesResponse
     */
    'project_serviceplan_applies': Array<ProjectServiceplanApply>;
}
/**
 * 
 * @export
 * @interface ProjectServiceplanApply
 */
export interface ProjectServiceplanApply {
    /**
     * プロジェクトサービスプラン申請ID
     * @type {string}
     * @memberof ProjectServiceplanApply
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof ProjectServiceplanApply
     */
    'project_id': string;
    /**
     * プランID
     * @type {number}
     * @memberof ProjectServiceplanApply
     */
    'plan_id': number;
    /**
     * プラン変更希望日時
     * @type {string}
     * @memberof ProjectServiceplanApply
     */
    'plan_change_at': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof ProjectServiceplanApply
     */
    'created_at': string;
    /**
     * ステータス
     * @type {string}
     * @memberof ProjectServiceplanApply
     */
    'state': string;
    /**
     * 
     * @type {Project}
     * @memberof ProjectServiceplanApply
     */
    'project'?: Project;
}
/**
 * 
 * @export
 * @interface ProjectServiceplanApplyResponse
 */
export interface ProjectServiceplanApplyResponse {
    /**
     * 
     * @type {ProjectServiceplanApply}
     * @memberof ProjectServiceplanApplyResponse
     */
    'project_serviceplan_apply': ProjectServiceplanApply;
}
/**
 * 
 * @export
 * @interface ProjectsResponse
 */
export interface ProjectsResponse {
    /**
     * 
     * @type {Array<Project>}
     * @memberof ProjectsResponse
     */
    'projects': Array<Project>;
}
/**
 * 
 * @export
 * @interface PushMessage
 */
export interface PushMessage {
    /**
     * id
     * @type {string}
     * @memberof PushMessage
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof PushMessage
     */
    'project_id': string;
    /**
     * title
     * @type {string}
     * @memberof PushMessage
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PushMessage
     */
    'body': string;
    /**
     * icon
     * @type {string}
     * @memberof PushMessage
     */
    'icon'?: string;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof PushMessage
     */
    'target_type': number;
    /**
     * target userprofile ids
     * @type {Array<string>}
     * @memberof PushMessage
     */
    'target_userprofile_ids'?: Array<string>;
    /**
     * 1: 即時配信 2: 日時指定配信 3: 定期配信（毎日） 4: 定期配信（曜日指定） 
     * @type {number}
     * @memberof PushMessage
     */
    'delivery_schedule_type': number;
    /**
     * 配信日時
     * @type {string}
     * @memberof PushMessage
     */
    'delivery_at'?: string;
    /**
     * 配信曜日 1: 日曜日 2: 月曜日 3: 火曜日 4: 水曜日 5: 木曜日 6: 金曜日 7: 土曜日 12: 日曜日・月曜日 137: 日曜日・火曜日・土曜日 23456: 月曜日〜金曜日 
     * @type {number}
     * @memberof PushMessage
     */
    'delivery_day_of_week'?: number;
    /**
     * 配信時間
     * @type {string}
     * @memberof PushMessage
     */
    'delivery_time'?: string;
    /**
     * 配信開始日時
     * @type {string}
     * @memberof PushMessage
     */
    'delivery_begin_at'?: string;
    /**
     * 配信終了日時
     * @type {string}
     * @memberof PushMessage
     */
    'delivery_end_at'?: string;
    /**
     * 通知の有効期限（秒） 0: 即時通知成功分のみ有効 2419200: 通知を28日後（4週）まで待機可能 
     * @type {number}
     * @memberof PushMessage
     */
    'time_to_live': number;
    /**
     * fcm_message_id
     * @type {string}
     * @memberof PushMessage
     */
    'fcm_message_id': string;
}
/**
 * 
 * @export
 * @interface PushMessageResponse
 */
export interface PushMessageResponse {
    /**
     * 
     * @type {PushMessage}
     * @memberof PushMessageResponse
     */
    'push_message'?: PushMessage;
}
/**
 * 
 * @export
 * @interface PushMessagesResponse
 */
export interface PushMessagesResponse {
    /**
     * 
     * @type {Array<PushMessage>}
     * @memberof PushMessagesResponse
     */
    'push_messages'?: Array<PushMessage>;
}
/**
 * 
 * @export
 * @interface PutAccountApplyBody
 */
export interface PutAccountApplyBody {
    /**
     * アカウント名
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'tenant_name': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'email': string;
    /**
     * 会社名
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'company_name': string;
    /**
     * 会社番号
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'company_number': string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'postal_code': string;
    /**
     * 都道府県
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'province': string;
    /**
     * 市区町村
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'city': string;
    /**
     * 住所
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'address': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'phone_number': string;
    /**
     * 部署
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'department'?: string;
    /**
     * 担当者名
     * @type {string}
     * @memberof PutAccountApplyBody
     */
    'pic_name': string;
}
/**
 * 
 * @export
 * @interface PutAdminuserBody
 */
export interface PutAdminuserBody {
    /**
     * メールアドレス
     * @type {string}
     * @memberof PutAdminuserBody
     */
    'email': string;
    /**
     * 権限種別
     * @type {string}
     * @memberof PutAdminuserBody
     */
    'role': string;
    /**
     * 管理対象テナントID（カンマ区切り）
     * @type {string}
     * @memberof PutAdminuserBody
     */
    'tenant_ids'?: string;
}
/**
 * 
 * @export
 * @interface PutAppversionBody
 */
export interface PutAppversionBody {
    /**
     * Project ID
     * @type {string}
     * @memberof PutAppversionBody
     */
    'project_id': string;
    /**
     * version
     * @type {string}
     * @memberof PutAppversionBody
     */
    'version'?: string;
    /**
     * API URL
     * @type {string}
     * @memberof PutAppversionBody
     */
    'api_url'?: string;
    /**
     * 強制アップデートフラグ
     * @type {boolean}
     * @memberof PutAppversionBody
     */
    'force_update'?: boolean;
    /**
     * Photon Application Id
     * @type {string}
     * @memberof PutAppversionBody
     */
    'photon_application_id'?: string;
}
/**
 * 
 * @export
 * @interface PutBodypartBody
 */
export interface PutBodypartBody {
    /**
     * ボディパーツ名
     * @type {string}
     * @memberof PutBodypartBody
     */
    'name': string;
    /**
     * false: 男性用 true: 女性用 
     * @type {boolean}
     * @memberof PutBodypartBody
     */
    'is_f': boolean;
    /**
     * 1: FACE 2: BODY 3: HAIR 
     * @type {number}
     * @memberof PutBodypartBody
     */
    'bodypart_type': number;
    /**
     * アバターアイテムのサムネイル画像
     * @type {string}
     * @memberof PutBodypartBody
     */
    'avatar_item_thumbnail': string;
    /**
     * アイコン画像
     * @type {string}
     * @memberof PutBodypartBody
     */
    'icon_image': string;
    /**
     * SK
     * @type {string}
     * @memberof PutBodypartBody
     */
    'SK': string;
    /**
     * ABP
     * @type {string}
     * @memberof PutBodypartBody
     */
    'ABP': string;
    /**
     * IKRTG
     * @type {string}
     * @memberof PutBodypartBody
     */
    'IKRTG': string;
    /**
     * アクティベートアイテムID
     * @type {string}
     * @memberof PutBodypartBody
     */
    'activate_item_id'?: string;
}
/**
 * 
 * @export
 * @interface PutItemBody
 */
export interface PutItemBody {
    /**
     * アイテム種類 1: スキンアイテム 2: 回復アイテム 3: トロフィーアイテム 4: 回復以外消費アイテム 
     * @type {number}
     * @memberof PutItemBody
     */
    'category': number;
    /**
     * アイテム名
     * @type {string}
     * @memberof PutItemBody
     */
    'name': string;
    /**
     * アイテム説明
     * @type {string}
     * @memberof PutItemBody
     */
    'description': string;
    /**
     * アイテム画像パス
     * @type {string}
     * @memberof PutItemBody
     */
    'image_path': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PutItemBody
     */
    'filetype': string;
    /**
     * アイテムの種類 使用不可アイテム = 0 消費アイテム = 1 恒常アイテム = 2 
     * @type {number}
     * @memberof PutItemBody
     */
    'type': number;
    /**
     * NFTかどうか
     * @type {boolean}
     * @memberof PutItemBody
     */
    'is_nft': boolean;
    /**
     * 利用種別
     * @type {number}
     * @memberof PutItemBody
     */
    'use_type': number;
    /**
     * 利用パラメータ
     * @type {string}
     * @memberof PutItemBody
     */
    'use_parameter': string;
    /**
     * 有効期限開始日時
     * @type {string}
     * @memberof PutItemBody
     */
    'limit_start': string;
    /**
     * 有効期限終了日時
     * @type {string}
     * @memberof PutItemBody
     */
    'limit_end': string;
}
/**
 * 
 * @export
 * @interface PutItemLevelBody
 */
export interface PutItemLevelBody {
    /**
     * アイテムID
     * @type {string}
     * @memberof PutItemLevelBody
     */
    'master_item_id': string;
    /**
     * アイテム消費フラグ true: 消費する false: 消費しない 
     * @type {boolean}
     * @memberof PutItemLevelBody
     */
    'is_item_consumed': boolean;
    /**
     * パスアイテムフラグ true: パスアイテム false: パスアイテムではない 
     * @type {boolean}
     * @memberof PutItemLevelBody
     */
    'is_passitem': boolean;
    /**
     * アイテム数
     * @type {number}
     * @memberof PutItemLevelBody
     */
    'item_amount': number;
    /**
     * レベルID
     * @type {string}
     * @memberof PutItemLevelBody
     */
    'master_level_id': string;
}
/**
 * 
 * @export
 * @interface PutLevelBody
 */
export interface PutLevelBody {
    /**
     * Level ID
     * @type {string}
     * @memberof PutLevelBody
     */
    'id': string;
    /**
     * レベル名
     * @type {string}
     * @memberof PutLevelBody
     */
    'level': string;
    /**
     * ランドマーク名
     * @type {string}
     * @memberof PutLevelBody
     */
    'landmark_name': string;
    /**
     * レベルサムネイル
     * @type {string}
     * @memberof PutLevelBody
     */
    'level_thumbnail': string;
    /**
     * レベル遷移開始日時
     * @type {string}
     * @memberof PutLevelBody
     */
    'level_transition_begin_at': string;
    /**
     * レベル遷移終了日時
     * @type {string}
     * @memberof PutLevelBody
     */
    'level_transition_end_at': string;
}
/**
 * 
 * @export
 * @interface PutLoginBonusBody
 */
export interface PutLoginBonusBody {
    /**
     * アイコン種類ログインボーナスリワード種類 0: 不明 1: 通常（デイリー） 2: 歓迎 3: イベント（季節） 4: イベント（その他） 
     * @type {number}
     * @memberof PutLoginBonusBody
     */
    'loginbonus_type': number;
    /**
     * ログインボーナスのタイトル
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'title': string;
    /**
     * ログインボーナスの説明
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'description': string;
    /**
     * ログインボーナスの画像パス
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'image_path': string;
    /**
     * ログインボーナスの有効期限
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'expire_at'?: string;
    /**
     * ログインボーナスの繰り返し
     * @type {boolean}
     * @memberof PutLoginBonusBody
     */
    'repeat': boolean;
    /**
     * ログインボーナスの順番
     * @type {number}
     * @memberof PutLoginBonusBody
     */
    'order': number;
    /**
     * ログインボーナスの受け取り可能時間タイムゾーン
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'receive_time_tz': string;
    /**
     * ログインボーナスの受け取り可能時間
     * @type {string}
     * @memberof PutLoginBonusBody
     */
    'receive_time': string;
}
/**
 * 
 * @export
 * @interface PutLoginBonusRewardBody
 */
export interface PutLoginBonusRewardBody {
    /**
     * ログインボーナスの日数
     * @type {number}
     * @memberof PutLoginBonusRewardBody
     */
    'day_count': number;
    /**
     * id of master_loginbonus
     * @type {string}
     * @memberof PutLoginBonusRewardBody
     */
    'master_loginbonus_id': string;
    /**
     * id of master_reward
     * @type {string}
     * @memberof PutLoginBonusRewardBody
     */
    'master_reward_id': string;
}
/**
 * 
 * @export
 * @interface PutMailboxMessageBody
 */
export interface PutMailboxMessageBody {
    /**
     * title
     * @type {string}
     * @memberof PutMailboxMessageBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PutMailboxMessageBody
     */
    'body'?: string;
    /**
     * important
     * @type {boolean}
     * @memberof PutMailboxMessageBody
     */
    'important': boolean;
    /**
     * url
     * @type {string}
     * @memberof PutMailboxMessageBody
     */
    'url'?: string;
    /**
     * メール元 0: 不明 1: ミッション 2: ログインボーナス 3: フレンド 4: ランクアップ 5: サーバーギフト 6: NPC 7: ガイド 8: 動画 9: ユーザー登録 
     * @type {number}
     * @memberof PutMailboxMessageBody
     */
    'source': number;
    /**
     * メール元（差出人など） Id 
     * @type {string}
     * @memberof PutMailboxMessageBody
     */
    'source_id'?: string;
    /**
     * days_limit
     * @type {number}
     * @memberof PutMailboxMessageBody
     */
    'days_limit': number;
    /**
     * is_official
     * @type {boolean}
     * @memberof PutMailboxMessageBody
     */
    'is_official': boolean;
    /**
     * is_ambassador
     * @type {boolean}
     * @memberof PutMailboxMessageBody
     */
    'is_ambassador': boolean;
    /**
     * mailbox_items
     * @type {Array<MailboxItemBody>}
     * @memberof PutMailboxMessageBody
     */
    'mailbox_items'?: Array<MailboxItemBody>;
}
/**
 * 
 * @export
 * @interface PutMissionBody
 */
export interface PutMissionBody {
    /**
     * 1: MISSION_TYPE_DAILY 2: MISSION_TYPE_WEEKLY 3: MISSION_TYPE_BEGINNER 
     * @type {number}
     * @memberof PutMissionBody
     */
    'mission_type': number;
    /**
     * id of master_translations
     * @type {string}
     * @memberof PutMissionBody
     */
    'title_id': string;
    /**
     * id of master_translations
     * @type {string}
     * @memberof PutMissionBody
     */
    'description_id': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PutMissionBody
     */
    'master_reward_id': string;
    /**
     * Condition starting rank
     * @type {number}
     * @memberof PutMissionBody
     */
    'rank_start': number;
    /**
     * Condition ending rank
     * @type {number}
     * @memberof PutMissionBody
     */
    'rank_end': number;
    /**
     * Condition objective
     * @type {number}
     * @memberof PutMissionBody
     */
    'objective': number;
    /**
     * 1: アイテム使用 2: いいねを行う 3: コイン消費 4: デイリーミッション達成 5: ウィークリーミッション達成 
     * @type {number}
     * @memberof PutMissionBody
     */
    'objective_type': number;
    /**
     * false: 普通ミッション true: スペシャルミッション 
     * @type {boolean}
     * @memberof PutMissionBody
     */
    'is_special': boolean;
    /**
     * ミッション開始日時 ※ 未来日時を指定すると、指定した日時にミッションが開始される 
     * @type {string}
     * @memberof PutMissionBody
     */
    'start'?: string;
    /**
     * ミッション終了日時 ※ 未来日時を指定すると、指定した日時にミッションが終了される 
     * @type {string}
     * @memberof PutMissionBody
     */
    'end'?: string;
    /**
     * ミッション目標のパラメータ ※ 例えば、アイテム使用の場合はアイテムIDを指定する 
     * @type {string}
     * @memberof PutMissionBody
     */
    'objective_parameter'?: string;
}
/**
 * 
 * @export
 * @interface PutNpcActionsBody
 */
export interface PutNpcActionsBody {
    /**
     * Data Table Name
     * @type {string}
     * @memberof PutNpcActionsBody
     */
    'dt_name': string;
    /**
     * Data Table Detail
     * @type {any}
     * @memberof PutNpcActionsBody
     */
    'json_data': any;
    /**
     * 期間開始
     * @type {string}
     * @memberof PutNpcActionsBody
     */
    'from_date': string;
}
/**
 * 
 * @export
 * @interface PutOfficialMailBody
 */
export interface PutOfficialMailBody {
    /**
     * title
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'body': string;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'master_reward_id'?: string;
    /**
     * url
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'url'?: string;
    /**
     * start_rank
     * @type {number}
     * @memberof PutOfficialMailBody
     */
    'start_rank': number;
    /**
     * end_rank
     * @type {number}
     * @memberof PutOfficialMailBody
     */
    'end_rank': number;
    /**
     * login_count
     * @type {number}
     * @memberof PutOfficialMailBody
     */
    'login_count': number;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof PutOfficialMailBody
     */
    'target_type': number;
    /**
     * 開始日時
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'start_period_at': string;
    /**
     * 終了日時
     * @type {string}
     * @memberof PutOfficialMailBody
     */
    'end_period_at': string;
    /**
     * 受け取れる期間
     * @type {number}
     * @memberof PutOfficialMailBody
     */
    'days_limit': number;
    /**
     * false: 配信不可 true: 配信可 
     * @type {boolean}
     * @memberof PutOfficialMailBody
     */
    'is_distribute': boolean;
    /**
     * true: 重要タブ設定 
     * @type {boolean}
     * @memberof PutOfficialMailBody
     */
    'is_important': boolean;
}
/**
 * 
 * @export
 * @interface PutOfficialMailTargetBody
 */
export interface PutOfficialMailTargetBody {
    /**
     * id of userprofile
     * @type {string}
     * @memberof PutOfficialMailTargetBody
     */
    'userprofile_id': string;
}
/**
 * 
 * @export
 * @interface PutProjectAnnouncementBody
 */
export interface PutProjectAnnouncementBody {
    /**
     * プロジェクト告知タイトル
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'title': string;
    /**
     * プロジェクト告知タイプ 0: 不明（未設定） 1: キャンペーン 2: メンテナンス 3: 不具合 4: 全部 
     * @type {number}
     * @memberof PutProjectAnnouncementBody
     */
    'announcement_type': number;
    /**
     * プロジェクト告知本文
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'body': string;
    /**
     * プロジェクト告知有効な日付から
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'from_date': string;
    /**
     * プロジェクト告知有効な日付まで
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'until_date': string;
    /**
     * プロジェクト告知画像リンク
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'image': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'filetype': string;
    /**
     * プロジェクト告知外部遷移 URL
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'external_url'?: string;
    /**
     * プロジェクト告知重要フラグ
     * @type {boolean}
     * @memberof PutProjectAnnouncementBody
     */
    'important': boolean;
    /**
     * お知らせ詳細内の画像
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'body_image_path'?: string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PutProjectAnnouncementBody
     */
    'body_image_filetype'?: string;
    /**
     * プロジェクト告知の順番
     * @type {number}
     * @memberof PutProjectAnnouncementBody
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface PutProjectBinaryfileBody
 */
export interface PutProjectBinaryfileBody {
    /**
     * バージョン
     * @type {string}
     * @memberof PutProjectBinaryfileBody
     */
    'version': string;
    /**
     * OSSファイルURL
     * @type {string}
     * @memberof PutProjectBinaryfileBody
     */
    'oss_file_url': string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof PutProjectBinaryfileBody
     */
    'filetype': string;
}
/**
 * 
 * @export
 * @interface PutProjectBody
 */
export interface PutProjectBody {
    /**
     * プロジェクト名
     * @type {string}
     * @memberof PutProjectBody
     */
    'name': string;
    /**
     * NewronApplicationId
     * @type {string}
     * @memberof PutProjectBody
     */
    'newron_application_id': string;
    /**
     * GoogleCredentialJson
     * @type {string}
     * @memberof PutProjectBody
     */
    'google_credential_json': string;
    /**
     * GoogleProjectId
     * @type {string}
     * @memberof PutProjectBody
     */
    'google_project_id': string;
}
/**
 * 
 * @export
 * @interface PutProjectMaintenanceStartBody
 */
export interface PutProjectMaintenanceStartBody {
    /**
     * メンテナンス開始日時
     * @type {string}
     * @memberof PutProjectMaintenanceStartBody
     */
    'maintenance_start': string;
    /**
     * メンテナンスURL
     * @type {string}
     * @memberof PutProjectMaintenanceStartBody
     */
    'url'?: string;
    /**
     * メンテナンスタイトル
     * @type {string}
     * @memberof PutProjectMaintenanceStartBody
     */
    'title'?: string;
    /**
     * メンテナンス内容
     * @type {string}
     * @memberof PutProjectMaintenanceStartBody
     */
    'body'?: string;
}
/**
 * 
 * @export
 * @interface PutProjectServiceplanApplyBody
 */
export interface PutProjectServiceplanApplyBody {
    /**
     * プランID
     * @type {number}
     * @memberof PutProjectServiceplanApplyBody
     */
    'plan_id': number;
    /**
     * プラン変更希望日時
     * @type {string}
     * @memberof PutProjectServiceplanApplyBody
     */
    'plan_change_at'?: string;
}
/**
 * 
 * @export
 * @interface PutProjectServiceplanBody
 */
export interface PutProjectServiceplanBody {
    /**
     * プランID
     * @type {number}
     * @memberof PutProjectServiceplanBody
     */
    'plan_id': number;
}
/**
 * 
 * @export
 * @interface PutPushMessageBody
 */
export interface PutPushMessageBody {
    /**
     * title
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'title': string;
    /**
     * body
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'body': string;
    /**
     * icon
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'icon'?: string;
    /**
     * 1: 全ユーザー対象 2: ID指定対象 
     * @type {number}
     * @memberof PutPushMessageBody
     */
    'target_type': number;
    /**
     * target userprofile ids
     * @type {Array<string>}
     * @memberof PutPushMessageBody
     */
    'target_userprofile_ids'?: Array<string>;
    /**
     * 1: 即時配信 2: 日時指定配信 3: 定期配信（毎日） 4: 定期配信（曜日指定） 
     * @type {number}
     * @memberof PutPushMessageBody
     */
    'delivery_schedule_type': number;
    /**
     * 配信日時
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'delivery_at'?: string;
    /**
     * 配信曜日 1: 日曜日 2: 月曜日 3: 火曜日 4: 水曜日 5: 木曜日 6: 金曜日 7: 土曜日 12: 日曜日・月曜日 137: 日曜日・火曜日・土曜日 23456: 月曜日〜金曜日 
     * @type {number}
     * @memberof PutPushMessageBody
     */
    'delivery_day_of_week'?: number;
    /**
     * 配信時間
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'delivery_time'?: string;
    /**
     * 配信開始日時
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'delivery_begin_at'?: string;
    /**
     * 配信終了日時
     * @type {string}
     * @memberof PutPushMessageBody
     */
    'delivery_end_at'?: string;
    /**
     * 通知の有効期限（秒） 0: 即時通知成功分のみ有効 2419200: 通知を28日後（4週）まで待機可能 
     * @type {number}
     * @memberof PutPushMessageBody
     */
    'time_to_live': number;
}
/**
 * 
 * @export
 * @interface PutRankBody
 */
export interface PutRankBody {
    /**
     * ランク
     * @type {number}
     * @memberof PutRankBody
     */
    'rank': number;
    /**
     * 必要経験値
     * @type {number}
     * @memberof PutRankBody
     */
    'required_exp': number;
    /**
     * 位置情報投稿可能回数
     * @type {number}
     * @memberof PutRankBody
     */
    'location_post_limit': number;
    /**
     * 最大スタミナ
     * @type {number}
     * @memberof PutRankBody
     */
    'max_stamina': number;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof PutRankBody
     */
    'master_reward_id'?: string;
}
/**
 * 
 * @export
 * @interface PutRewardBody
 */
export interface PutRewardBody {
    /**
     * リワードの説明
     * @type {string}
     * @memberof PutRewardBody
     */
    'description': string;
    /**
     * リワードの画像パス
     * @type {string}
     * @memberof PutRewardBody
     */
    'image_path': string;
}
/**
 * 
 * @export
 * @interface PutRewarditemBody
 */
export interface PutRewarditemBody {
    /**
     * id of master_reward
     * @type {string}
     * @memberof PutRewarditemBody
     */
    'master_reward_id': string;
    /**
     * リワード種類 1: アイテム 2: アバターボディパーツ 3: アバター衣装 4: コイン 5: ジェム 6: 経験値 7: 期限付きジェム 
     * @type {number}
     * @memberof PutRewarditemBody
     */
    'item_type': number;
    /**
     * id of item
     * @type {string}
     * @memberof PutRewarditemBody
     */
    'item_id'?: string;
    /**
     * アイテム個数
     * @type {number}
     * @memberof PutRewarditemBody
     */
    'quantity': number;
    /**
     * item_type = 7 の場合のみ必須 1: 1日 2: 2日 
     * @type {string}
     * @memberof PutRewarditemBody
     */
    'parameter'?: string;
}
/**
 * 
 * @export
 * @interface PutTenantBody
 */
export interface PutTenantBody {
    /**
     * 作成するテナントのテナント名
     * @type {string}
     * @memberof PutTenantBody
     */
    'tenant_name': string;
}
/**
 * 
 * @export
 * @interface PutTenantNoticeBody
 */
export interface PutTenantNoticeBody {
    /**
     * 1: 全体通知 2: ID指定通知 
     * @type {number}
     * @memberof PutTenantNoticeBody
     */
    'notice_type': number;
    /**
     * notice_typeが2の場合、対象のテナントIDをカンマ区切りで指定する 
     * @type {string}
     * @memberof PutTenantNoticeBody
     */
    'notice_target'?: string;
    /**
     * お知らせタイトル 
     * @type {string}
     * @memberof PutTenantNoticeBody
     */
    'title': string;
    /**
     * お知らせ本文 
     * @type {string}
     * @memberof PutTenantNoticeBody
     */
    'body': string;
    /**
     * 公開日時 ※ 未来日時を指定すると、指定した日時に公開される 
     * @type {string}
     * @memberof PutTenantNoticeBody
     */
    'published_at': string;
    /**
     * 公開終了日時 ※ 未来日時を指定すると、指定した日時に公開終了する 
     * @type {string}
     * @memberof PutTenantNoticeBody
     */
    'expired_at': string;
}
/**
 * 
 * @export
 * @interface PutTradeBody
 */
export interface PutTradeBody {
    /**
     * トレード種類 1: アイテムトレード 2: 売却（換金） 
     * @type {number}
     * @memberof PutTradeBody
     */
    'trade_category': number;
    /**
     * トレードタイトル
     * @type {string}
     * @memberof PutTradeBody
     */
    'title': string;
    /**
     * NPCのID
     * @type {string}
     * @memberof PutTradeBody
     */
    'npc_id': string;
}
/**
 * 
 * @export
 * @interface PutTradeItemBody
 */
export interface PutTradeItemBody {
    /**
     * TradeID
     * @type {string}
     * @memberof PutTradeItemBody
     */
    'master_trade_center_id': string;
    /**
     * トレード先ItemID（交換されて取得できる物）
     * @type {string}
     * @memberof PutTradeItemBody
     */
    'return_item_id': string;
    /**
     * トレード先Item個数（交換されて取得できるアイテム個数）
     * @type {number}
     * @memberof PutTradeItemBody
     */
    'return_item_quantity': number;
    /**
     * 換金種類 0: アイテムトレード（換金無し） 1: SoftCurrency 
     * @type {number}
     * @memberof PutTradeItemBody
     */
    'return_cashing_type'?: number;
    /**
     * トレード元ItemID（交換時に消費される物）
     * @type {string}
     * @memberof PutTradeItemBody
     */
    'offering_item_id': string;
    /**
     * トレード元Item個数（交換時に消費されアイテム個数）
     * @type {number}
     * @memberof PutTradeItemBody
     */
    'offering_item_quantity': number;
}
/**
 * 
 * @export
 * @interface PutUserprofileBody
 */
export interface PutUserprofileBody {
    /**
     * プロジェクトID
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'project_id': string;
    /**
     * 自己紹介
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'introduction'?: string;
    /**
     * チュートリアル進捗
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'tutorial_progress'?: string;
    /**
     * 名前
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'name': string;
    /**
     * 性別   ※1 = 男性   2 = 女性   0= 設定なし 
     * @type {number}
     * @memberof PutUserprofileBody
     */
    'gender': number;
    /**
     * 地域コード
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'region_code': string;
    /**
     * 言語コード
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'language_code': string;
    /**
     * アンバサダーかどうか
     * @type {boolean}
     * @memberof PutUserprofileBody
     */
    'is_ambasaddor': boolean;
    /**
     * 公式アカウントかどうか
     * @type {boolean}
     * @memberof PutUserprofileBody
     */
    'is_official': boolean;
    /**
     * ロール
     * @type {string}
     * @memberof PutUserprofileBody
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface PutUserprofileItemBody
 */
export interface PutUserprofileItemBody {
    /**
     * アイテムID
     * @type {string}
     * @memberof PutUserprofileItemBody
     */
    'master_item_id': string;
    /**
     * 数量
     * @type {number}
     * @memberof PutUserprofileItemBody
     */
    'quantity': number;
    /**
     * お気に入りフラグ
     * @type {boolean}
     * @memberof PutUserprofileItemBody
     */
    'is_favorited': boolean;
    /**
     * 閲覧済みフラグ
     * @type {boolean}
     * @memberof PutUserprofileItemBody
     */
    'seen': boolean;
    /**
     * 最新取得日時
     * @type {string}
     * @memberof PutUserprofileItemBody
     */
    'latest_obtained_at': string;
    /**
     * NFTトークンID
     * @type {string}
     * @memberof PutUserprofileItemBody
     */
    'contract_token_id': string;
}
/**
 * 
 * @export
 * @interface Rank
 */
export interface Rank {
    /**
     * Rank ID
     * @type {string}
     * @memberof Rank
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Rank
     */
    'project_id': string;
    /**
     * ランク
     * @type {number}
     * @memberof Rank
     */
    'rank': number;
    /**
     * 必要経験値
     * @type {number}
     * @memberof Rank
     */
    'required_exp': number;
    /**
     * 位置情報投稿可能回数
     * @type {number}
     * @memberof Rank
     */
    'location_post_limit': number;
    /**
     * 最大スタミナ
     * @type {number}
     * @memberof Rank
     */
    'max_stamina': number;
    /**
     * id of master_rewards
     * @type {string}
     * @memberof Rank
     */
    'master_reward_id': string;
}
/**
 * 
 * @export
 * @interface RankResponse
 */
export interface RankResponse {
    /**
     * 
     * @type {Rank}
     * @memberof RankResponse
     */
    'rank': Rank;
}
/**
 * 
 * @export
 * @interface RanksResponse
 */
export interface RanksResponse {
    /**
     * 
     * @type {Array<Rank>}
     * @memberof RanksResponse
     */
    'ranks': Array<Rank>;
}
/**
 * 
 * @export
 * @interface ReportDau
 */
export interface ReportDau {
    /**
     * 日付
     * @type {string}
     * @memberof ReportDau
     */
    'date': string;
    /**
     * DAU
     * @type {number}
     * @memberof ReportDau
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface ReportDauProject
 */
export interface ReportDauProject {
    /**
     * Project ID
     * @type {string}
     * @memberof ReportDauProject
     */
    'id': string;
    /**
     * プロジェクト名
     * @type {string}
     * @memberof ReportDauProject
     */
    'name': string;
    /**
     * 
     * @type {Array<ReportDau>}
     * @memberof ReportDauProject
     */
    'report_dau': Array<ReportDau>;
}
/**
 * 
 * @export
 * @interface ReportDauProjectResponse
 */
export interface ReportDauProjectResponse {
    /**
     * 
     * @type {ReportDauProject}
     * @memberof ReportDauProjectResponse
     */
    'report_dau_project': ReportDauProject;
}
/**
 * 
 * @export
 * @interface ReportDauResponse
 */
export interface ReportDauResponse {
    /**
     * 日別DAU
     * @type {Array<ReportDau>}
     * @memberof ReportDauResponse
     */
    'report_dau': Array<ReportDau>;
}
/**
 * 
 * @export
 * @interface ReportDauTenant
 */
export interface ReportDauTenant {
    /**
     * 
     * @type {Tenant}
     * @memberof ReportDauTenant
     */
    'tenant': Tenant;
    /**
     * 
     * @type {Array<ReportDau>}
     * @memberof ReportDauTenant
     */
    'report_dau': Array<ReportDau>;
    /**
     * 
     * @type {Array<ReportDauProject>}
     * @memberof ReportDauTenant
     */
    'report_dau_project': Array<ReportDauProject>;
}
/**
 * 
 * @export
 * @interface ReportDauTenantResponse
 */
export interface ReportDauTenantResponse {
    /**
     * 
     * @type {ReportDauTenant}
     * @memberof ReportDauTenantResponse
     */
    'report_dau_tenant': ReportDauTenant;
}
/**
 * 
 * @export
 * @interface Reward
 */
export interface Reward {
    /**
     * id
     * @type {string}
     * @memberof Reward
     */
    'id': string;
    /**
     * id of project
     * @type {string}
     * @memberof Reward
     */
    'project_id': string;
    /**
     * リワードの説明
     * @type {string}
     * @memberof Reward
     */
    'description': string;
    /**
     * リワードの画像パス
     * @type {string}
     * @memberof Reward
     */
    'image_path': string;
    /**
     * 
     * @type {Array<RewardItem>}
     * @memberof Reward
     */
    'reward_items': Array<RewardItem>;
}
/**
 * 
 * @export
 * @interface RewardItem
 */
export interface RewardItem {
    /**
     * id
     * @type {string}
     * @memberof RewardItem
     */
    'id': string;
    /**
     * id of master_reward
     * @type {string}
     * @memberof RewardItem
     */
    'master_reward_id': string;
    /**
     * リワード種類 1: アイテム 2: アバターボディパーツ 3: アバター衣装 4: コイン 5: ジェム 6: 経験値 7: 期限付きジェム 
     * @type {number}
     * @memberof RewardItem
     */
    'item_type': number;
    /**
     * id of item
     * @type {string}
     * @memberof RewardItem
     */
    'item_id': string;
    /**
     * アイテム個数
     * @type {number}
     * @memberof RewardItem
     */
    'quantity': number;
    /**
     * item_type = 7 の場合のみ必須 1: 1日 2: 2日 
     * @type {string}
     * @memberof RewardItem
     */
    'parameter': string;
}
/**
 * 
 * @export
 * @interface RewardResponse
 */
export interface RewardResponse {
    /**
     * 
     * @type {Reward}
     * @memberof RewardResponse
     */
    'reward': Reward;
}
/**
 * 
 * @export
 * @interface RewarditemResponse
 */
export interface RewarditemResponse {
    /**
     * 
     * @type {RewardItem}
     * @memberof RewarditemResponse
     */
    'reward_item': RewardItem;
}
/**
 * 
 * @export
 * @interface RewardsResponse
 */
export interface RewardsResponse {
    /**
     * 
     * @type {Array<Reward>}
     * @memberof RewardsResponse
     */
    'rewards': Array<Reward>;
}
/**
 * 
 * @export
 * @interface Signage
 */
export interface Signage {
    /**
     * 管理用ID
     * @type {string}
     * @memberof Signage
     */
    'id': string;
    /**
     * プロジェクト ID
     * @type {string}
     * @memberof Signage
     */
    'project_id': string;
    /**
     * クライアントで設定するサイネージ ID
     * @type {string}
     * @memberof Signage
     */
    'client_signage_id': string;
    /**
     * レベル ID
     * @type {string}
     * @memberof Signage
     */
    'level': string;
    /**
     * 備考
     * @type {string}
     * @memberof Signage
     */
    'note'?: string;
    /**
     * 詳細設定リスト
     * @type {Array<SignageSetting>}
     * @memberof Signage
     */
    'settings': Array<SignageSetting>;
}
/**
 * 
 * @export
 * @interface SignageRequestBody
 */
export interface SignageRequestBody {
    /**
     * クライアント側で指定しているID
     * @type {string}
     * @memberof SignageRequestBody
     */
    'client_signage_id'?: string;
    /**
     * レベル名
     * @type {string}
     * @memberof SignageRequestBody
     */
    'level': string;
    /**
     * 備考
     * @type {string}
     * @memberof SignageRequestBody
     */
    'note'?: string;
}
/**
 * 
 * @export
 * @interface SignageSetting
 */
export interface SignageSetting {
    /**
     * 詳細設定 ID
     * @type {string}
     * @memberof SignageSetting
     */
    'id': string;
    /**
     * サイネージ ID
     * @type {string}
     * @memberof SignageSetting
     */
    'signage_id': string;
    /**
     * メディアリソースパス
     * @type {string}
     * @memberof SignageSetting
     */
    'image_path'?: string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof SignageSetting
     */
    'filetype'?: string;
    /**
     * サイネージ表示開始日時
     * @type {string}
     * @memberof SignageSetting
     */
    'start': string;
    /**
     * サイネージ表示終了日時
     * @type {string}
     * @memberof SignageSetting
     */
    'end'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof SignageSetting
     */
    'note'?: string;
}
/**
 * 
 * @export
 * @interface SignageSettingRequestBody
 */
export interface SignageSettingRequestBody {
    /**
     * サイネージリソースパス
     * @type {string}
     * @memberof SignageSettingRequestBody
     */
    'image_path'?: string;
    /**
     * ファイルタイプ
     * @type {string}
     * @memberof SignageSettingRequestBody
     */
    'filetype'?: string;
    /**
     * サイネージ表示開始日時
     * @type {string}
     * @memberof SignageSettingRequestBody
     */
    'start': string;
    /**
     * サイネージ表示終了日時
     * @type {string}
     * @memberof SignageSettingRequestBody
     */
    'end'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof SignageSettingRequestBody
     */
    'note'?: string;
}
/**
 * 
 * @export
 * @interface SignageSettingUpdateResponse
 */
export interface SignageSettingUpdateResponse {
    /**
     * 
     * @type {SignageSetting}
     * @memberof SignageSettingUpdateResponse
     */
    'setting': SignageSetting;
}
/**
 * 
 * @export
 * @interface SignageUpdateResponse
 */
export interface SignageUpdateResponse {
    /**
     * 
     * @type {Signage}
     * @memberof SignageUpdateResponse
     */
    'signage': Signage;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * Tenant ID
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     * テナント固有キー
     * @type {string}
     * @memberof Tenant
     */
    'tenant_uniquekey': string;
    /**
     * テナント名
     * @type {string}
     * @memberof Tenant
     */
    'tenant_name': string;
}
/**
 * 
 * @export
 * @interface TenantNotice
 */
export interface TenantNotice {
    /**
     * id
     * @type {string}
     * @memberof TenantNotice
     */
    'id': string;
    /**
     * 1: 全体通知 2: ID指定通知 
     * @type {number}
     * @memberof TenantNotice
     */
    'notice_type': number;
    /**
     * notice_typeが2の場合、対象のテナントIDをカンマ区切り 
     * @type {string}
     * @memberof TenantNotice
     */
    'notice_target': string;
    /**
     * お知らせタイトル 
     * @type {string}
     * @memberof TenantNotice
     */
    'title': string;
    /**
     * お知らせ本文 
     * @type {string}
     * @memberof TenantNotice
     */
    'body': string;
    /**
     * 公開日時 ※ 未来日時を指定すると、指定した日時に公開される 
     * @type {string}
     * @memberof TenantNotice
     */
    'published_at': string;
    /**
     * 公開終了日時 ※ 未来日時を指定すると、指定した日時に公開終了する 
     * @type {string}
     * @memberof TenantNotice
     */
    'expired_at': string;
}
/**
 * 
 * @export
 * @interface TenantNoticeResponse
 */
export interface TenantNoticeResponse {
    /**
     * 
     * @type {TenantNotice}
     * @memberof TenantNoticeResponse
     */
    'tenant_notice': TenantNotice;
}
/**
 * 
 * @export
 * @interface TenantNoticesResponse
 */
export interface TenantNoticesResponse {
    /**
     * 
     * @type {Array<TenantNotice>}
     * @memberof TenantNoticesResponse
     */
    'tenant_notices': Array<TenantNotice>;
}
/**
 * 
 * @export
 * @interface TenantResponse
 */
export interface TenantResponse {
    /**
     * 
     * @type {Tenant}
     * @memberof TenantResponse
     */
    'tenant': Tenant;
}
/**
 * 
 * @export
 * @interface TenantsResponse
 */
export interface TenantsResponse {
    /**
     * 
     * @type {Array<Tenant>}
     * @memberof TenantsResponse
     */
    'tenants': Array<Tenant>;
}
/**
 * 
 * @export
 * @interface Trade
 */
export interface Trade {
    /**
     * Item ID
     * @type {string}
     * @memberof Trade
     */
    'id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Trade
     */
    'project_id': string;
    /**
     * トレード種類 1: アイテムトレード 2: 売却（換金） 
     * @type {number}
     * @memberof Trade
     */
    'trade_category': number;
    /**
     * トレードタイトル名
     * @type {string}
     * @memberof Trade
     */
    'title': string;
    /**
     * 利用NPC_ID
     * @type {string}
     * @memberof Trade
     */
    'npc_id': string;
}
/**
 * 
 * @export
 * @interface TradeItem
 */
export interface TradeItem {
    /**
     * TradeItem ID
     * @type {string}
     * @memberof TradeItem
     */
    'id': string;
    /**
     * TradeID
     * @type {string}
     * @memberof TradeItem
     */
    'master_trade_center_id': string;
    /**
     * トレード先ItemID（交換されて取得できる物）
     * @type {string}
     * @memberof TradeItem
     */
    'return_item_id': string;
    /**
     * トレード先Item個数（交換されて取得できるアイテム個数）
     * @type {number}
     * @memberof TradeItem
     */
    'return_item_quantity': number;
    /**
     * 換金種類 0: アイテムトレード（換金無し） 1: SoftCurrency 
     * @type {number}
     * @memberof TradeItem
     */
    'return_cashing_type'?: number;
    /**
     * トレード元ItemID（交換時に消費される物）
     * @type {string}
     * @memberof TradeItem
     */
    'offering_item_id': string;
    /**
     * トレード元Item個数（交換時に消費されアイテム個数）
     * @type {number}
     * @memberof TradeItem
     */
    'offering_item_quantity': number;
}
/**
 * 
 * @export
 * @interface TradeItemResponse
 */
export interface TradeItemResponse {
    /**
     * 
     * @type {TradeItem}
     * @memberof TradeItemResponse
     */
    'item': TradeItem;
}
/**
 * 
 * @export
 * @interface TradeItemsResponse
 */
export interface TradeItemsResponse {
    /**
     * 
     * @type {Array<TradeItem>}
     * @memberof TradeItemsResponse
     */
    'items': Array<TradeItem>;
}
/**
 * 
 * @export
 * @interface TradeResponse
 */
export interface TradeResponse {
    /**
     * 
     * @type {Trade}
     * @memberof TradeResponse
     */
    'item': Trade;
}
/**
 * 
 * @export
 * @interface TradesResponse
 */
export interface TradesResponse {
    /**
     * 
     * @type {Array<Trade>}
     * @memberof TradesResponse
     */
    'items': Array<Trade>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * ユーザコード
     * @type {string}
     * @memberof User
     */
    'code': string;
    /**
     * ユーザデバイス
     * @type {Array<Userdevice>}
     * @memberof User
     */
    'userdevices': Array<Userdevice>;
    /**
     * ユーザプロフィール
     * @type {Array<Userprofile>}
     * @memberof User
     */
    'userprofiles': Array<Userprofile>;
    /**
     * 
     * @type {Usertoken}
     * @memberof User
     */
    'usertoken': Usertoken;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {User}
     * @memberof UserResponse
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface Useravatar
 */
export interface Useravatar {
    /**
     * Useravatar ID
     * @type {string}
     * @memberof Useravatar
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof Useravatar
     */
    'userprofile_id': string;
    /**
     * ボディID
     * @type {string}
     * @memberof Useravatar
     */
    'bodies_id': string;
    /**
     * アバターアイコンパス
     * @type {string}
     * @memberof Useravatar
     */
    'avatar_icon_path': string;
    /**
     * 更新後アイコンパス
     * @type {string}
     * @memberof Useravatar
     */
    'uploaded_icon_path': string;
}
/**
 * 
 * @export
 * @interface Userdevice
 */
export interface Userdevice {
    /**
     * Userdevice ID
     * @type {string}
     * @memberof Userdevice
     */
    'id': string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Userdevice
     */
    'user_id': string;
    /**
     * トークン
     * @type {string}
     * @memberof Userdevice
     */
    'token': string;
    /**
     * Firebaseトークン
     * @type {string}
     * @memberof Userdevice
     */
    'firebase_token': string;
    /**
     * クライアントGUID
     * @type {string}
     * @memberof Userdevice
     */
    'client_guid': string;
    /**
     * AppsFlyer ID
     * @type {string}
     * @memberof Userdevice
     */
    'appsflyer_id': string;
}
/**
 * 
 * @export
 * @interface Userlevel
 */
export interface Userlevel {
    /**
     * Userlevel ID
     * @type {string}
     * @memberof Userlevel
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof Userlevel
     */
    'userprofile_id': string;
    /**
     * 現在のレベルID
     * @type {string}
     * @memberof Userlevel
     */
    'current_level_id'?: string;
}
/**
 * 
 * @export
 * @interface Userlocationpost
 */
export interface Userlocationpost {
    /**
     * Userlocationpost ID
     * @type {string}
     * @memberof Userlocationpost
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof Userlocationpost
     */
    'userprofile_id': string;
}
/**
 * 
 * @export
 * @interface Userprofile
 */
export interface Userprofile {
    /**
     * Userprofile ID
     * @type {string}
     * @memberof Userprofile
     */
    'id': string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Userprofile
     */
    'user_id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Userprofile
     */
    'project_id': string;
    /**
     * 自己紹介
     * @type {string}
     * @memberof Userprofile
     */
    'introduction'?: string;
    /**
     * チュートリアル進捗
     * @type {string}
     * @memberof Userprofile
     */
    'tutorial_progress'?: string;
    /**
     * 名前
     * @type {string}
     * @memberof Userprofile
     */
    'name': string;
    /**
     * 性別   ※1 = 男性   2 = 女性   0= 設定なし 
     * @type {number}
     * @memberof Userprofile
     */
    'gender': number;
    /**
     * 地域コード
     * @type {string}
     * @memberof Userprofile
     */
    'region_code': string;
    /**
     * 言語コード
     * @type {string}
     * @memberof Userprofile
     */
    'language_code': string;
    /**
     * アンバサダーかどうか
     * @type {boolean}
     * @memberof Userprofile
     */
    'is_ambasaddor': boolean;
    /**
     * 公式アカウントかどうか
     * @type {boolean}
     * @memberof Userprofile
     */
    'is_official': boolean;
    /**
     * ロール
     * @type {string}
     * @memberof Userprofile
     */
    'role': string;
    /**
     * 
     * @type {Userlevel}
     * @memberof Userprofile
     */
    'userlevel': Userlevel;
    /**
     * 
     * @type {Useravatar}
     * @memberof Userprofile
     */
    'useravatar': Useravatar;
    /**
     * 
     * @type {Userrank}
     * @memberof Userprofile
     */
    'userrank': Userrank;
    /**
     * 
     * @type {Userlocationpost}
     * @memberof Userprofile
     */
    'userlocationpost': Userlocationpost;
    /**
     * ユーザアイテム
     * @type {Array<UserprofileItem>}
     * @memberof Userprofile
     */
    'userprofile_items': Array<UserprofileItem>;
    /**
     * ユーザアイテム取得履歴
     * @type {Array<UserprofileItemHistory>}
     * @memberof Userprofile
     */
    'userprofile_item_histories': Array<UserprofileItemHistory>;
}
/**
 * 
 * @export
 * @interface UserprofileItem
 */
export interface UserprofileItem {
    /**
     * UserprofileItem ID
     * @type {string}
     * @memberof UserprofileItem
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof UserprofileItem
     */
    'userprofile_id': string;
    /**
     * アイテムID
     * @type {string}
     * @memberof UserprofileItem
     */
    'master_item_id': string;
    /**
     * 数量
     * @type {number}
     * @memberof UserprofileItem
     */
    'quantity': number;
    /**
     * お気に入りフラグ
     * @type {boolean}
     * @memberof UserprofileItem
     */
    'is_favorited': boolean;
    /**
     * 閲覧済みフラグ
     * @type {boolean}
     * @memberof UserprofileItem
     */
    'seen': boolean;
    /**
     * 最新取得日時
     * @type {string}
     * @memberof UserprofileItem
     */
    'latest_obtained_at': string;
    /**
     * NFTトークンID
     * @type {string}
     * @memberof UserprofileItem
     */
    'contract_token_id': string;
    /**
     * 
     * @type {Item}
     * @memberof UserprofileItem
     */
    'item'?: Item;
}
/**
 * 
 * @export
 * @interface UserprofileItemHistory
 */
export interface UserprofileItemHistory {
    /**
     * UserprofileItemHistory ID
     * @type {string}
     * @memberof UserprofileItemHistory
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof UserprofileItemHistory
     */
    'userprofile_id': string;
    /**
     * アイテムID
     * @type {string}
     * @memberof UserprofileItemHistory
     */
    'master_item_id': string;
    /**
     * アイテム種別
     * @type {string}
     * @memberof UserprofileItemHistory
     */
    'type': string;
    /**
     * アイテム数
     * @type {number}
     * @memberof UserprofileItemHistory
     */
    'amount': number;
    /**
     * 
     * @type {Item}
     * @memberof UserprofileItemHistory
     */
    'item'?: Item;
}
/**
 * 
 * @export
 * @interface UserprofileItemResponse
 */
export interface UserprofileItemResponse {
    /**
     * 
     * @type {UserprofileItem}
     * @memberof UserprofileItemResponse
     */
    'userprofile_item': UserprofileItem;
}
/**
 * 
 * @export
 * @interface UserprofileItemsResponse
 */
export interface UserprofileItemsResponse {
    /**
     * 
     * @type {Array<UserprofileItem>}
     * @memberof UserprofileItemsResponse
     */
    'userprofile_items': Array<UserprofileItem>;
}
/**
 * 
 * @export
 * @interface UserprofileResponse
 */
export interface UserprofileResponse {
    /**
     * 
     * @type {Userprofile}
     * @memberof UserprofileResponse
     */
    'userprofile': Userprofile;
}
/**
 * 
 * @export
 * @interface Userrank
 */
export interface Userrank {
    /**
     * Userrank ID
     * @type {string}
     * @memberof Userrank
     */
    'id': string;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof Userrank
     */
    'userprofile_id': string;
    /**
     * 現在のランクID
     * @type {string}
     * @memberof Userrank
     */
    'current_rank_id'?: string;
    /**
     * 累計経験値
     * @type {number}
     * @memberof Userrank
     */
    'total_exp': number;
}
/**
 * 
 * @export
 * @interface Userrecentaction
 */
export interface Userrecentaction {
    /**
     * ユーザー最近のアクションID
     * @type {number}
     * @memberof Userrecentaction
     */
    'id': number;
    /**
     * ユーザープロフィールID
     * @type {string}
     * @memberof Userrecentaction
     */
    'userprofile_id': string;
    /**
     * プロジェクトID
     * @type {string}
     * @memberof Userrecentaction
     */
    'project_id': string;
    /**
     * エンドポイント
     * @type {string}
     * @memberof Userrecentaction
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof UsersResponse
     */
    'users': Array<User>;
}
/**
 * 
 * @export
 * @interface Usertoken
 */
export interface Usertoken {
    /**
     * Userdevice ID
     * @type {string}
     * @memberof Usertoken
     */
    'id': string;
    /**
     * ユーザID
     * @type {string}
     * @memberof Usertoken
     */
    'user_id': string;
    /**
     * Firebaseトークン
     * @type {string}
     * @memberof Usertoken
     */
    'firebase_notification_token': string;
}
/**
 * 
 * @export
 * @interface Wallet
 */
export interface Wallet {
    /**
     * ユーザーの所持ゲーム内通貨
     * @type {number}
     * @memberof Wallet
     */
    'coins': number;
    /**
     * 無料で付与されたユーザーの所持無償通貨
     * @type {number}
     * @memberof Wallet
     */
    'free_gems': number;
    /**
     * 有料で付与されたユーザーの所持有償通貨
     * @type {number}
     * @memberof Wallet
     */
    'paid_gems': number;
    /**
     * 期限付きで、付与されたユーザーの所持無償通貨
     * @type {number}
     * @memberof Wallet
     */
    'limited_free_gems': number;
}

/**
 * AccountAppliesApi - axios parameter creator
 * @export
 */
export const AccountAppliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アカウント申請の削除を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountApply: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAccountApply', 'id', id)
            const localVarPath = `/admin/v1/account/applies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApplies: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/account/applies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の取得を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApply: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountApply', 'id', id)
            const localVarPath = `/admin/v1/account/applies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の作成を要求する。 
         * @param {PostAccountAppliesBody} [postAccountAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplies: async (postAccountAppliesBody?: PostAccountAppliesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/account/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAccountAppliesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の承認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplyApproved: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postAccountApplyApproved', 'id', id)
            const localVarPath = `/admin/v1/account/applies/{id}/approved`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の否認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplyUnapproved: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postAccountApplyUnapproved', 'id', id)
            const localVarPath = `/admin/v1/account/applies/{id}/unapproved`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウント申請の更新を要求する。 
         * @param {string} id id of AccountApply
         * @param {PutAccountApplyBody} [putAccountApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountApply: async (id: string, putAccountApplyBody?: PutAccountApplyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAccountApply', 'id', id)
            const localVarPath = `/admin/v1/account/applies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAccountApplyBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountAppliesApi - functional programming interface
 * @export
 */
export const AccountAppliesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountAppliesApiAxiosParamCreator(configuration)
    return {
        /**
         * アカウント申請の削除を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountApply(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountApply(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountApplies(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAppliesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountApplies(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の取得を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountApply(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountApply(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の作成を要求する。 
         * @param {PostAccountAppliesBody} [postAccountAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountApplies(postAccountAppliesBody?: PostAccountAppliesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountApplies(postAccountAppliesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の承認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountApplyApproved(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountApplyApproved(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の否認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountApplyUnapproved(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountApplyUnapproved(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウント申請の更新を要求する。 
         * @param {string} id id of AccountApply
         * @param {PutAccountApplyBody} [putAccountApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccountApply(id: string, putAccountApplyBody?: PutAccountApplyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAccountApply(id, putAccountApplyBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountAppliesApi - factory interface
 * @export
 */
export const AccountAppliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountAppliesApiFp(configuration)
    return {
        /**
         * アカウント申請の削除を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountApply(id: string, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.deleteAccountApply(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApplies(page?: number, perPage?: number, options?: any): AxiosPromise<AccountAppliesResponse> {
            return localVarFp.getAccountApplies(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の取得を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountApply(id: string, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.getAccountApply(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の作成を要求する。 
         * @param {PostAccountAppliesBody} [postAccountAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplies(postAccountAppliesBody?: PostAccountAppliesBody, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.postAccountApplies(postAccountAppliesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の承認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplyApproved(id: string, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.postAccountApplyApproved(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の否認を要求する。 
         * @param {string} id id of AccountApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountApplyUnapproved(id: string, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.postAccountApplyUnapproved(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウント申請の更新を要求する。 
         * @param {string} id id of AccountApply
         * @param {PutAccountApplyBody} [putAccountApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountApply(id: string, putAccountApplyBody?: PutAccountApplyBody, options?: any): AxiosPromise<AccountApplyResponse> {
            return localVarFp.putAccountApply(id, putAccountApplyBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountAppliesApi - object-oriented interface
 * @export
 * @class AccountAppliesApi
 * @extends {BaseAPI}
 */
export class AccountAppliesApi extends BaseAPI {
    /**
     * アカウント申請の削除を要求する。 
     * @param {string} id id of AccountApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public deleteAccountApply(id: string, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).deleteAccountApply(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public getAccountApplies(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).getAccountApplies(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の取得を要求する。 
     * @param {string} id id of AccountApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public getAccountApply(id: string, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).getAccountApply(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の作成を要求する。 
     * @param {PostAccountAppliesBody} [postAccountAppliesBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public postAccountApplies(postAccountAppliesBody?: PostAccountAppliesBody, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).postAccountApplies(postAccountAppliesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の承認を要求する。 
     * @param {string} id id of AccountApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public postAccountApplyApproved(id: string, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).postAccountApplyApproved(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の否認を要求する。 
     * @param {string} id id of AccountApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public postAccountApplyUnapproved(id: string, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).postAccountApplyUnapproved(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウント申請の更新を要求する。 
     * @param {string} id id of AccountApply
     * @param {PutAccountApplyBody} [putAccountApplyBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAppliesApi
     */
    public putAccountApply(id: string, putAccountApplyBody?: PutAccountApplyBody, options?: AxiosRequestConfig) {
        return AccountAppliesApiFp(this.configuration).putAccountApply(id, putAccountApplyBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminUsersApi - axios parameter creator
 * @export
 */
export const AdminUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理画面ログインアカウントの論理削除を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminuser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAdminuser', 'id', id)
            const localVarPath = `/admin/v1/adminusers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理画面ログインアカウントの取得を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminuser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdminuser', 'id', id)
            const localVarPath = `/admin/v1/adminusers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログインしたAccessTokenをもとに、管理画面ログインアカウントの取得を要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminuserBySelf: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/adminusers/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理画面ログインアカウントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminusers: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/adminusers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tenantに紐づく管理画面ログインアカウントの一覧取得を要求する。 
         * @param {string} tenantId id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminusersByTenant: async (tenantId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getAdminusersByTenant', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/adminusers`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * TenantAdmin権限の管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersOnlyTenantAdminBody} [postAdminusersOnlyTenantAdminBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminuserOnlyTenantAdmin: async (postAdminusersOnlyTenantAdminBody?: PostAdminusersOnlyTenantAdminBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/adminusers/only-tenantadmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAdminusersOnlyTenantAdminBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersBody} [postAdminusersBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminusers: async (postAdminusersBody?: PostAdminusersBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/adminusers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAdminusersBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tenantに紐づけ済みAdminuserのIsOwnerをTrueにする。 
         * @param {string} tenantId id of tenant
         * @param {PostAdminusertenantAttachOwnerBody} [postAdminusertenantAttachOwnerBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminusertenantAttachOwner: async (tenantId: string, postAdminusertenantAttachOwnerBody?: PostAdminusertenantAttachOwnerBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('postAdminusertenantAttachOwner', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/adminusertenant-attach-owner`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAdminusertenantAttachOwnerBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理画面ログインアカウントの更新を要求する。 
         * @param {string} id id of adminuser
         * @param {PutAdminuserBody} [putAdminuserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdminuser: async (id: string, putAdminuserBody?: PutAdminuserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAdminuser', 'id', id)
            const localVarPath = `/admin/v1/adminusers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAdminuserBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUsersApi - functional programming interface
 * @export
 */
export const AdminUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 管理画面ログインアカウントの論理削除を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdminuser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminuser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理画面ログインアカウントの取得を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminuser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminuser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログインしたAccessTokenをもとに、管理画面ログインアカウントの取得を要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminuserBySelf(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminuserBySelf(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理画面ログインアカウントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminusers(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminusers(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tenantに紐づく管理画面ログインアカウントの一覧取得を要求する。 
         * @param {string} tenantId id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminusersByTenant(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminusersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminusersByTenant(tenantId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * TenantAdmin権限の管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersOnlyTenantAdminBody} [postAdminusersOnlyTenantAdminBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody?: PostAdminusersOnlyTenantAdminBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserOnlyTenantAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersBody} [postAdminusersBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAdminusers(postAdminusersBody?: PostAdminusersBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdminusers(postAdminusersBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tenantに紐づけ済みAdminuserのIsOwnerをTrueにする。 
         * @param {string} tenantId id of tenant
         * @param {PostAdminusertenantAttachOwnerBody} [postAdminusertenantAttachOwnerBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAdminusertenantAttachOwner(tenantId: string, postAdminusertenantAttachOwnerBody?: PostAdminusertenantAttachOwnerBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdminusertenantAttachOwner(tenantId, postAdminusertenantAttachOwnerBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理画面ログインアカウントの更新を要求する。 
         * @param {string} id id of adminuser
         * @param {PutAdminuserBody} [putAdminuserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAdminuser(id: string, putAdminuserBody?: PutAdminuserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminuserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAdminuser(id, putAdminuserBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUsersApi - factory interface
 * @export
 */
export const AdminUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUsersApiFp(configuration)
    return {
        /**
         * 管理画面ログインアカウントの論理削除を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdminuser(id: string, options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.deleteAdminuser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理画面ログインアカウントの取得を要求する。 
         * @param {string} id id of adminuser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminuser(id: string, options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.getAdminuser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ログインしたAccessTokenをもとに、管理画面ログインアカウントの取得を要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminuserBySelf(options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.getAdminuserBySelf(options).then((request) => request(axios, basePath));
        },
        /**
         * 管理画面ログインアカウントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminusers(page?: number, perPage?: number, options?: any): AxiosPromise<AdminusersResponse> {
            return localVarFp.getAdminusers(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Tenantに紐づく管理画面ログインアカウントの一覧取得を要求する。 
         * @param {string} tenantId id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminusersByTenant(tenantId: string, page?: number, perPage?: number, options?: any): AxiosPromise<AdminusersResponse> {
            return localVarFp.getAdminusersByTenant(tenantId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * TenantAdmin権限の管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersOnlyTenantAdminBody} [postAdminusersOnlyTenantAdminBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody?: PostAdminusersOnlyTenantAdminBody, options?: any): AxiosPromise<AdminuserOnlyTenantAdminResponse> {
            return localVarFp.postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理画面ログインアカウントの作成を要求する。 
         * @param {PostAdminusersBody} [postAdminusersBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminusers(postAdminusersBody?: PostAdminusersBody, options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.postAdminusers(postAdminusersBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Tenantに紐づけ済みAdminuserのIsOwnerをTrueにする。 
         * @param {string} tenantId id of tenant
         * @param {PostAdminusertenantAttachOwnerBody} [postAdminusertenantAttachOwnerBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdminusertenantAttachOwner(tenantId: string, postAdminusertenantAttachOwnerBody?: PostAdminusertenantAttachOwnerBody, options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.postAdminusertenantAttachOwner(tenantId, postAdminusertenantAttachOwnerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理画面ログインアカウントの更新を要求する。 
         * @param {string} id id of adminuser
         * @param {PutAdminuserBody} [putAdminuserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdminuser(id: string, putAdminuserBody?: PutAdminuserBody, options?: any): AxiosPromise<AdminuserResponse> {
            return localVarFp.putAdminuser(id, putAdminuserBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminUsersApi - object-oriented interface
 * @export
 * @class AdminUsersApi
 * @extends {BaseAPI}
 */
export class AdminUsersApi extends BaseAPI {
    /**
     * 管理画面ログインアカウントの論理削除を要求する。 
     * @param {string} id id of adminuser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public deleteAdminuser(id: string, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).deleteAdminuser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理画面ログインアカウントの取得を要求する。 
     * @param {string} id id of adminuser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public getAdminuser(id: string, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).getAdminuser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログインしたAccessTokenをもとに、管理画面ログインアカウントの取得を要求する。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public getAdminuserBySelf(options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).getAdminuserBySelf(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理画面ログインアカウントの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public getAdminusers(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).getAdminusers(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tenantに紐づく管理画面ログインアカウントの一覧取得を要求する。 
     * @param {string} tenantId id of tenant
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public getAdminusersByTenant(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).getAdminusersByTenant(tenantId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * TenantAdmin権限の管理画面ログインアカウントの作成を要求する。 
     * @param {PostAdminusersOnlyTenantAdminBody} [postAdminusersOnlyTenantAdminBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody?: PostAdminusersOnlyTenantAdminBody, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).postAdminuserOnlyTenantAdmin(postAdminusersOnlyTenantAdminBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理画面ログインアカウントの作成を要求する。 
     * @param {PostAdminusersBody} [postAdminusersBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public postAdminusers(postAdminusersBody?: PostAdminusersBody, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).postAdminusers(postAdminusersBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tenantに紐づけ済みAdminuserのIsOwnerをTrueにする。 
     * @param {string} tenantId id of tenant
     * @param {PostAdminusertenantAttachOwnerBody} [postAdminusertenantAttachOwnerBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public postAdminusertenantAttachOwner(tenantId: string, postAdminusertenantAttachOwnerBody?: PostAdminusertenantAttachOwnerBody, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).postAdminusertenantAttachOwner(tenantId, postAdminusertenantAttachOwnerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理画面ログインアカウントの更新を要求する。 
     * @param {string} id id of adminuser
     * @param {PutAdminuserBody} [putAdminuserBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUsersApi
     */
    public putAdminuser(id: string, putAdminuserBody?: PutAdminuserBody, options?: AxiosRequestConfig) {
        return AdminUsersApiFp(this.configuration).putAdminuser(id, putAdminuserBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AnnouncementsApi - axios parameter creator
 * @export
 */
export const AnnouncementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとのログイン告知を削除する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnouncement: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAnnouncement', 'id', id)
            const localVarPath = `/admin/v1/announcements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログイン告知を取得する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnnouncement', 'id', id)
            const localVarPath = `/admin/v1/announcements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン告知すべての一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncements: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/announcements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログイン告知一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncementsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAnnouncementsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/announcements/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログイン告知を作成する。 
         * @param {string} projectId project_id of project
         * @param {PostProjectAnnouncementsByProjectBody} postProjectAnnouncementsByProjectBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnnouncementsByProject: async (projectId: string, postProjectAnnouncementsByProjectBody: PostProjectAnnouncementsByProjectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postAnnouncementsByProject', 'projectId', projectId)
            // verify required parameter 'postProjectAnnouncementsByProjectBody' is not null or undefined
            assertParamExists('postAnnouncementsByProject', 'postProjectAnnouncementsByProjectBody', postProjectAnnouncementsByProjectBody)
            const localVarPath = `/admin/v1/announcements/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectAnnouncementsByProjectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログイン告知を更新する。 
         * @param {string} id id of announcement
         * @param {PutProjectAnnouncementBody} putProjectAnnouncementBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAnnouncement: async (id: string, putProjectAnnouncementBody: PutProjectAnnouncementBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAnnouncement', 'id', id)
            // verify required parameter 'putProjectAnnouncementBody' is not null or undefined
            assertParamExists('putAnnouncement', 'putProjectAnnouncementBody', putProjectAnnouncementBody)
            const localVarPath = `/admin/v1/announcements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectAnnouncementBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnouncementsApi - functional programming interface
 * @export
 */
export const AnnouncementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnouncementsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとのログイン告知を削除する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnnouncement(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnouncement(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログイン告知を取得する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncement(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnouncement(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン告知すべての一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncements(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnouncements(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログイン告知一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncementsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnouncementsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログイン告知を作成する。 
         * @param {string} projectId project_id of project
         * @param {PostProjectAnnouncementsByProjectBody} postProjectAnnouncementsByProjectBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAnnouncementsByProject(projectId: string, postProjectAnnouncementsByProjectBody: PostProjectAnnouncementsByProjectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAnnouncementsByProject(projectId, postProjectAnnouncementsByProjectBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログイン告知を更新する。 
         * @param {string} id id of announcement
         * @param {PutProjectAnnouncementBody} putProjectAnnouncementBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAnnouncement(id: string, putProjectAnnouncementBody: PutProjectAnnouncementBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectAnnouncementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAnnouncement(id, putProjectAnnouncementBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnouncementsApi - factory interface
 * @export
 */
export const AnnouncementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnouncementsApiFp(configuration)
    return {
        /**
         * プロジェクトごとのログイン告知を削除する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnouncement(id: string, options?: any): AxiosPromise<ProjectAnnouncementResponse> {
            return localVarFp.deleteAnnouncement(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログイン告知を取得する。 
         * @param {string} id id of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement(id: string, options?: any): AxiosPromise<ProjectAnnouncementResponse> {
            return localVarFp.getAnnouncement(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン告知すべての一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncements(page?: number, perPage?: number, options?: any): AxiosPromise<ProjectAnnouncementsResponse> {
            return localVarFp.getAnnouncements(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログイン告知一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncementsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectAnnouncementsResponse> {
            return localVarFp.getAnnouncementsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログイン告知を作成する。 
         * @param {string} projectId project_id of project
         * @param {PostProjectAnnouncementsByProjectBody} postProjectAnnouncementsByProjectBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnnouncementsByProject(projectId: string, postProjectAnnouncementsByProjectBody: PostProjectAnnouncementsByProjectBody, options?: any): AxiosPromise<ProjectAnnouncementResponse> {
            return localVarFp.postAnnouncementsByProject(projectId, postProjectAnnouncementsByProjectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログイン告知を更新する。 
         * @param {string} id id of announcement
         * @param {PutProjectAnnouncementBody} putProjectAnnouncementBody プロジェクトごとのログイン告知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAnnouncement(id: string, putProjectAnnouncementBody: PutProjectAnnouncementBody, options?: any): AxiosPromise<ProjectAnnouncementResponse> {
            return localVarFp.putAnnouncement(id, putProjectAnnouncementBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnouncementsApi - object-oriented interface
 * @export
 * @class AnnouncementsApi
 * @extends {BaseAPI}
 */
export class AnnouncementsApi extends BaseAPI {
    /**
     * プロジェクトごとのログイン告知を削除する。 
     * @param {string} id id of announcement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public deleteAnnouncement(id: string, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).deleteAnnouncement(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログイン告知を取得する。 
     * @param {string} id id of announcement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public getAnnouncement(id: string, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).getAnnouncement(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン告知すべての一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public getAnnouncements(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).getAnnouncements(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログイン告知一覧取得を要求する。 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public getAnnouncementsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).getAnnouncementsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログイン告知を作成する。 
     * @param {string} projectId project_id of project
     * @param {PostProjectAnnouncementsByProjectBody} postProjectAnnouncementsByProjectBody プロジェクトごとのログイン告知
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public postAnnouncementsByProject(projectId: string, postProjectAnnouncementsByProjectBody: PostProjectAnnouncementsByProjectBody, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).postAnnouncementsByProject(projectId, postProjectAnnouncementsByProjectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログイン告知を更新する。 
     * @param {string} id id of announcement
     * @param {PutProjectAnnouncementBody} putProjectAnnouncementBody プロジェクトごとのログイン告知
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementsApi
     */
    public putAnnouncement(id: string, putProjectAnnouncementBody: PutProjectAnnouncementBody, options?: AxiosRequestConfig) {
        return AnnouncementsApiFp(this.configuration).putAnnouncement(id, putProjectAnnouncementBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppversionApi - axios parameter creator
 * @export
 */
export const AppversionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Appversionの論理削除を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppversion: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppversion', 'id', id)
            const localVarPath = `/admin/v1/appversions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appversionの詳細取得を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppversion: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAppversion', 'id', id)
            const localVarPath = `/admin/v1/appversions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appversionの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppversions: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAppversions', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/appversions`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appversionの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostAppversionsBody} [postAppversionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppversions: async (projectId: string, postAppversionsBody?: PostAppversionsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postAppversions', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/appversions`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAppversionsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appversionの更新を要求する。 
         * @param {string} id id of appversion
         * @param {PutAppversionBody} [putAppversionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAppversion: async (id: string, putAppversionBody?: PutAppversionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAppversion', 'id', id)
            const localVarPath = `/admin/v1/appversions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putAppversionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppversionApi - functional programming interface
 * @export
 */
export const AppversionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppversionApiAxiosParamCreator(configuration)
    return {
        /**
         * Appversionの論理削除を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppversion(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppversionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppversion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Appversionの詳細取得を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppversion(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppversionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppversion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Appversionの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppversions(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppversionsByProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppversions(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Appversionの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostAppversionsBody} [postAppversionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAppversions(projectId: string, postAppversionsBody?: PostAppversionsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppversionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAppversions(projectId, postAppversionsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Appversionの更新を要求する。 
         * @param {string} id id of appversion
         * @param {PutAppversionBody} [putAppversionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAppversion(id: string, putAppversionBody?: PutAppversionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppversionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAppversion(id, putAppversionBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppversionApi - factory interface
 * @export
 */
export const AppversionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppversionApiFp(configuration)
    return {
        /**
         * Appversionの論理削除を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppversion(id: string, options?: any): AxiosPromise<AppversionResponse> {
            return localVarFp.deleteAppversion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Appversionの詳細取得を要求する。 
         * @param {string} id id of appversion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppversion(id: string, options?: any): AxiosPromise<AppversionResponse> {
            return localVarFp.getAppversion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Appversionの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppversions(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<AppversionsByProjectResponse> {
            return localVarFp.getAppversions(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Appversionの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostAppversionsBody} [postAppversionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppversions(projectId: string, postAppversionsBody?: PostAppversionsBody, options?: any): AxiosPromise<AppversionResponse> {
            return localVarFp.postAppversions(projectId, postAppversionsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Appversionの更新を要求する。 
         * @param {string} id id of appversion
         * @param {PutAppversionBody} [putAppversionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAppversion(id: string, putAppversionBody?: PutAppversionBody, options?: any): AxiosPromise<AppversionResponse> {
            return localVarFp.putAppversion(id, putAppversionBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppversionApi - object-oriented interface
 * @export
 * @class AppversionApi
 * @extends {BaseAPI}
 */
export class AppversionApi extends BaseAPI {
    /**
     * Appversionの論理削除を要求する。 
     * @param {string} id id of appversion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppversionApi
     */
    public deleteAppversion(id: string, options?: AxiosRequestConfig) {
        return AppversionApiFp(this.configuration).deleteAppversion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Appversionの詳細取得を要求する。 
     * @param {string} id id of appversion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppversionApi
     */
    public getAppversion(id: string, options?: AxiosRequestConfig) {
        return AppversionApiFp(this.configuration).getAppversion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Appversionの一覧取得を要求する。 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppversionApi
     */
    public getAppversions(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return AppversionApiFp(this.configuration).getAppversions(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Appversionの作成を要求する。 
     * @param {string} projectId project_id of project
     * @param {PostAppversionsBody} [postAppversionsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppversionApi
     */
    public postAppversions(projectId: string, postAppversionsBody?: PostAppversionsBody, options?: AxiosRequestConfig) {
        return AppversionApiFp(this.configuration).postAppversions(projectId, postAppversionsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Appversionの更新を要求する。 
     * @param {string} id id of appversion
     * @param {PutAppversionBody} [putAppversionBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppversionApi
     */
    public putAppversion(id: string, putAppversionBody?: PutAppversionBody, options?: AxiosRequestConfig) {
        return AppversionApiFp(this.configuration).putAppversion(id, putAppversionBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 認証用トークンとワンタイムパスワードを指定して、アクセストークンを要求する。 
         * @param {PostAuthBody} [postAuthBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuth: async (postAuthBody?: PostAuthBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールアドレスを指定してワンタイムパスワードメールを要求する。 
         * @param {PostAuthRequestBody} [postAuthRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRequest: async (postAuthRequestBody?: PostAuthRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/auth/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 認証用トークンとワンタイムパスワードを指定して、アクセストークンを要求する。 
         * @param {PostAuthBody} [postAuthBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuth(postAuthBody?: PostAuthBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuth(postAuthBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールアドレスを指定してワンタイムパスワードメールを要求する。 
         * @param {PostAuthRequestBody} [postAuthRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRequest(postAuthRequestBody?: PostAuthRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAuthRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRequest(postAuthRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 認証用トークンとワンタイムパスワードを指定して、アクセストークンを要求する。 
         * @param {PostAuthBody} [postAuthBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuth(postAuthBody?: PostAuthBody, options?: any): AxiosPromise<PostAuthResponse> {
            return localVarFp.postAuth(postAuthBody, options).then((request) => request(axios, basePath));
        },
        /**
         * メールアドレスを指定してワンタイムパスワードメールを要求する。 
         * @param {PostAuthRequestBody} [postAuthRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRequest(postAuthRequestBody?: PostAuthRequestBody, options?: any): AxiosPromise<PostAuthRequestResponse> {
            return localVarFp.postAuthRequest(postAuthRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 認証用トークンとワンタイムパスワードを指定して、アクセストークンを要求する。 
     * @param {PostAuthBody} [postAuthBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuth(postAuthBody?: PostAuthBody, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuth(postAuthBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールアドレスを指定してワンタイムパスワードメールを要求する。 
     * @param {PostAuthRequestBody} [postAuthRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthRequest(postAuthRequestBody?: PostAuthRequestBody, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthRequest(postAuthRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BodypartsApi - axios parameter creator
 * @export
 */
export const BodypartsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとのボディパーツを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBodypart: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteBodypart', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBodypart', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/bodyparts/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのボディパーツを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodypart: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getBodypart', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBodypart', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/bodyparts/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのボディパーツ一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodypartsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getBodypartsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/bodyparts`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのボディパーツを作成する 
         * @param {string} projectId project_id of project
         * @param {PostBodypartBody} postBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBodyparts: async (projectId: string, postBodypartBody: PostBodypartBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postBodyparts', 'projectId', projectId)
            // verify required parameter 'postBodypartBody' is not null or undefined
            assertParamExists('postBodyparts', 'postBodypartBody', postBodypartBody)
            const localVarPath = `/admin/v1/project/{project_id}/bodyparts`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBodypartBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのボディパーツを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {PutBodypartBody} putBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBodypart: async (projectId: string, id: string, putBodypartBody: PutBodypartBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putBodypart', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBodypart', 'id', id)
            // verify required parameter 'putBodypartBody' is not null or undefined
            assertParamExists('putBodypart', 'putBodypartBody', putBodypartBody)
            const localVarPath = `/admin/v1/project/{project_id}/bodyparts/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBodypartBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BodypartsApi - functional programming interface
 * @export
 */
export const BodypartsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BodypartsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとのボディパーツを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBodypart(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodypartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBodypart(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのボディパーツを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBodypart(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodypartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBodypart(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのボディパーツ一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBodypartsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodypartsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBodypartsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのボディパーツを作成する 
         * @param {string} projectId project_id of project
         * @param {PostBodypartBody} postBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBodyparts(projectId: string, postBodypartBody: PostBodypartBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodypartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBodyparts(projectId, postBodypartBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのボディパーツを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {PutBodypartBody} putBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBodypart(projectId: string, id: string, putBodypartBody: PutBodypartBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodypartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBodypart(projectId, id, putBodypartBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BodypartsApi - factory interface
 * @export
 */
export const BodypartsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BodypartsApiFp(configuration)
    return {
        /**
         * プロジェクトごとのボディパーツを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBodypart(projectId: string, id: string, options?: any): AxiosPromise<BodypartResponse> {
            return localVarFp.deleteBodypart(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのボディパーツを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodypart(projectId: string, id: string, options?: any): AxiosPromise<BodypartResponse> {
            return localVarFp.getBodypart(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのボディパーツ一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodypartsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<BodypartsResponse> {
            return localVarFp.getBodypartsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのボディパーツを作成する 
         * @param {string} projectId project_id of project
         * @param {PostBodypartBody} postBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBodyparts(projectId: string, postBodypartBody: PostBodypartBody, options?: any): AxiosPromise<BodypartResponse> {
            return localVarFp.postBodyparts(projectId, postBodypartBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのボディパーツを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of bodypart
         * @param {PutBodypartBody} putBodypartBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBodypart(projectId: string, id: string, putBodypartBody: PutBodypartBody, options?: any): AxiosPromise<BodypartResponse> {
            return localVarFp.putBodypart(projectId, id, putBodypartBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BodypartsApi - object-oriented interface
 * @export
 * @class BodypartsApi
 * @extends {BaseAPI}
 */
export class BodypartsApi extends BaseAPI {
    /**
     * プロジェクトごとのボディパーツを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of bodypart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BodypartsApi
     */
    public deleteBodypart(projectId: string, id: string, options?: AxiosRequestConfig) {
        return BodypartsApiFp(this.configuration).deleteBodypart(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのボディパーツを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of bodypart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BodypartsApi
     */
    public getBodypart(projectId: string, id: string, options?: AxiosRequestConfig) {
        return BodypartsApiFp(this.configuration).getBodypart(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのボディパーツ一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BodypartsApi
     */
    public getBodypartsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return BodypartsApiFp(this.configuration).getBodypartsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのボディパーツを作成する 
     * @param {string} projectId project_id of project
     * @param {PostBodypartBody} postBodypartBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BodypartsApi
     */
    public postBodyparts(projectId: string, postBodypartBody: PostBodypartBody, options?: AxiosRequestConfig) {
        return BodypartsApiFp(this.configuration).postBodyparts(projectId, postBodypartBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのボディパーツを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of bodypart
     * @param {PutBodypartBody} putBodypartBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BodypartsApi
     */
    public putBodypart(projectId: string, id: string, putBodypartBody: PutBodypartBody, options?: AxiosRequestConfig) {
        return BodypartsApiFp(this.configuration).putBodypart(projectId, id, putBodypartBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CronJobsApi - axios parameter creator
 * @export
 */
export const CronJobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プッシュ通知を送信する 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPushMessages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/cronjobs/send_push_messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CronJobsApi - functional programming interface
 * @export
 */
export const CronJobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CronJobsApiAxiosParamCreator(configuration)
    return {
        /**
         * プッシュ通知を送信する 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPushMessages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronjobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPushMessages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CronJobsApi - factory interface
 * @export
 */
export const CronJobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CronJobsApiFp(configuration)
    return {
        /**
         * プッシュ通知を送信する 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPushMessages(options?: any): AxiosPromise<CronjobResponse> {
            return localVarFp.sendPushMessages(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CronJobsApi - object-oriented interface
 * @export
 * @class CronJobsApi
 * @extends {BaseAPI}
 */
export class CronJobsApi extends BaseAPI {
    /**
     * プッシュ通知を送信する 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronJobsApi
     */
    public sendPushMessages(options?: AxiosRequestConfig) {
        return CronJobsApiFp(this.configuration).sendPushMessages(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 一括アップロード実施用API ※各プロジェクト内の1度以上更新されたマスタデータの再更新 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDashboardUploadOss: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/dashboards/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ダッシュボード一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboards: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getDashboards', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/dashboards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OSSへアップロード
         * @param {string} projectId プロジェクトID
         * @param {DashboardUploadRequestBody} [dashboardUploadRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadOSS: async (projectId: string, dashboardUploadRequestBody?: DashboardUploadRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postUploadOSS', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/dashboards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dashboardUploadRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 一括アップロード実施用API ※各プロジェクト内の1度以上更新されたマスタデータの再更新 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDashboardUploadOss(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDashboardUploadOss(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ダッシュボード一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboards(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDashboardsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboards(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * OSSへアップロード
         * @param {string} projectId プロジェクトID
         * @param {DashboardUploadRequestBody} [dashboardUploadRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUploadOSS(projectId: string, dashboardUploadRequestBody?: DashboardUploadRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUploadOSS(projectId, dashboardUploadRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 一括アップロード実施用API ※各プロジェクト内の1度以上更新されたマスタデータの再更新 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDashboardUploadOss(options?: any): AxiosPromise<AdminDashboardResponse> {
            return localVarFp.adminDashboardUploadOss(options).then((request) => request(axios, basePath));
        },
        /**
         * ダッシュボード一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboards(projectId: string, options?: any): AxiosPromise<GetDashboardsResponse> {
            return localVarFp.getDashboards(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * OSSへアップロード
         * @param {string} projectId プロジェクトID
         * @param {DashboardUploadRequestBody} [dashboardUploadRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUploadOSS(projectId: string, dashboardUploadRequestBody?: DashboardUploadRequestBody, options?: any): AxiosPromise<DashboardUploadResponse> {
            return localVarFp.postUploadOSS(projectId, dashboardUploadRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 一括アップロード実施用API ※各プロジェクト内の1度以上更新されたマスタデータの再更新 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public adminDashboardUploadOss(options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).adminDashboardUploadOss(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ダッシュボード一覧を取得する
     * @param {string} projectId プロジェクトID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public getDashboards(projectId: string, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).getDashboards(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OSSへアップロード
     * @param {string} projectId プロジェクトID
     * @param {DashboardUploadRequestBody} [dashboardUploadRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public postUploadOSS(projectId: string, dashboardUploadRequestBody?: DashboardUploadRequestBody, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).postUploadOSS(projectId, dashboardUploadRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FaqApi - axios parameter creator
 * @export
 */
export const FaqApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * FAQのカテゴリー情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (projectId: string, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteCategory', 'projectId', projectId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategory', 'categoryId', categoryId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/category/{category_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQ情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaq: async (projectId: string, faqId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteFaq', 'projectId', projectId)
            // verify required parameter 'faqId' is not null or undefined
            assertParamExists('deleteFaq', 'faqId', faqId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/{faq_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"faq_id"}}`, encodeURIComponent(String(faqId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQの特定カテゴリー情報を取得
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (projectId: string, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getCategory', 'projectId', projectId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCategory', 'categoryId', categoryId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/category/{category_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定FAQを取得
         * @param {string} projectId project_id of project
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaq: async (projectId: string, faqId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFaq', 'projectId', projectId)
            // verify required parameter 'faqId' is not null or undefined
            assertParamExists('getFaq', 'faqId', faqId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/{faq_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"faq_id"}}`, encodeURIComponent(String(faqId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQのカテゴリー一覧を取得
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqCategories: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFaqCategories', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/category`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定カテゴリー内のFAQ一覧を取得
         * @param {string} projectId project_id of project
         * @param {string} categoryId カテゴリーID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs: async (projectId: string, categoryId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFaqs', 'projectId', projectId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getFaqs', 'categoryId', categoryId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/faqs/{category_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQのカテゴリー情報を追加
         * @param {string} projectId プロジェクトID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategory: async (projectId: string, categoryRequestBody?: CategoryRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postCategory', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/category`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQ情報を追加
         * @param {string} projectId プロジェクトID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaq: async (projectId: string, faqRequestBody?: FaqRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postFaq', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQのカテゴリー情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategory: async (projectId: string, categoryId: string, categoryRequestBody?: CategoryRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putCategory', 'projectId', projectId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('putCategory', 'categoryId', categoryId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/category/{category_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAQ情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaq: async (projectId: string, faqId: string, faqRequestBody?: FaqRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putFaq', 'projectId', projectId)
            // verify required parameter 'faqId' is not null or undefined
            assertParamExists('putFaq', 'faqId', faqId)
            const localVarPath = `/admin/v1/projects/{project_id}/faq/{faq_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"faq_id"}}`, encodeURIComponent(String(faqId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaqApi - functional programming interface
 * @export
 */
export const FaqApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaqApiAxiosParamCreator(configuration)
    return {
        /**
         * FAQのカテゴリー情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(projectId: string, categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(projectId, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQ情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFaq(projectId: string, faqId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFaq(projectId, faqId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQの特定カテゴリー情報を取得
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(projectId: string, categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(projectId, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定FAQを取得
         * @param {string} projectId project_id of project
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaq(projectId: string, faqId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaq(projectId, faqId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQのカテゴリー一覧を取得
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqCategories(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqCategories(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定カテゴリー内のFAQ一覧を取得
         * @param {string} projectId project_id of project
         * @param {string} categoryId カテゴリーID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqs(projectId: string, categoryId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoryFaqsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqs(projectId, categoryId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQのカテゴリー情報を追加
         * @param {string} projectId プロジェクトID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategory(projectId: string, categoryRequestBody?: CategoryRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategory(projectId, categoryRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQ情報を追加
         * @param {string} projectId プロジェクトID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFaq(projectId: string, faqRequestBody?: FaqRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFaq(projectId, faqRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQのカテゴリー情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategory(projectId: string, categoryId: string, categoryRequestBody?: CategoryRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategory(projectId, categoryId, categoryRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAQ情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFaq(projectId: string, faqId: string, faqRequestBody?: FaqRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFaq(projectId, faqId, faqRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FaqApi - factory interface
 * @export
 */
export const FaqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaqApiFp(configuration)
    return {
        /**
         * FAQのカテゴリー情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(projectId: string, categoryId: string, options?: any): AxiosPromise<CategoryUpdateResponse> {
            return localVarFp.deleteCategory(projectId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQ情報を削除
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaq(projectId: string, faqId: string, options?: any): AxiosPromise<FaqUpdateResponse> {
            return localVarFp.deleteFaq(projectId, faqId, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQの特定カテゴリー情報を取得
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(projectId: string, categoryId: string, options?: any): AxiosPromise<GetCategoryResponse> {
            return localVarFp.getCategory(projectId, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定FAQを取得
         * @param {string} projectId project_id of project
         * @param {string} faqId FAQ ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaq(projectId: string, faqId: string, options?: any): AxiosPromise<GetFaqResponse> {
            return localVarFp.getFaq(projectId, faqId, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQのカテゴリー一覧を取得
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqCategories(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<GetCategoriesResponse> {
            return localVarFp.getFaqCategories(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定カテゴリー内のFAQ一覧を取得
         * @param {string} projectId project_id of project
         * @param {string} categoryId カテゴリーID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs(projectId: string, categoryId: string, page?: number, perPage?: number, options?: any): AxiosPromise<GetCategoryFaqsResponse> {
            return localVarFp.getFaqs(projectId, categoryId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQのカテゴリー情報を追加
         * @param {string} projectId プロジェクトID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategory(projectId: string, categoryRequestBody?: CategoryRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.postCategory(projectId, categoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQ情報を追加
         * @param {string} projectId プロジェクトID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaq(projectId: string, faqRequestBody?: FaqRequestBody, options?: any): AxiosPromise<FaqUpdateResponse> {
            return localVarFp.postFaq(projectId, faqRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQのカテゴリー情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} categoryId カテゴリーID
         * @param {CategoryRequestBody} [categoryRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategory(projectId: string, categoryId: string, categoryRequestBody?: CategoryRequestBody, options?: any): AxiosPromise<CategoryUpdateResponse> {
            return localVarFp.putCategory(projectId, categoryId, categoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * FAQ情報を更新
         * @param {string} projectId プロジェクトID
         * @param {string} faqId FAQ ID
         * @param {FaqRequestBody} [faqRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaq(projectId: string, faqId: string, faqRequestBody?: FaqRequestBody, options?: any): AxiosPromise<FaqUpdateResponse> {
            return localVarFp.putFaq(projectId, faqId, faqRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaqApi - object-oriented interface
 * @export
 * @class FaqApi
 * @extends {BaseAPI}
 */
export class FaqApi extends BaseAPI {
    /**
     * FAQのカテゴリー情報を削除
     * @param {string} projectId プロジェクトID
     * @param {string} categoryId カテゴリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public deleteCategory(projectId: string, categoryId: string, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).deleteCategory(projectId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQ情報を削除
     * @param {string} projectId プロジェクトID
     * @param {string} faqId FAQ ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public deleteFaq(projectId: string, faqId: string, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).deleteFaq(projectId, faqId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQの特定カテゴリー情報を取得
     * @param {string} projectId プロジェクトID
     * @param {string} categoryId カテゴリーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getCategory(projectId: string, categoryId: string, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getCategory(projectId, categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定FAQを取得
     * @param {string} projectId project_id of project
     * @param {string} faqId FAQ ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaq(projectId: string, faqId: string, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaq(projectId, faqId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQのカテゴリー一覧を取得
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqCategories(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqCategories(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定カテゴリー内のFAQ一覧を取得
     * @param {string} projectId project_id of project
     * @param {string} categoryId カテゴリーID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqs(projectId: string, categoryId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqs(projectId, categoryId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQのカテゴリー情報を追加
     * @param {string} projectId プロジェクトID
     * @param {CategoryRequestBody} [categoryRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public postCategory(projectId: string, categoryRequestBody?: CategoryRequestBody, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).postCategory(projectId, categoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQ情報を追加
     * @param {string} projectId プロジェクトID
     * @param {FaqRequestBody} [faqRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public postFaq(projectId: string, faqRequestBody?: FaqRequestBody, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).postFaq(projectId, faqRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQのカテゴリー情報を更新
     * @param {string} projectId プロジェクトID
     * @param {string} categoryId カテゴリーID
     * @param {CategoryRequestBody} [categoryRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public putCategory(projectId: string, categoryId: string, categoryRequestBody?: CategoryRequestBody, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).putCategory(projectId, categoryId, categoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAQ情報を更新
     * @param {string} projectId プロジェクトID
     * @param {string} faqId FAQ ID
     * @param {FaqRequestBody} [faqRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public putFaq(projectId: string, faqId: string, faqRequestBody?: FaqRequestBody, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).putFaq(projectId, faqId, faqRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ヘルスチェックを要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * ヘルスチェックを要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * ヘルスチェックを要求する。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck(options?: any): AxiosPromise<void> {
            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * ヘルスチェックを要求する。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public healthcheck(options?: AxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * アイテムの論理削除を要求する。 
         * @param {string} id id of item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItem', 'id', id)
            const localVarPath = `/admin/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アイテムの取得を要求する。 
         * @param {string} id id of item schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItem', 'id', id)
            const localVarPath = `/admin/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getItemsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/items/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アイテムの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostItemsBody} [postItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByProject: async (projectId: string, postItemsBody?: PostItemsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postItemsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/items/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postItemsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アイテムの更新を要求する。 
         * @param {string} id id of item
         * @param {PutItemBody} [putItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItem: async (id: string, putItemBody?: PutItemBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItem', 'id', id)
            const localVarPath = `/admin/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putItemBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * アイテムの論理削除を要求する。 
         * @param {string} id id of item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アイテムの取得を要求する。 
         * @param {string} id id of item schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アイテムの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostItemsBody} [postItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByProject(projectId: string, postItemsBody?: PostItemsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postItemsByProject(projectId, postItemsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アイテムの更新を要求する。 
         * @param {string} id id of item
         * @param {PutItemBody} [putItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItem(id: string, putItemBody?: PutItemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItem(id, putItemBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * アイテムの論理削除を要求する。 
         * @param {string} id id of item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(id: string, options?: any): AxiosPromise<ItemResponse> {
            return localVarFp.deleteItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アイテムの取得を要求する。 
         * @param {string} id id of item schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(id: string, options?: any): AxiosPromise<ItemResponse> {
            return localVarFp.getItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(page?: number, perPage?: number, options?: any): AxiosPromise<ItemsResponse> {
            return localVarFp.getItems(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * アイテムの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<ItemsResponse> {
            return localVarFp.getItemsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * アイテムの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostItemsBody} [postItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByProject(projectId: string, postItemsBody?: PostItemsBody, options?: any): AxiosPromise<ItemResponse> {
            return localVarFp.postItemsByProject(projectId, postItemsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * アイテムの更新を要求する。 
         * @param {string} id id of item
         * @param {PutItemBody} [putItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItem(id: string, putItemBody?: PutItemBody, options?: any): AxiosPromise<ItemResponse> {
            return localVarFp.putItem(id, putItemBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * アイテムの論理削除を要求する。 
     * @param {string} id id of item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public deleteItem(id: string, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).deleteItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アイテムの取得を要求する。 
     * @param {string} id id of item schme type integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItem(id: string, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アイテムの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItems(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItems(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アイテムの一覧取得を要求する。 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アイテムの作成を要求する。 
     * @param {string} projectId project_id of project
     * @param {PostItemsBody} [postItemsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public postItemsByProject(projectId: string, postItemsBody?: PostItemsBody, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).postItemsByProject(projectId, postItemsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アイテムの更新を要求する。 
     * @param {string} id id of item
     * @param {PutItemBody} [putItemBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public putItem(id: string, putItemBody?: PutItemBody, options?: AxiosRequestConfig) {
        return ItemsApiFp(this.configuration).putItem(id, putItemBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LevelsApi - axios parameter creator
 * @export
 */
export const LevelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとのレベルアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemLevel: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteItemLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemLevel', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/item_levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLevel: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLevel', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemLevel: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getItemLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemLevel', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/item_levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevel: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLevel', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * レベル内のサイネージを取得する 
         * @param {string} projectId project_id of project
         * @param {GetLevelSignages} [getLevelSignages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelSignages: async (projectId: string, getLevelSignages?: GetLevelSignages, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLevelSignages', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/levels/signages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getLevelSignages, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベル一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLevelsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/levels`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルアイテムを作成する 
         * @param {string} projectId プロジェクトID
         * @param {PostItemLevelBody} postItemLevelBody レベルアイテムの作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemLevels: async (projectId: string, postItemLevelBody: PostItemLevelBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postItemLevels', 'projectId', projectId)
            // verify required parameter 'postItemLevelBody' is not null or undefined
            assertParamExists('postItemLevels', 'postItemLevelBody', postItemLevelBody)
            const localVarPath = `/admin/v1/project/{project_id}/item_levels`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postItemLevelBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLevelsBody} [postLevelsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLevels: async (projectId: string, postLevelsBody?: PostLevelsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postLevels', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/levels`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLevelsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {PutItemLevelBody} putItemLevelBody レベルアイテムの更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemLevel: async (projectId: string, id: string, putItemLevelBody: PutItemLevelBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putItemLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemLevel', 'id', id)
            // verify required parameter 'putItemLevelBody' is not null or undefined
            assertParamExists('putItemLevel', 'putItemLevelBody', putItemLevelBody)
            const localVarPath = `/admin/v1/project/{project_id}/item_levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putItemLevelBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのレベルを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {PutLevelBody} [putLevelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLevel: async (projectId: string, id: string, putLevelBody?: PutLevelBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putLevel', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putLevel', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/levels/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putLevelBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LevelsApi - functional programming interface
 * @export
 */
export const LevelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LevelsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとのレベルアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemLevel(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemLevel(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLevel(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLevel(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemLevel(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemLevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemLevel(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLevel(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLevel(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * レベル内のサイネージを取得する 
         * @param {string} projectId project_id of project
         * @param {GetLevelSignages} [getLevelSignages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLevelSignages(projectId: string, getLevelSignages?: GetLevelSignages, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelSignageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLevelSignages(projectId, getLevelSignages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベル一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLevelsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLevelsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルアイテムを作成する 
         * @param {string} projectId プロジェクトID
         * @param {PostItemLevelBody} postItemLevelBody レベルアイテムの作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemLevels(projectId: string, postItemLevelBody: PostItemLevelBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postItemLevels(projectId, postItemLevelBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLevelsBody} [postLevelsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLevels(projectId: string, postLevelsBody?: PostLevelsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLevels(projectId, postLevelsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {PutItemLevelBody} putItemLevelBody レベルアイテムの更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemLevel(projectId: string, id: string, putItemLevelBody: PutItemLevelBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemLevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemLevel(projectId, id, putItemLevelBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのレベルを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {PutLevelBody} [putLevelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLevel(projectId: string, id: string, putLevelBody?: PutLevelBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLevel(projectId, id, putLevelBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LevelsApi - factory interface
 * @export
 */
export const LevelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LevelsApiFp(configuration)
    return {
        /**
         * プロジェクトごとのレベルアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemLevel(projectId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemLevel(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLevel(projectId: string, id: string, options?: any): AxiosPromise<LevelResponse> {
            return localVarFp.deleteLevel(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemLevel(projectId: string, id: string, options?: any): AxiosPromise<ItemLevelResponse> {
            return localVarFp.getItemLevel(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevel(projectId: string, id: string, options?: any): AxiosPromise<LevelResponse> {
            return localVarFp.getLevel(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * レベル内のサイネージを取得する 
         * @param {string} projectId project_id of project
         * @param {GetLevelSignages} [getLevelSignages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelSignages(projectId: string, getLevelSignages?: GetLevelSignages, options?: any): AxiosPromise<LevelSignageResponse> {
            return localVarFp.getLevelSignages(projectId, getLevelSignages, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベル一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLevelsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<LevelsResponse> {
            return localVarFp.getLevelsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルアイテムを作成する 
         * @param {string} projectId プロジェクトID
         * @param {PostItemLevelBody} postItemLevelBody レベルアイテムの作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemLevels(projectId: string, postItemLevelBody: PostItemLevelBody, options?: any): AxiosPromise<LevelResponse> {
            return localVarFp.postItemLevels(projectId, postItemLevelBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLevelsBody} [postLevelsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLevels(projectId: string, postLevelsBody?: PostLevelsBody, options?: any): AxiosPromise<LevelResponse> {
            return localVarFp.postLevels(projectId, postLevelsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of ItemLevel
         * @param {PutItemLevelBody} putItemLevelBody レベルアイテムの更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemLevel(projectId: string, id: string, putItemLevelBody: PutItemLevelBody, options?: any): AxiosPromise<ItemLevelResponse> {
            return localVarFp.putItemLevel(projectId, id, putItemLevelBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのレベルを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of level
         * @param {PutLevelBody} [putLevelBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLevel(projectId: string, id: string, putLevelBody?: PutLevelBody, options?: any): AxiosPromise<LevelResponse> {
            return localVarFp.putLevel(projectId, id, putLevelBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LevelsApi - object-oriented interface
 * @export
 * @class LevelsApi
 * @extends {BaseAPI}
 */
export class LevelsApi extends BaseAPI {
    /**
     * プロジェクトごとのレベルアイテムを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of ItemLevel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public deleteItemLevel(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).deleteItemLevel(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public deleteLevel(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).deleteLevel(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルアイテムを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of ItemLevel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public getItemLevel(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).getItemLevel(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public getLevel(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).getLevel(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * レベル内のサイネージを取得する 
     * @param {string} projectId project_id of project
     * @param {GetLevelSignages} [getLevelSignages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public getLevelSignages(projectId: string, getLevelSignages?: GetLevelSignages, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).getLevelSignages(projectId, getLevelSignages, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベル一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public getLevelsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).getLevelsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルアイテムを作成する 
     * @param {string} projectId プロジェクトID
     * @param {PostItemLevelBody} postItemLevelBody レベルアイテムの作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public postItemLevels(projectId: string, postItemLevelBody: PostItemLevelBody, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).postItemLevels(projectId, postItemLevelBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルを作成する 
     * @param {string} projectId project_id of project
     * @param {PostLevelsBody} [postLevelsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public postLevels(projectId: string, postLevelsBody?: PostLevelsBody, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).postLevels(projectId, postLevelsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルアイテムを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of ItemLevel
     * @param {PutItemLevelBody} putItemLevelBody レベルアイテムの更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public putItemLevel(projectId: string, id: string, putItemLevelBody: PutItemLevelBody, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).putItemLevel(projectId, id, putItemLevelBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのレベルを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of level
     * @param {PutLevelBody} [putLevelBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LevelsApi
     */
    public putLevel(projectId: string, id: string, putLevelBody?: PutLevelBody, options?: AxiosRequestConfig) {
        return LevelsApiFp(this.configuration).putLevel(projectId, id, putLevelBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginBonusesApi - axios parameter creator
 * @export
 */
export const LoginBonusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとのログインボーナスを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoginBonus: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteLoginBonus', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLoginBonus', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonuses/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナス報酬を削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoginBonusReward: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteLoginBonusReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLoginBonusReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonus_rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナスを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonus: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLoginBonus', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLoginBonus', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonuses/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナス報酬を取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonusReward: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLoginBonusReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLoginBonusReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonus_rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナス一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonusesByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getLoginBonusesByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonuses`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナス報酬を作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusRewardsBody} [postLoginBonusRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginBonusRewards: async (projectId: string, postLoginBonusRewardsBody?: PostLoginBonusRewardsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postLoginBonusRewards', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonus_rewards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginBonusRewardsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナスを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusesBody} [postLoginBonusesBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginBonuses: async (projectId: string, postLoginBonusesBody?: PostLoginBonusesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postLoginBonuses', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonuses`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postLoginBonusesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナスを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {PutLoginBonusBody} [putLoginBonusBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoginBonus: async (projectId: string, id: string, putLoginBonusBody?: PutLoginBonusBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putLoginBonus', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putLoginBonus', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonuses/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putLoginBonusBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのログインボーナス報酬を更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {PutLoginBonusRewardBody} [putLoginBonusRewardBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoginBonusReward: async (projectId: string, id: string, putLoginBonusRewardBody?: PutLoginBonusRewardBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putLoginBonusReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putLoginBonusReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/loginbonus_rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putLoginBonusRewardBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginBonusesApi - functional programming interface
 * @export
 */
export const LoginBonusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginBonusesApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとのログインボーナスを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLoginBonus(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLoginBonus(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナス報酬を削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLoginBonusReward(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusRewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLoginBonusReward(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナスを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginBonus(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginBonus(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナス報酬を取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginBonusReward(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusRewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginBonusReward(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナス一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginBonusesByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginBonusesByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナス報酬を作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusRewardsBody} [postLoginBonusRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginBonusRewards(projectId: string, postLoginBonusRewardsBody?: PostLoginBonusRewardsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginBonusRewards(projectId, postLoginBonusRewardsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナスを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusesBody} [postLoginBonusesBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginBonuses(projectId: string, postLoginBonusesBody?: PostLoginBonusesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginBonuses(projectId, postLoginBonusesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナスを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {PutLoginBonusBody} [putLoginBonusBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLoginBonus(projectId: string, id: string, putLoginBonusBody?: PutLoginBonusBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLoginBonus(projectId, id, putLoginBonusBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのログインボーナス報酬を更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {PutLoginBonusRewardBody} [putLoginBonusRewardBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLoginBonusReward(projectId: string, id: string, putLoginBonusRewardBody?: PutLoginBonusRewardBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginBonusRewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLoginBonusReward(projectId, id, putLoginBonusRewardBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginBonusesApi - factory interface
 * @export
 */
export const LoginBonusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginBonusesApiFp(configuration)
    return {
        /**
         * プロジェクトごとのログインボーナスを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoginBonus(projectId: string, id: string, options?: any): AxiosPromise<LoginBonusResponse> {
            return localVarFp.deleteLoginBonus(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナス報酬を削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLoginBonusReward(projectId: string, id: string, options?: any): AxiosPromise<LoginBonusRewardResponse> {
            return localVarFp.deleteLoginBonusReward(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナスを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonus(projectId: string, id: string, options?: any): AxiosPromise<LoginBonusResponse> {
            return localVarFp.getLoginBonus(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナス報酬を取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonusReward(projectId: string, id: string, options?: any): AxiosPromise<LoginBonusRewardResponse> {
            return localVarFp.getLoginBonusReward(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナス一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginBonusesByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<LoginBonusesResponse> {
            return localVarFp.getLoginBonusesByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナス報酬を作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusRewardsBody} [postLoginBonusRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginBonusRewards(projectId: string, postLoginBonusRewardsBody?: PostLoginBonusRewardsBody, options?: any): AxiosPromise<LoginBonusResponse> {
            return localVarFp.postLoginBonusRewards(projectId, postLoginBonusRewardsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナスを作成する 
         * @param {string} projectId project_id of project
         * @param {PostLoginBonusesBody} [postLoginBonusesBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginBonuses(projectId: string, postLoginBonusesBody?: PostLoginBonusesBody, options?: any): AxiosPromise<LoginBonusesResponse> {
            return localVarFp.postLoginBonuses(projectId, postLoginBonusesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナスを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus
         * @param {PutLoginBonusBody} [putLoginBonusBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoginBonus(projectId: string, id: string, putLoginBonusBody?: PutLoginBonusBody, options?: any): AxiosPromise<LoginBonusResponse> {
            return localVarFp.putLoginBonus(projectId, id, putLoginBonusBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのログインボーナス報酬を更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of loginbonus_reward
         * @param {PutLoginBonusRewardBody} [putLoginBonusRewardBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLoginBonusReward(projectId: string, id: string, putLoginBonusRewardBody?: PutLoginBonusRewardBody, options?: any): AxiosPromise<LoginBonusRewardResponse> {
            return localVarFp.putLoginBonusReward(projectId, id, putLoginBonusRewardBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginBonusesApi - object-oriented interface
 * @export
 * @class LoginBonusesApi
 * @extends {BaseAPI}
 */
export class LoginBonusesApi extends BaseAPI {
    /**
     * プロジェクトごとのログインボーナスを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public deleteLoginBonus(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).deleteLoginBonus(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナス報酬を削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus_reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public deleteLoginBonusReward(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).deleteLoginBonusReward(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナスを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public getLoginBonus(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).getLoginBonus(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナス報酬を取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus_reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public getLoginBonusReward(projectId: string, id: string, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).getLoginBonusReward(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナス一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public getLoginBonusesByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).getLoginBonusesByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナス報酬を作成する 
     * @param {string} projectId project_id of project
     * @param {PostLoginBonusRewardsBody} [postLoginBonusRewardsBody] リクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public postLoginBonusRewards(projectId: string, postLoginBonusRewardsBody?: PostLoginBonusRewardsBody, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).postLoginBonusRewards(projectId, postLoginBonusRewardsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナスを作成する 
     * @param {string} projectId project_id of project
     * @param {PostLoginBonusesBody} [postLoginBonusesBody] リクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public postLoginBonuses(projectId: string, postLoginBonusesBody?: PostLoginBonusesBody, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).postLoginBonuses(projectId, postLoginBonusesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナスを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus
     * @param {PutLoginBonusBody} [putLoginBonusBody] リクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public putLoginBonus(projectId: string, id: string, putLoginBonusBody?: PutLoginBonusBody, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).putLoginBonus(projectId, id, putLoginBonusBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのログインボーナス報酬を更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of loginbonus_reward
     * @param {PutLoginBonusRewardBody} [putLoginBonusRewardBody] リクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginBonusesApi
     */
    public putLoginBonusReward(projectId: string, id: string, putLoginBonusRewardBody?: PutLoginBonusRewardBody, options?: AxiosRequestConfig) {
        return LoginBonusesApiFp(this.configuration).putLoginBonusReward(projectId, id, putLoginBonusRewardBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MailboxesApi - axios parameter creator
 * @export
 */
export const MailboxesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * メールボックスメッセージを削除する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMailboxMessage: async (userprofileId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('deleteMailboxMessage', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMailboxMessage', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/mailbox/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールボックスメッセージを取得する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailboxMessage: async (userprofileId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('getMailboxMessage', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMailboxMessage', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/mailbox/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールボックスメッセージ一覧を取得する 
         * @param {string} userprofileId id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailboxMessages: async (userprofileId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('getMailboxMessages', 'userprofileId', userprofileId)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/mailbox`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールボックスメッセージを作成する 
         * @param {string} userprofileId id of userprofile
         * @param {PostMailboxMessagesBody} [postMailboxMessagesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMailboxMessages: async (userprofileId: string, postMailboxMessagesBody?: PostMailboxMessagesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('postMailboxMessages', 'userprofileId', userprofileId)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/mailbox`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMailboxMessagesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールボックスメッセージを更新する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {PutMailboxMessageBody} [putMailboxMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMailboxMessage: async (userprofileId: string, id: string, putMailboxMessageBody?: PutMailboxMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('putMailboxMessage', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putMailboxMessage', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/mailbox/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putMailboxMessageBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailboxesApi - functional programming interface
 * @export
 */
export const MailboxesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailboxesApiAxiosParamCreator(configuration)
    return {
        /**
         * メールボックスメッセージを削除する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMailboxMessage(userprofileId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailboxMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMailboxMessage(userprofileId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールボックスメッセージを取得する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailboxMessage(userprofileId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailboxMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailboxMessage(userprofileId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールボックスメッセージ一覧を取得する 
         * @param {string} userprofileId id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailboxMessages(userprofileId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailboxMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailboxMessages(userprofileId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールボックスメッセージを作成する 
         * @param {string} userprofileId id of userprofile
         * @param {PostMailboxMessagesBody} [postMailboxMessagesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMailboxMessages(userprofileId: string, postMailboxMessagesBody?: PostMailboxMessagesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailboxMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMailboxMessages(userprofileId, postMailboxMessagesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールボックスメッセージを更新する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {PutMailboxMessageBody} [putMailboxMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMailboxMessage(userprofileId: string, id: string, putMailboxMessageBody?: PutMailboxMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailboxMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMailboxMessage(userprofileId, id, putMailboxMessageBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailboxesApi - factory interface
 * @export
 */
export const MailboxesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailboxesApiFp(configuration)
    return {
        /**
         * メールボックスメッセージを削除する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMailboxMessage(userprofileId: string, id: string, options?: any): AxiosPromise<MailboxMessageResponse> {
            return localVarFp.deleteMailboxMessage(userprofileId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * メールボックスメッセージを取得する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailboxMessage(userprofileId: string, id: string, options?: any): AxiosPromise<MailboxMessageResponse> {
            return localVarFp.getMailboxMessage(userprofileId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * メールボックスメッセージ一覧を取得する 
         * @param {string} userprofileId id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailboxMessages(userprofileId: string, page?: number, perPage?: number, options?: any): AxiosPromise<MailboxMessagesResponse> {
            return localVarFp.getMailboxMessages(userprofileId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * メールボックスメッセージを作成する 
         * @param {string} userprofileId id of userprofile
         * @param {PostMailboxMessagesBody} [postMailboxMessagesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMailboxMessages(userprofileId: string, postMailboxMessagesBody?: PostMailboxMessagesBody, options?: any): AxiosPromise<MailboxMessageResponse> {
            return localVarFp.postMailboxMessages(userprofileId, postMailboxMessagesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * メールボックスメッセージを更新する 
         * @param {string} userprofileId id of userprofile
         * @param {string} id id of mailbox_message
         * @param {PutMailboxMessageBody} [putMailboxMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMailboxMessage(userprofileId: string, id: string, putMailboxMessageBody?: PutMailboxMessageBody, options?: any): AxiosPromise<MailboxMessageResponse> {
            return localVarFp.putMailboxMessage(userprofileId, id, putMailboxMessageBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailboxesApi - object-oriented interface
 * @export
 * @class MailboxesApi
 * @extends {BaseAPI}
 */
export class MailboxesApi extends BaseAPI {
    /**
     * メールボックスメッセージを削除する 
     * @param {string} userprofileId id of userprofile
     * @param {string} id id of mailbox_message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxesApi
     */
    public deleteMailboxMessage(userprofileId: string, id: string, options?: AxiosRequestConfig) {
        return MailboxesApiFp(this.configuration).deleteMailboxMessage(userprofileId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールボックスメッセージを取得する 
     * @param {string} userprofileId id of userprofile
     * @param {string} id id of mailbox_message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxesApi
     */
    public getMailboxMessage(userprofileId: string, id: string, options?: AxiosRequestConfig) {
        return MailboxesApiFp(this.configuration).getMailboxMessage(userprofileId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールボックスメッセージ一覧を取得する 
     * @param {string} userprofileId id of userprofile
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxesApi
     */
    public getMailboxMessages(userprofileId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return MailboxesApiFp(this.configuration).getMailboxMessages(userprofileId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールボックスメッセージを作成する 
     * @param {string} userprofileId id of userprofile
     * @param {PostMailboxMessagesBody} [postMailboxMessagesBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxesApi
     */
    public postMailboxMessages(userprofileId: string, postMailboxMessagesBody?: PostMailboxMessagesBody, options?: AxiosRequestConfig) {
        return MailboxesApiFp(this.configuration).postMailboxMessages(userprofileId, postMailboxMessagesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールボックスメッセージを更新する 
     * @param {string} userprofileId id of userprofile
     * @param {string} id id of mailbox_message
     * @param {PutMailboxMessageBody} [putMailboxMessageBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxesApi
     */
    public putMailboxMessage(userprofileId: string, id: string, putMailboxMessageBody?: PutMailboxMessageBody, options?: AxiosRequestConfig) {
        return MailboxesApiFp(this.configuration).putMailboxMessage(userprofileId, id, putMailboxMessageBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MissionsApi - axios parameter creator
 * @export
 */
export const MissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ミッションを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMission: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteMission', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMission', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/missions/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ミッションを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMission: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getMission', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMission', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/missions/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのミッション一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissionsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getMissionsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/missions`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのミッションを作成する 
         * @param {string} projectId project_id of project
         * @param {PostMissionsBody} [postMissionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissions: async (projectId: string, postMissionsBody?: PostMissionsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postMissions', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/missions`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMissionsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ミッションを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {PutMissionBody} [putMissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMission: async (projectId: string, id: string, putMissionBody?: PutMissionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putMission', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putMission', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/missions/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putMissionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MissionsApi - functional programming interface
 * @export
 */
export const MissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * ミッションを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMission(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMission(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ミッションを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMission(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMission(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのミッション一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMissionsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMissionsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのミッションを作成する 
         * @param {string} projectId project_id of project
         * @param {PostMissionsBody} [postMissionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMissions(projectId: string, postMissionsBody?: PostMissionsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMissions(projectId, postMissionsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ミッションを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {PutMissionBody} [putMissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMission(projectId: string, id: string, putMissionBody?: PutMissionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMission(projectId, id, putMissionBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MissionsApi - factory interface
 * @export
 */
export const MissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MissionsApiFp(configuration)
    return {
        /**
         * ミッションを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMission(projectId: string, id: string, options?: any): AxiosPromise<MissionResponse> {
            return localVarFp.deleteMission(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * ミッションを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMission(projectId: string, id: string, options?: any): AxiosPromise<MissionResponse> {
            return localVarFp.getMission(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのミッション一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissionsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<MissionsResponse> {
            return localVarFp.getMissionsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのミッションを作成する 
         * @param {string} projectId project_id of project
         * @param {PostMissionsBody} [postMissionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMissions(projectId: string, postMissionsBody?: PostMissionsBody, options?: any): AxiosPromise<MissionResponse> {
            return localVarFp.postMissions(projectId, postMissionsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ミッションを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of mission
         * @param {PutMissionBody} [putMissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMission(projectId: string, id: string, putMissionBody?: PutMissionBody, options?: any): AxiosPromise<MissionResponse> {
            return localVarFp.putMission(projectId, id, putMissionBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MissionsApi - object-oriented interface
 * @export
 * @class MissionsApi
 * @extends {BaseAPI}
 */
export class MissionsApi extends BaseAPI {
    /**
     * ミッションを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of mission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApi
     */
    public deleteMission(projectId: string, id: string, options?: AxiosRequestConfig) {
        return MissionsApiFp(this.configuration).deleteMission(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ミッションを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of mission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApi
     */
    public getMission(projectId: string, id: string, options?: AxiosRequestConfig) {
        return MissionsApiFp(this.configuration).getMission(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのミッション一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApi
     */
    public getMissionsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return MissionsApiFp(this.configuration).getMissionsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのミッションを作成する 
     * @param {string} projectId project_id of project
     * @param {PostMissionsBody} [postMissionsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApi
     */
    public postMissions(projectId: string, postMissionsBody?: PostMissionsBody, options?: AxiosRequestConfig) {
        return MissionsApiFp(this.configuration).postMissions(projectId, postMissionsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ミッションを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of mission
     * @param {PutMissionBody} [putMissionBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissionsApi
     */
    public putMission(projectId: string, id: string, putMissionBody?: PutMissionBody, options?: AxiosRequestConfig) {
        return MissionsApiFp(this.configuration).putMission(projectId, id, putMissionBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NpcActionsApi - axios parameter creator
 * @export
 */
export const NpcActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * NPC Actionを削除する 
         * @param {string} id id of Npc Action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNpcAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNpcAction', 'id', id)
            const localVarPath = `/admin/v1/npcactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * NPC Actionを取得する 
         * @param {string} id id of NpcAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcAction: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNpcAction', 'id', id)
            const localVarPath = `/admin/v1/npcactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのNPC Action一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcActionsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getNpcActionsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/npcactions/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのNPC Actionを作成する 
         * @param {string} projectId project_id of project
         * @param {PostNpcActionsBody} [postNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNpcActions: async (projectId: string, postNpcActionsBody?: PostNpcActionsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postNpcActions', 'projectId', projectId)
            const localVarPath = `/admin/v1/npcactions/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postNpcActionsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * NPC Actionを更新する 
         * @param {string} id id of Npc Action
         * @param {PutNpcActionsBody} [putNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNpcAction: async (id: string, putNpcActionsBody?: PutNpcActionsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putNpcAction', 'id', id)
            const localVarPath = `/admin/v1/npcactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putNpcActionsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NpcActionsApi - functional programming interface
 * @export
 */
export const NpcActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NpcActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * NPC Actionを削除する 
         * @param {string} id id of Npc Action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNpcAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNpcAction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * NPC Actionを取得する 
         * @param {string} id id of NpcAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNpcAction(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpcAction(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのNPC Action一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNpcActionsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNpcActionsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのNPC Actionを作成する 
         * @param {string} projectId project_id of project
         * @param {PostNpcActionsBody} [postNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNpcActions(projectId: string, postNpcActionsBody?: PostNpcActionsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postNpcActions(projectId, postNpcActionsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * NPC Actionを更新する 
         * @param {string} id id of Npc Action
         * @param {PutNpcActionsBody} [putNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putNpcAction(id: string, putNpcActionsBody?: PutNpcActionsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putNpcAction(id, putNpcActionsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NpcActionsApi - factory interface
 * @export
 */
export const NpcActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NpcActionsApiFp(configuration)
    return {
        /**
         * NPC Actionを削除する 
         * @param {string} id id of Npc Action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNpcAction(id: string, options?: any): AxiosPromise<NpcActionResponse> {
            return localVarFp.deleteNpcAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * NPC Actionを取得する 
         * @param {string} id id of NpcAction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcAction(id: string, options?: any): AxiosPromise<NpcActionsResponse> {
            return localVarFp.getNpcAction(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのNPC Action一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNpcActionsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<NpcActionsResponse> {
            return localVarFp.getNpcActionsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのNPC Actionを作成する 
         * @param {string} projectId project_id of project
         * @param {PostNpcActionsBody} [postNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNpcActions(projectId: string, postNpcActionsBody?: PostNpcActionsBody, options?: any): AxiosPromise<NpcActionsResponse> {
            return localVarFp.postNpcActions(projectId, postNpcActionsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * NPC Actionを更新する 
         * @param {string} id id of Npc Action
         * @param {PutNpcActionsBody} [putNpcActionsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNpcAction(id: string, putNpcActionsBody?: PutNpcActionsBody, options?: any): AxiosPromise<NpcActionResponse> {
            return localVarFp.putNpcAction(id, putNpcActionsBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NpcActionsApi - object-oriented interface
 * @export
 * @class NpcActionsApi
 * @extends {BaseAPI}
 */
export class NpcActionsApi extends BaseAPI {
    /**
     * NPC Actionを削除する 
     * @param {string} id id of Npc Action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcActionsApi
     */
    public deleteNpcAction(id: string, options?: AxiosRequestConfig) {
        return NpcActionsApiFp(this.configuration).deleteNpcAction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * NPC Actionを取得する 
     * @param {string} id id of NpcAction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcActionsApi
     */
    public getNpcAction(id: string, options?: AxiosRequestConfig) {
        return NpcActionsApiFp(this.configuration).getNpcAction(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのNPC Action一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcActionsApi
     */
    public getNpcActionsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return NpcActionsApiFp(this.configuration).getNpcActionsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのNPC Actionを作成する 
     * @param {string} projectId project_id of project
     * @param {PostNpcActionsBody} [postNpcActionsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcActionsApi
     */
    public postNpcActions(projectId: string, postNpcActionsBody?: PostNpcActionsBody, options?: AxiosRequestConfig) {
        return NpcActionsApiFp(this.configuration).postNpcActions(projectId, postNpcActionsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * NPC Actionを更新する 
     * @param {string} id id of Npc Action
     * @param {PutNpcActionsBody} [putNpcActionsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NpcActionsApi
     */
    public putNpcAction(id: string, putNpcActionsBody?: PutNpcActionsBody, options?: AxiosRequestConfig) {
        return NpcActionsApiFp(this.configuration).putNpcAction(id, putNpcActionsBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OfficialMailsApi - axios parameter creator
 * @export
 */
export const OfficialMailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとの公式メールを削除する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOfficialMail: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteOfficialMail', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOfficialMail', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールの送信対象を削除する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOfficialMailTarget: async (projectId: string, officialMailId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteOfficialMailTarget', 'projectId', projectId)
            // verify required parameter 'officialMailId' is not null or undefined
            assertParamExists('deleteOfficialMailTarget', 'officialMailId', officialMailId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOfficialMailTarget', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{official_mail_id}/targets/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"official_mail_id"}}`, encodeURIComponent(String(officialMailId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールを取得する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMail: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOfficialMail', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOfficialMail', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールの送信対象を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailTarget: async (projectId: string, officialMailId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOfficialMailTarget', 'projectId', projectId)
            // verify required parameter 'officialMailId' is not null or undefined
            assertParamExists('getOfficialMailTarget', 'officialMailId', officialMailId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOfficialMailTarget', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{official_mail_id}/targets/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"official_mail_id"}}`, encodeURIComponent(String(officialMailId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールの送信対象一覧を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailTargets: async (projectId: string, officialMailId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOfficialMailTargets', 'projectId', projectId)
            // verify required parameter 'officialMailId' is not null or undefined
            assertParamExists('getOfficialMailTargets', 'officialMailId', officialMailId)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{official_mail_id}/targets`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"official_mail_id"}}`, encodeURIComponent(String(officialMailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メール一覧を取得する 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOfficialMailsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールの送信対象を作成する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {PostOfficialMailTargetBody} [postOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficialMailTargets: async (projectId: string, officialMailId: string, postOfficialMailTargetBody?: PostOfficialMailTargetBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postOfficialMailTargets', 'projectId', projectId)
            // verify required parameter 'officialMailId' is not null or undefined
            assertParamExists('postOfficialMailTargets', 'officialMailId', officialMailId)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{official_mail_id}/targets`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"official_mail_id"}}`, encodeURIComponent(String(officialMailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOfficialMailTargetBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールを作成する 
         * @param {string} projectId id of projects
         * @param {PostOfficialMailBody} [postOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficialMails: async (projectId: string, postOfficialMailBody?: PostOfficialMailBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postOfficialMails', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postOfficialMailBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールを更新する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutOfficialMailBody} [putOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOfficialMail: async (projectId: string, id: string, putOfficialMailBody?: PutOfficialMailBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putOfficialMail', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putOfficialMail', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putOfficialMailBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとの公式メールの送信対象を更新する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {PutOfficialMailTargetBody} [putOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOfficialMailTarget: async (projectId: string, officialMailId: string, id: string, putOfficialMailTargetBody?: PutOfficialMailTargetBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putOfficialMailTarget', 'projectId', projectId)
            // verify required parameter 'officialMailId' is not null or undefined
            assertParamExists('putOfficialMailTarget', 'officialMailId', officialMailId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putOfficialMailTarget', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/official_mails/{official_mail_id}/targets/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"official_mail_id"}}`, encodeURIComponent(String(officialMailId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putOfficialMailTargetBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfficialMailsApi - functional programming interface
 * @export
 */
export const OfficialMailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfficialMailsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとの公式メールを削除する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOfficialMail(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOfficialMail(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールの送信対象を削除する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailTargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOfficialMailTarget(projectId, officialMailId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールを取得する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficialMail(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficialMail(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールの送信対象を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailTargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficialMailTarget(projectId, officialMailId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールの送信対象一覧を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficialMailTargets(projectId: string, officialMailId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailTargetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficialMailTargets(projectId, officialMailId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メール一覧を取得する 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfficialMailsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfficialMailsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールの送信対象を作成する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {PostOfficialMailTargetBody} [postOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOfficialMailTargets(projectId: string, officialMailId: string, postOfficialMailTargetBody?: PostOfficialMailTargetBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailTargetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOfficialMailTargets(projectId, officialMailId, postOfficialMailTargetBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールを作成する 
         * @param {string} projectId id of projects
         * @param {PostOfficialMailBody} [postOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOfficialMails(projectId: string, postOfficialMailBody?: PostOfficialMailBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOfficialMails(projectId, postOfficialMailBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールを更新する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutOfficialMailBody} [putOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOfficialMail(projectId: string, id: string, putOfficialMailBody?: PutOfficialMailBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOfficialMail(projectId, id, putOfficialMailBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとの公式メールの送信対象を更新する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {PutOfficialMailTargetBody} [putOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOfficialMailTarget(projectId: string, officialMailId: string, id: string, putOfficialMailTargetBody?: PutOfficialMailTargetBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfficialMailTargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOfficialMailTarget(projectId, officialMailId, id, putOfficialMailTargetBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfficialMailsApi - factory interface
 * @export
 */
export const OfficialMailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfficialMailsApiFp(configuration)
    return {
        /**
         * プロジェクトごとの公式メールを削除する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOfficialMail(projectId: string, id: string, options?: any): AxiosPromise<OfficialMailResponse> {
            return localVarFp.deleteOfficialMail(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールの送信対象を削除する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: any): AxiosPromise<OfficialMailTargetResponse> {
            return localVarFp.deleteOfficialMailTarget(projectId, officialMailId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールを取得する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMail(projectId: string, id: string, options?: any): AxiosPromise<OfficialMailResponse> {
            return localVarFp.getOfficialMail(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールの送信対象を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: any): AxiosPromise<OfficialMailTargetResponse> {
            return localVarFp.getOfficialMailTarget(projectId, officialMailId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールの送信対象一覧を取得する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailTargets(projectId: string, officialMailId: string, page?: number, perPage?: number, options?: any): AxiosPromise<OfficialMailTargetsResponse> {
            return localVarFp.getOfficialMailTargets(projectId, officialMailId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メール一覧を取得する 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfficialMailsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<OfficialMailsResponse> {
            return localVarFp.getOfficialMailsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールの送信対象を作成する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {PostOfficialMailTargetBody} [postOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficialMailTargets(projectId: string, officialMailId: string, postOfficialMailTargetBody?: PostOfficialMailTargetBody, options?: any): AxiosPromise<OfficialMailTargetsResponse> {
            return localVarFp.postOfficialMailTargets(projectId, officialMailId, postOfficialMailTargetBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールを作成する 
         * @param {string} projectId id of projects
         * @param {PostOfficialMailBody} [postOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOfficialMails(projectId: string, postOfficialMailBody?: PostOfficialMailBody, options?: any): AxiosPromise<OfficialMailResponse> {
            return localVarFp.postOfficialMails(projectId, postOfficialMailBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールを更新する 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutOfficialMailBody} [putOfficialMailBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOfficialMail(projectId: string, id: string, putOfficialMailBody?: PutOfficialMailBody, options?: any): AxiosPromise<OfficialMailResponse> {
            return localVarFp.putOfficialMail(projectId, id, putOfficialMailBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとの公式メールの送信対象を更新する 
         * @param {string} projectId id of projects
         * @param {string} officialMailId id of official_mails
         * @param {string} id id
         * @param {PutOfficialMailTargetBody} [putOfficialMailTargetBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOfficialMailTarget(projectId: string, officialMailId: string, id: string, putOfficialMailTargetBody?: PutOfficialMailTargetBody, options?: any): AxiosPromise<OfficialMailTargetResponse> {
            return localVarFp.putOfficialMailTarget(projectId, officialMailId, id, putOfficialMailTargetBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfficialMailsApi - object-oriented interface
 * @export
 * @class OfficialMailsApi
 * @extends {BaseAPI}
 */
export class OfficialMailsApi extends BaseAPI {
    /**
     * プロジェクトごとの公式メールを削除する 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public deleteOfficialMail(projectId: string, id: string, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).deleteOfficialMail(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールの送信対象を削除する 
     * @param {string} projectId id of projects
     * @param {string} officialMailId id of official_mails
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public deleteOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).deleteOfficialMailTarget(projectId, officialMailId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールを取得する 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public getOfficialMail(projectId: string, id: string, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).getOfficialMail(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールの送信対象を取得する 
     * @param {string} projectId id of projects
     * @param {string} officialMailId id of official_mails
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public getOfficialMailTarget(projectId: string, officialMailId: string, id: string, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).getOfficialMailTarget(projectId, officialMailId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールの送信対象一覧を取得する 
     * @param {string} projectId id of projects
     * @param {string} officialMailId id of official_mails
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public getOfficialMailTargets(projectId: string, officialMailId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).getOfficialMailTargets(projectId, officialMailId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メール一覧を取得する 
     * @param {string} projectId id of projects
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public getOfficialMailsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).getOfficialMailsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールの送信対象を作成する 
     * @param {string} projectId id of projects
     * @param {string} officialMailId id of official_mails
     * @param {PostOfficialMailTargetBody} [postOfficialMailTargetBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public postOfficialMailTargets(projectId: string, officialMailId: string, postOfficialMailTargetBody?: PostOfficialMailTargetBody, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).postOfficialMailTargets(projectId, officialMailId, postOfficialMailTargetBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールを作成する 
     * @param {string} projectId id of projects
     * @param {PostOfficialMailBody} [postOfficialMailBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public postOfficialMails(projectId: string, postOfficialMailBody?: PostOfficialMailBody, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).postOfficialMails(projectId, postOfficialMailBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールを更新する 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {PutOfficialMailBody} [putOfficialMailBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public putOfficialMail(projectId: string, id: string, putOfficialMailBody?: PutOfficialMailBody, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).putOfficialMail(projectId, id, putOfficialMailBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとの公式メールの送信対象を更新する 
     * @param {string} projectId id of projects
     * @param {string} officialMailId id of official_mails
     * @param {string} id id
     * @param {PutOfficialMailTargetBody} [putOfficialMailTargetBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfficialMailsApi
     */
    public putOfficialMailTarget(projectId: string, officialMailId: string, id: string, putOfficialMailTargetBody?: PutOfficialMailTargetBody, options?: AxiosRequestConfig) {
        return OfficialMailsApiFp(this.configuration).putOfficialMailTarget(projectId, officialMailId, id, putOfficialMailTargetBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlansApi - axios parameter creator
 * @export
 */
export const PlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プラン一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlansApi - functional programming interface
 * @export
 */
export const PlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlansApiAxiosParamCreator(configuration)
    return {
        /**
         * プラン一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlans(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlans(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlansApi - factory interface
 * @export
 */
export const PlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlansApiFp(configuration)
    return {
        /**
         * プラン一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans(page?: number, perPage?: number, options?: any): AxiosPromise<PlansResponse> {
            return localVarFp.getPlans(page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlansApi - object-oriented interface
 * @export
 * @class PlansApi
 * @extends {BaseAPI}
 */
export class PlansApi extends BaseAPI {
    /**
     * プラン一覧を取得する 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public getPlans(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).getPlans(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectServiceplanAppliesApi - axios parameter creator
 * @export
 */
export const ProjectServiceplanAppliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトサービスプラン申請の削除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectServiceplanApply: async (id: string, appliesId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProjectServiceplanApply', 'id', id)
            // verify required parameter 'appliesId' is not null or undefined
            assertParamExists('deleteProjectServiceplanApply', 'appliesId', appliesId)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/{applies_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"applies_id"}}`, encodeURIComponent(String(appliesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectServiceplanApplies: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/projects/serviceplan/applies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanApplies: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectServiceplanApplies', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の最新取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanAppliesLatest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectServiceplanAppliesLatest', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/latest`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の取得を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanApply: async (id: string, appliesId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectServiceplanApply', 'id', id)
            // verify required parameter 'appliesId' is not null or undefined
            assertParamExists('getProjectServiceplanApply', 'appliesId', appliesId)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/{applies_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"applies_id"}}`, encodeURIComponent(String(appliesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectServiceplanAppliesBody} [postProjectServiceplanAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplies: async (id: string, postProjectServiceplanAppliesBody?: PostProjectServiceplanAppliesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectServiceplanApplies', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/apply`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectServiceplanAppliesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の承認を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplyApproved: async (id: string, appliesId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectServiceplanApplyApproved', 'id', id)
            // verify required parameter 'appliesId' is not null or undefined
            assertParamExists('postProjectServiceplanApplyApproved', 'appliesId', appliesId)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/{applies_id}/approved`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"applies_id"}}`, encodeURIComponent(String(appliesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の承認解除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplyUnapproved: async (id: string, appliesId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectServiceplanApplyUnapproved', 'id', id)
            // verify required parameter 'appliesId' is not null or undefined
            assertParamExists('postProjectServiceplanApplyUnapproved', 'appliesId', appliesId)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/{applies_id}/unapproved`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"applies_id"}}`, encodeURIComponent(String(appliesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトサービスプラン申請の更新を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {PutProjectServiceplanApplyBody} [putProjectServiceplanApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectServiceplanApply: async (id: string, appliesId: string, putProjectServiceplanApplyBody?: PutProjectServiceplanApplyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectServiceplanApply', 'id', id)
            // verify required parameter 'appliesId' is not null or undefined
            assertParamExists('putProjectServiceplanApply', 'appliesId', appliesId)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan/applies/{applies_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"applies_id"}}`, encodeURIComponent(String(appliesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectServiceplanApplyBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectServiceplanAppliesApi - functional programming interface
 * @export
 */
export const ProjectServiceplanAppliesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectServiceplanAppliesApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトサービスプラン申請の削除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectServiceplanApply(id: string, appliesId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectServiceplanApply(id, appliesId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectServiceplanApplies(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanAppliesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectServiceplanApplies(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectServiceplanApplies(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanAppliesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectServiceplanApplies(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の最新取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectServiceplanAppliesLatest(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectServiceplanAppliesLatest(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の取得を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectServiceplanApply(id: string, appliesId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectServiceplanApply(id, appliesId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectServiceplanAppliesBody} [postProjectServiceplanAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectServiceplanApplies(id: string, postProjectServiceplanAppliesBody?: PostProjectServiceplanAppliesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectServiceplanApplies(id, postProjectServiceplanAppliesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の承認を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectServiceplanApplyApproved(id: string, appliesId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectServiceplanApplyApproved(id, appliesId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の承認解除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectServiceplanApplyUnapproved(id: string, appliesId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectServiceplanApplyUnapproved(id, appliesId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトサービスプラン申請の更新を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {PutProjectServiceplanApplyBody} [putProjectServiceplanApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectServiceplanApply(id: string, appliesId: string, putProjectServiceplanApplyBody?: PutProjectServiceplanApplyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectServiceplanApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectServiceplanApply(id, appliesId, putProjectServiceplanApplyBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectServiceplanAppliesApi - factory interface
 * @export
 */
export const ProjectServiceplanAppliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectServiceplanAppliesApiFp(configuration)
    return {
        /**
         * プロジェクトサービスプラン申請の削除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectServiceplanApply(id: string, appliesId: string, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.deleteProjectServiceplanApply(id, appliesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 全プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectServiceplanApplies(page?: number, perPage?: number, options?: any): AxiosPromise<ProjectServiceplanAppliesResponse> {
            return localVarFp.getAllProjectServiceplanApplies(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanApplies(id: string, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectServiceplanAppliesResponse> {
            return localVarFp.getProjectServiceplanApplies(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の最新取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanAppliesLatest(id: string, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.getProjectServiceplanAppliesLatest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の取得を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectServiceplanApply(id: string, appliesId: string, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.getProjectServiceplanApply(id, appliesId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectServiceplanAppliesBody} [postProjectServiceplanAppliesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplies(id: string, postProjectServiceplanAppliesBody?: PostProjectServiceplanAppliesBody, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.postProjectServiceplanApplies(id, postProjectServiceplanAppliesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の承認を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplyApproved(id: string, appliesId: string, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.postProjectServiceplanApplyApproved(id, appliesId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の承認解除を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectServiceplanApplyUnapproved(id: string, appliesId: string, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.postProjectServiceplanApplyUnapproved(id, appliesId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトサービスプラン申請の更新を要求する。 
         * @param {string} id id of project
         * @param {string} appliesId id of ProjectServiceplanApply
         * @param {PutProjectServiceplanApplyBody} [putProjectServiceplanApplyBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectServiceplanApply(id: string, appliesId: string, putProjectServiceplanApplyBody?: PutProjectServiceplanApplyBody, options?: any): AxiosPromise<ProjectServiceplanApplyResponse> {
            return localVarFp.putProjectServiceplanApply(id, appliesId, putProjectServiceplanApplyBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectServiceplanAppliesApi - object-oriented interface
 * @export
 * @class ProjectServiceplanAppliesApi
 * @extends {BaseAPI}
 */
export class ProjectServiceplanAppliesApi extends BaseAPI {
    /**
     * プロジェクトサービスプラン申請の削除を要求する。 
     * @param {string} id id of project
     * @param {string} appliesId id of ProjectServiceplanApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public deleteProjectServiceplanApply(id: string, appliesId: string, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).deleteProjectServiceplanApply(id, appliesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全プロジェクトサービスプラン申請の一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public getAllProjectServiceplanApplies(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).getAllProjectServiceplanApplies(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の一覧取得を要求する。 
     * @param {string} id id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public getProjectServiceplanApplies(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).getProjectServiceplanApplies(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の最新取得を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public getProjectServiceplanAppliesLatest(id: string, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).getProjectServiceplanAppliesLatest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の取得を要求する。 
     * @param {string} id id of project
     * @param {string} appliesId id of ProjectServiceplanApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public getProjectServiceplanApply(id: string, appliesId: string, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).getProjectServiceplanApply(id, appliesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の作成を要求する。 
     * @param {string} id id of project
     * @param {PostProjectServiceplanAppliesBody} [postProjectServiceplanAppliesBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public postProjectServiceplanApplies(id: string, postProjectServiceplanAppliesBody?: PostProjectServiceplanAppliesBody, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).postProjectServiceplanApplies(id, postProjectServiceplanAppliesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の承認を要求する。 
     * @param {string} id id of project
     * @param {string} appliesId id of ProjectServiceplanApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public postProjectServiceplanApplyApproved(id: string, appliesId: string, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).postProjectServiceplanApplyApproved(id, appliesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の承認解除を要求する。 
     * @param {string} id id of project
     * @param {string} appliesId id of ProjectServiceplanApply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public postProjectServiceplanApplyUnapproved(id: string, appliesId: string, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).postProjectServiceplanApplyUnapproved(id, appliesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトサービスプラン申請の更新を要求する。 
     * @param {string} id id of project
     * @param {string} appliesId id of ProjectServiceplanApply
     * @param {PutProjectServiceplanApplyBody} [putProjectServiceplanApplyBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectServiceplanAppliesApi
     */
    public putProjectServiceplanApply(id: string, appliesId: string, putProjectServiceplanApplyBody?: PutProjectServiceplanApplyBody, options?: AxiosRequestConfig) {
        return ProjectServiceplanAppliesApiFp(this.configuration).putProjectServiceplanApply(id, appliesId, putProjectServiceplanApplyBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトの論理削除を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProject', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの削除を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectBinaryfile: async (id: string, binaryfileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProjectBinaryfile', 'id', id)
            // verify required parameter 'binaryfileId' is not null or undefined
            assertParamExists('deleteProjectBinaryfile', 'binaryfileId', binaryfileId)
            const localVarPath = `/admin/v1/projects/{id}/binaryfiles/{binaryfile_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"binaryfile_id"}}`, encodeURIComponent(String(binaryfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProject', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの取得を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfile: async (id: string, binaryfileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectBinaryfile', 'id', id)
            // verify required parameter 'binaryfileId' is not null or undefined
            assertParamExists('getProjectBinaryfile', 'binaryfileId', binaryfileId)
            const localVarPath = `/admin/v1/projects/{id}/binaryfiles/{binaryfile_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"binaryfile_id"}}`, encodeURIComponent(String(binaryfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfiles: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/projects/binaryfiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfilesByProject: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectBinaryfilesByProject', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/binaryfiles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの一覧取得を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (tenantId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getProjects', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/projects`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectBinaryfilesByProjectBody} [postProjectBinaryfilesByProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectBinaryfilesByProject: async (id: string, postProjectBinaryfilesByProjectBody?: PostProjectBinaryfilesByProjectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectBinaryfilesByProject', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/binaryfiles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectBinaryfilesByProjectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの作成を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {PostProjectsBody} [postProjectsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects: async (tenantId: string, postProjectsBody?: PostProjectsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('postProjects', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/projects`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectBody} [putProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProject: async (id: string, putProjectBody?: PutProjectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProject', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトバイナリファイルの更新を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {PutProjectBinaryfileBody} [putProjectBinaryfileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectBinaryfile: async (id: string, binaryfileId: string, putProjectBinaryfileBody?: PutProjectBinaryfileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectBinaryfile', 'id', id)
            // verify required parameter 'binaryfileId' is not null or undefined
            assertParamExists('putProjectBinaryfile', 'binaryfileId', binaryfileId)
            const localVarPath = `/admin/v1/projects/{id}/binaryfiles/{binaryfile_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"binaryfile_id"}}`, encodeURIComponent(String(binaryfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectBinaryfileBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトのメンテナンスモード開始を要求する。 
         * @param {string} id id of project
         * @param {PutProjectMaintenanceStartBody} [putProjectMaintenanceStartBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectMaintenanceStart: async (id: string, putProjectMaintenanceStartBody?: PutProjectMaintenanceStartBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectMaintenanceStart', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/maintenance/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectMaintenanceStartBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトのメンテナンスモード終了を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectMaintenanceStop: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectMaintenanceStop', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/maintenance/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトのサービスプラン更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectServiceplanBody} [putProjectServiceplanBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectServiceplan: async (id: string, putProjectServiceplanBody?: PutProjectServiceplanBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectServiceplan', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/serviceplan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putProjectServiceplanBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの開始を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectStart: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectStart', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトの停止を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectStop: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProjectStop', 'id', id)
            const localVarPath = `/admin/v1/projects/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトの論理削除を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの削除を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectBinaryfile(id: string, binaryfileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectBinaryfile(id, binaryfileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの取得を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBinaryfile(id: string, binaryfileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBinaryfile(id, binaryfileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBinaryfiles(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBinaryfiles(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBinaryfilesByProject(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBinaryfilesByProject(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの一覧取得を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(tenantId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectBinaryfilesByProjectBody} [postProjectBinaryfilesByProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectBinaryfilesByProject(id: string, postProjectBinaryfilesByProjectBody?: PostProjectBinaryfilesByProjectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectBinaryfilesByProject(id, postProjectBinaryfilesByProjectBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの作成を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {PostProjectsBody} [postProjectsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjects(tenantId: string, postProjectsBody?: PostProjectsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjects(tenantId, postProjectsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectBody} [putProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProject(id: string, putProjectBody?: PutProjectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProject(id, putProjectBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトバイナリファイルの更新を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {PutProjectBinaryfileBody} [putProjectBinaryfileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectBinaryfile(id: string, binaryfileId: string, putProjectBinaryfileBody?: PutProjectBinaryfileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBinaryfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectBinaryfile(id, binaryfileId, putProjectBinaryfileBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトのメンテナンスモード開始を要求する。 
         * @param {string} id id of project
         * @param {PutProjectMaintenanceStartBody} [putProjectMaintenanceStartBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectMaintenanceStart(id: string, putProjectMaintenanceStartBody?: PutProjectMaintenanceStartBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectMaintenanceStart(id, putProjectMaintenanceStartBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトのメンテナンスモード終了を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectMaintenanceStop(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectMaintenanceStop(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトのサービスプラン更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectServiceplanBody} [putProjectServiceplanBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectServiceplan(id: string, putProjectServiceplanBody?: PutProjectServiceplanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectServiceplan(id, putProjectServiceplanBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの開始を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectStart(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectStart(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトの停止を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectStop(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectStop(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * プロジェクトの論理削除を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.deleteProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの削除を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectBinaryfile(id: string, binaryfileId: string, options?: any): AxiosPromise<ProjectBinaryfileResponse> {
            return localVarFp.deleteProjectBinaryfile(id, binaryfileId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの取得を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.getProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの取得を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfile(id: string, binaryfileId: string, options?: any): AxiosPromise<ProjectBinaryfileResponse> {
            return localVarFp.getProjectBinaryfile(id, binaryfileId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfiles(page?: number, perPage?: number, options?: any): AxiosPromise<ProjectBinaryfilesResponse> {
            return localVarFp.getProjectBinaryfiles(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの一覧取得を要求する。 
         * @param {string} id id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBinaryfilesByProject(id: string, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectBinaryfilesResponse> {
            return localVarFp.getProjectBinaryfilesByProject(id, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの一覧取得を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(tenantId: string, page?: number, perPage?: number, options?: any): AxiosPromise<ProjectsResponse> {
            return localVarFp.getProjects(tenantId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの作成を要求する。 
         * @param {string} id id of project
         * @param {PostProjectBinaryfilesByProjectBody} [postProjectBinaryfilesByProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectBinaryfilesByProject(id: string, postProjectBinaryfilesByProjectBody?: PostProjectBinaryfilesByProjectBody, options?: any): AxiosPromise<ProjectBinaryfileResponse> {
            return localVarFp.postProjectBinaryfilesByProject(id, postProjectBinaryfilesByProjectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの作成を要求する。 
         * @param {string} tenantId tenant_id of tenant
         * @param {PostProjectsBody} [postProjectsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects(tenantId: string, postProjectsBody?: PostProjectsBody, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.postProjects(tenantId, postProjectsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectBody} [putProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProject(id: string, putProjectBody?: PutProjectBody, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProject(id, putProjectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトバイナリファイルの更新を要求する。 
         * @param {string} id id of project
         * @param {string} binaryfileId binaryfile_id of binaryfile
         * @param {PutProjectBinaryfileBody} [putProjectBinaryfileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectBinaryfile(id: string, binaryfileId: string, putProjectBinaryfileBody?: PutProjectBinaryfileBody, options?: any): AxiosPromise<ProjectBinaryfileResponse> {
            return localVarFp.putProjectBinaryfile(id, binaryfileId, putProjectBinaryfileBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトのメンテナンスモード開始を要求する。 
         * @param {string} id id of project
         * @param {PutProjectMaintenanceStartBody} [putProjectMaintenanceStartBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectMaintenanceStart(id: string, putProjectMaintenanceStartBody?: PutProjectMaintenanceStartBody, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProjectMaintenanceStart(id, putProjectMaintenanceStartBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトのメンテナンスモード終了を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectMaintenanceStop(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProjectMaintenanceStop(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトのサービスプラン更新を要求する。 
         * @param {string} id id of project
         * @param {PutProjectServiceplanBody} [putProjectServiceplanBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectServiceplan(id: string, putProjectServiceplanBody?: PutProjectServiceplanBody, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProjectServiceplan(id, putProjectServiceplanBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの開始を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectStart(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProjectStart(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトの停止を要求する。 
         * @param {string} id id of project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectStop(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.putProjectStop(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * プロジェクトの論理削除を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの削除を要求する。 
     * @param {string} id id of project
     * @param {string} binaryfileId binaryfile_id of binaryfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProjectBinaryfile(id: string, binaryfileId: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteProjectBinaryfile(id, binaryfileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの取得を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの取得を要求する。 
     * @param {string} id id of project
     * @param {string} binaryfileId binaryfile_id of binaryfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectBinaryfile(id: string, binaryfileId: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectBinaryfile(id, binaryfileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectBinaryfiles(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectBinaryfiles(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの一覧取得を要求する。 
     * @param {string} id id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectBinaryfilesByProject(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectBinaryfilesByProject(id, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの一覧取得を要求する。 
     * @param {string} tenantId tenant_id of tenant
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjects(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjects(tenantId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの作成を要求する。 
     * @param {string} id id of project
     * @param {PostProjectBinaryfilesByProjectBody} [postProjectBinaryfilesByProjectBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public postProjectBinaryfilesByProject(id: string, postProjectBinaryfilesByProjectBody?: PostProjectBinaryfilesByProjectBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).postProjectBinaryfilesByProject(id, postProjectBinaryfilesByProjectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの作成を要求する。 
     * @param {string} tenantId tenant_id of tenant
     * @param {PostProjectsBody} [postProjectsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public postProjects(tenantId: string, postProjectsBody?: PostProjectsBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).postProjects(tenantId, postProjectsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの更新を要求する。 
     * @param {string} id id of project
     * @param {PutProjectBody} [putProjectBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProject(id: string, putProjectBody?: PutProjectBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProject(id, putProjectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトバイナリファイルの更新を要求する。 
     * @param {string} id id of project
     * @param {string} binaryfileId binaryfile_id of binaryfile
     * @param {PutProjectBinaryfileBody} [putProjectBinaryfileBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectBinaryfile(id: string, binaryfileId: string, putProjectBinaryfileBody?: PutProjectBinaryfileBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectBinaryfile(id, binaryfileId, putProjectBinaryfileBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトのメンテナンスモード開始を要求する。 
     * @param {string} id id of project
     * @param {PutProjectMaintenanceStartBody} [putProjectMaintenanceStartBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectMaintenanceStart(id: string, putProjectMaintenanceStartBody?: PutProjectMaintenanceStartBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectMaintenanceStart(id, putProjectMaintenanceStartBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトのメンテナンスモード終了を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectMaintenanceStop(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectMaintenanceStop(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトのサービスプラン更新を要求する。 
     * @param {string} id id of project
     * @param {PutProjectServiceplanBody} [putProjectServiceplanBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectServiceplan(id: string, putProjectServiceplanBody?: PutProjectServiceplanBody, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectServiceplan(id, putProjectServiceplanBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの開始を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectStart(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectStart(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトの停止を要求する。 
     * @param {string} id id of project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public putProjectStop(id: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).putProjectStop(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PushMessagesApi - axios parameter creator
 * @export
 */
export const PushMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プロジェクトごとのプッシュ通知の削除を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushMessage: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deletePushMessage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePushMessage', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/push_messages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのプッシュ通知の詳細取得を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushMessage: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getPushMessage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPushMessage', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/push_messages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのプッシュ通知の一覧取得を要求する。 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushMessages: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getPushMessages', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/push_messages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのプッシュ通知の作成を要求する。 
         * @param {string} projectId id of projects
         * @param {PostPushMessageBody} [postPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushMessages: async (projectId: string, postPushMessageBody?: PostPushMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postPushMessages', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/push_messages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPushMessageBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのプッシュ通知の更新を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutPushMessageBody} [putPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPushMessage: async (projectId: string, id: string, putPushMessageBody?: PutPushMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putPushMessage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPushMessage', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/push_messages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putPushMessageBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushMessagesApi - functional programming interface
 * @export
 */
export const PushMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PushMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * プロジェクトごとのプッシュ通知の削除を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePushMessage(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePushMessage(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのプッシュ通知の詳細取得を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPushMessage(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPushMessage(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのプッシュ通知の一覧取得を要求する。 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPushMessages(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPushMessages(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのプッシュ通知の作成を要求する。 
         * @param {string} projectId id of projects
         * @param {PostPushMessageBody} [postPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPushMessages(projectId: string, postPushMessageBody?: PostPushMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPushMessages(projectId, postPushMessageBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのプッシュ通知の更新を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutPushMessageBody} [putPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPushMessage(projectId: string, id: string, putPushMessageBody?: PutPushMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPushMessage(projectId, id, putPushMessageBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PushMessagesApi - factory interface
 * @export
 */
export const PushMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PushMessagesApiFp(configuration)
    return {
        /**
         * プロジェクトごとのプッシュ通知の削除を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePushMessage(projectId: string, id: string, options?: any): AxiosPromise<PushMessageResponse> {
            return localVarFp.deletePushMessage(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのプッシュ通知の詳細取得を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushMessage(projectId: string, id: string, options?: any): AxiosPromise<PushMessageResponse> {
            return localVarFp.getPushMessage(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのプッシュ通知の一覧取得を要求する。 
         * @param {string} projectId id of projects
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPushMessages(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<PushMessagesResponse> {
            return localVarFp.getPushMessages(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのプッシュ通知の作成を要求する。 
         * @param {string} projectId id of projects
         * @param {PostPushMessageBody} [postPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPushMessages(projectId: string, postPushMessageBody?: PostPushMessageBody, options?: any): AxiosPromise<PushMessageResponse> {
            return localVarFp.postPushMessages(projectId, postPushMessageBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのプッシュ通知の更新を要求する。 
         * @param {string} projectId id of projects
         * @param {string} id id
         * @param {PutPushMessageBody} [putPushMessageBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPushMessage(projectId: string, id: string, putPushMessageBody?: PutPushMessageBody, options?: any): AxiosPromise<PushMessageResponse> {
            return localVarFp.putPushMessage(projectId, id, putPushMessageBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PushMessagesApi - object-oriented interface
 * @export
 * @class PushMessagesApi
 * @extends {BaseAPI}
 */
export class PushMessagesApi extends BaseAPI {
    /**
     * プロジェクトごとのプッシュ通知の削除を要求する。 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushMessagesApi
     */
    public deletePushMessage(projectId: string, id: string, options?: AxiosRequestConfig) {
        return PushMessagesApiFp(this.configuration).deletePushMessage(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのプッシュ通知の詳細取得を要求する。 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushMessagesApi
     */
    public getPushMessage(projectId: string, id: string, options?: AxiosRequestConfig) {
        return PushMessagesApiFp(this.configuration).getPushMessage(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのプッシュ通知の一覧取得を要求する。 
     * @param {string} projectId id of projects
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushMessagesApi
     */
    public getPushMessages(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return PushMessagesApiFp(this.configuration).getPushMessages(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのプッシュ通知の作成を要求する。 
     * @param {string} projectId id of projects
     * @param {PostPushMessageBody} [postPushMessageBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushMessagesApi
     */
    public postPushMessages(projectId: string, postPushMessageBody?: PostPushMessageBody, options?: AxiosRequestConfig) {
        return PushMessagesApiFp(this.configuration).postPushMessages(projectId, postPushMessageBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのプッシュ通知の更新を要求する。 
     * @param {string} projectId id of projects
     * @param {string} id id
     * @param {PutPushMessageBody} [putPushMessageBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushMessagesApi
     */
    public putPushMessage(projectId: string, id: string, putPushMessageBody?: PutPushMessageBody, options?: AxiosRequestConfig) {
        return PushMessagesApiFp(this.configuration).putPushMessage(projectId, id, putPushMessageBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RanksApi - axios parameter creator
 * @export
 */
export const RanksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ランクを削除する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRank: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRank', 'id', id)
            const localVarPath = `/admin/v1/ranks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ランクを取得する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRank: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRank', 'id', id)
            const localVarPath = `/admin/v1/ranks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのランク一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanksByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getRanksByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/ranks/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのランクを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRanksBody} [postRanksBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRanks: async (projectId: string, postRanksBody?: PostRanksBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postRanks', 'projectId', projectId)
            const localVarPath = `/admin/v1/ranks/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRanksBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ランクを更新する 
         * @param {string} id id of rank
         * @param {PutRankBody} [putRankBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRank: async (id: string, putRankBody?: PutRankBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRank', 'id', id)
            const localVarPath = `/admin/v1/ranks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRankBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RanksApi - functional programming interface
 * @export
 */
export const RanksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RanksApiAxiosParamCreator(configuration)
    return {
        /**
         * ランクを削除する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRank(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRank(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ランクを取得する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRank(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRank(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのランク一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRanksByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RanksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRanksByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのランクを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRanksBody} [postRanksBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRanks(projectId: string, postRanksBody?: PostRanksBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRanks(projectId, postRanksBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ランクを更新する 
         * @param {string} id id of rank
         * @param {PutRankBody} [putRankBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRank(id: string, putRankBody?: PutRankBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRank(id, putRankBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RanksApi - factory interface
 * @export
 */
export const RanksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RanksApiFp(configuration)
    return {
        /**
         * ランクを削除する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRank(id: string, options?: any): AxiosPromise<RankResponse> {
            return localVarFp.deleteRank(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ランクを取得する 
         * @param {string} id id of rank
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRank(id: string, options?: any): AxiosPromise<RankResponse> {
            return localVarFp.getRank(id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのランク一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanksByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<RanksResponse> {
            return localVarFp.getRanksByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのランクを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRanksBody} [postRanksBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRanks(projectId: string, postRanksBody?: PostRanksBody, options?: any): AxiosPromise<RankResponse> {
            return localVarFp.postRanks(projectId, postRanksBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ランクを更新する 
         * @param {string} id id of rank
         * @param {PutRankBody} [putRankBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRank(id: string, putRankBody?: PutRankBody, options?: any): AxiosPromise<RankResponse> {
            return localVarFp.putRank(id, putRankBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RanksApi - object-oriented interface
 * @export
 * @class RanksApi
 * @extends {BaseAPI}
 */
export class RanksApi extends BaseAPI {
    /**
     * ランクを削除する 
     * @param {string} id id of rank
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanksApi
     */
    public deleteRank(id: string, options?: AxiosRequestConfig) {
        return RanksApiFp(this.configuration).deleteRank(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ランクを取得する 
     * @param {string} id id of rank
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanksApi
     */
    public getRank(id: string, options?: AxiosRequestConfig) {
        return RanksApiFp(this.configuration).getRank(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのランク一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanksApi
     */
    public getRanksByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return RanksApiFp(this.configuration).getRanksByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのランクを作成する 
     * @param {string} projectId project_id of project
     * @param {PostRanksBody} [postRanksBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanksApi
     */
    public postRanks(projectId: string, postRanksBody?: PostRanksBody, options?: AxiosRequestConfig) {
        return RanksApiFp(this.configuration).postRanks(projectId, postRanksBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ランクを更新する 
     * @param {string} id id of rank
     * @param {PutRankBody} [putRankBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RanksApi
     */
    public putRank(id: string, putRankBody?: PutRankBody, options?: AxiosRequestConfig) {
        return RanksApiFp(this.configuration).putRank(id, putRankBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DAUを取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDau: async (page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/report/dau`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (termStartAt !== undefined) {
                localVarQueryParameter['term_start_at'] = (termStartAt as any instanceof Date) ?
                    (termStartAt as any).toISOString().substr(0,10) :
                    termStartAt;
            }

            if (termEndAt !== undefined) {
                localVarQueryParameter['term_end_at'] = (termEndAt as any instanceof Date) ?
                    (termEndAt as any).toISOString().substr(0,10) :
                    termEndAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定プロジェクトのDAUを取得する 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDauByProject: async (projectId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getReportDauByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/report/dau/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (termStartAt !== undefined) {
                localVarQueryParameter['term_start_at'] = (termStartAt as any instanceof Date) ?
                    (termStartAt as any).toISOString().substr(0,10) :
                    termStartAt;
            }

            if (termEndAt !== undefined) {
                localVarQueryParameter['term_end_at'] = (termEndAt as any instanceof Date) ?
                    (termEndAt as any).toISOString().substr(0,10) :
                    termEndAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 特定テナントのDAU（全体・プロジェクト別）を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDauByTenant: async (tenantId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getReportDauByTenant', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/report/dau/tenant/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (termStartAt !== undefined) {
                localVarQueryParameter['term_start_at'] = (termStartAt as any instanceof Date) ?
                    (termStartAt as any).toISOString().substr(0,10) :
                    termStartAt;
            }

            if (termEndAt !== undefined) {
                localVarQueryParameter['term_end_at'] = (termEndAt as any instanceof Date) ?
                    (termEndAt as any).toISOString().substr(0,10) :
                    termEndAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * DAUを取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDau(page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDauResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDau(page, perPage, termStartAt, termEndAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 特定プロジェクトのDAUを取得する 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDauByProject(projectId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDauProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDauByProject(projectId, page, perPage, termStartAt, termEndAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 特定テナントのDAU（全体・プロジェクト別）を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDauByTenant(tenantId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportDauTenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDauByTenant(tenantId, page, perPage, termStartAt, termEndAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * DAUを取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDau(page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: any): AxiosPromise<ReportDauResponse> {
            return localVarFp.getReportDau(page, perPage, termStartAt, termEndAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定プロジェクトのDAUを取得する 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDauByProject(projectId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: any): AxiosPromise<ReportDauProjectResponse> {
            return localVarFp.getReportDauByProject(projectId, page, perPage, termStartAt, termEndAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 特定テナントのDAU（全体・プロジェクト別）を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {string} [termStartAt] 開始日
         * @param {string} [termEndAt] 終了日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDauByTenant(tenantId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: any): AxiosPromise<ReportDauTenantResponse> {
            return localVarFp.getReportDauByTenant(tenantId, page, perPage, termStartAt, termEndAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * DAUを取得する 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {string} [termStartAt] 開始日
     * @param {string} [termEndAt] 終了日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getReportDau(page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getReportDau(page, perPage, termStartAt, termEndAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定プロジェクトのDAUを取得する 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {string} [termStartAt] 開始日
     * @param {string} [termEndAt] 終了日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getReportDauByProject(projectId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getReportDauByProject(projectId, page, perPage, termStartAt, termEndAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 特定テナントのDAU（全体・プロジェクト別）を取得する 
     * @param {string} tenantId tenant_id of tenant
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {string} [termStartAt] 開始日
     * @param {string} [termEndAt] 終了日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getReportDauByTenant(tenantId: string, page?: number, perPage?: number, termStartAt?: string, termEndAt?: string, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getReportDauByTenant(tenantId, page, perPage, termStartAt, termEndAt, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RewardsApi - axios parameter creator
 * @export
 */
export const RewardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リワードを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReward: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リワードアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRewarditem: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteRewarditem', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRewarditem', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewarditems/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リワードを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReward: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リワードアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewarditem: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getRewarditem', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRewarditem', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewarditems/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのリワード一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getRewardsByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/rewards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのリワードアイテムを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewarditemsBody} [postRewarditemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRewarditems: async (projectId: string, postRewarditemsBody?: PostRewarditemsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postRewarditems', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/rewarditems`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRewarditemsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトごとのリワードを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewardsBody} [postRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRewards: async (projectId: string, postRewardsBody?: PostRewardsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postRewards', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/rewards`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRewardsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リワードを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {PutRewardBody} [putRewardBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReward: async (projectId: string, id: string, putRewardBody?: PutRewardBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putReward', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putReward', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewards/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRewardBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リワードアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {PutRewarditemBody} [putRewarditemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRewarditem: async (projectId: string, id: string, putRewarditemBody?: PutRewarditemBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putRewarditem', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRewarditem', 'id', id)
            const localVarPath = `/admin/v1/project/{project_id}/rewarditems/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRewarditemBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardsApi - functional programming interface
 * @export
 */
export const RewardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RewardsApiAxiosParamCreator(configuration)
    return {
        /**
         * リワードを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReward(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReward(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リワードアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRewarditem(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewarditemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRewarditem(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リワードを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReward(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReward(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リワードアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewarditem(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewarditemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewarditem(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのリワード一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのリワードアイテムを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewarditemsBody} [postRewarditemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRewarditems(projectId: string, postRewarditemsBody?: PostRewarditemsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRewarditems(projectId, postRewarditemsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プロジェクトごとのリワードを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewardsBody} [postRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRewards(projectId: string, postRewardsBody?: PostRewardsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRewards(projectId, postRewardsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リワードを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {PutRewardBody} [putRewardBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReward(projectId: string, id: string, putRewardBody?: PutRewardBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putReward(projectId, id, putRewardBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リワードアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {PutRewarditemBody} [putRewarditemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRewarditem(projectId: string, id: string, putRewarditemBody?: PutRewarditemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewarditemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRewarditem(projectId, id, putRewarditemBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RewardsApi - factory interface
 * @export
 */
export const RewardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RewardsApiFp(configuration)
    return {
        /**
         * リワードを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReward(projectId: string, id: string, options?: any): AxiosPromise<RewardResponse> {
            return localVarFp.deleteReward(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * リワードアイテムを削除する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRewarditem(projectId: string, id: string, options?: any): AxiosPromise<RewarditemResponse> {
            return localVarFp.deleteRewarditem(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * リワードを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReward(projectId: string, id: string, options?: any): AxiosPromise<RewardResponse> {
            return localVarFp.getReward(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * リワードアイテムを取得する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewarditem(projectId: string, id: string, options?: any): AxiosPromise<RewarditemResponse> {
            return localVarFp.getRewarditem(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのリワード一覧を取得する 
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<RewardsResponse> {
            return localVarFp.getRewardsByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのリワードアイテムを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewarditemsBody} [postRewarditemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRewarditems(projectId: string, postRewarditemsBody?: PostRewarditemsBody, options?: any): AxiosPromise<RewardResponse> {
            return localVarFp.postRewarditems(projectId, postRewarditemsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトごとのリワードを作成する 
         * @param {string} projectId project_id of project
         * @param {PostRewardsBody} [postRewardsBody] リクエストボディ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRewards(projectId: string, postRewardsBody?: PostRewardsBody, options?: any): AxiosPromise<RewardResponse> {
            return localVarFp.postRewards(projectId, postRewardsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * リワードを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of reward
         * @param {PutRewardBody} [putRewardBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReward(projectId: string, id: string, putRewardBody?: PutRewardBody, options?: any): AxiosPromise<RewardResponse> {
            return localVarFp.putReward(projectId, id, putRewardBody, options).then((request) => request(axios, basePath));
        },
        /**
         * リワードアイテムを更新する 
         * @param {string} projectId project_id of project
         * @param {string} id id of rewarditem
         * @param {PutRewarditemBody} [putRewarditemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRewarditem(projectId: string, id: string, putRewarditemBody?: PutRewarditemBody, options?: any): AxiosPromise<RewarditemResponse> {
            return localVarFp.putRewarditem(projectId, id, putRewarditemBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RewardsApi - object-oriented interface
 * @export
 * @class RewardsApi
 * @extends {BaseAPI}
 */
export class RewardsApi extends BaseAPI {
    /**
     * リワードを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public deleteReward(projectId: string, id: string, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).deleteReward(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リワードアイテムを削除する 
     * @param {string} projectId project_id of project
     * @param {string} id id of rewarditem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public deleteRewarditem(projectId: string, id: string, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).deleteRewarditem(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リワードを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getReward(projectId: string, id: string, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getReward(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リワードアイテムを取得する 
     * @param {string} projectId project_id of project
     * @param {string} id id of rewarditem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewarditem(projectId: string, id: string, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewarditem(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのリワード一覧を取得する 
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのリワードアイテムを作成する 
     * @param {string} projectId project_id of project
     * @param {PostRewarditemsBody} [postRewarditemsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public postRewarditems(projectId: string, postRewarditemsBody?: PostRewarditemsBody, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).postRewarditems(projectId, postRewarditemsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトごとのリワードを作成する 
     * @param {string} projectId project_id of project
     * @param {PostRewardsBody} [postRewardsBody] リクエストボディ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public postRewards(projectId: string, postRewardsBody?: PostRewardsBody, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).postRewards(projectId, postRewardsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リワードを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of reward
     * @param {PutRewardBody} [putRewardBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public putReward(projectId: string, id: string, putRewardBody?: PutRewardBody, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).putReward(projectId, id, putRewardBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リワードアイテムを更新する 
     * @param {string} projectId project_id of project
     * @param {string} id id of rewarditem
     * @param {PutRewarditemBody} [putRewarditemBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public putRewarditem(projectId: string, id: string, putRewarditemBody?: PutRewarditemBody, options?: AxiosRequestConfig) {
        return RewardsApiFp(this.configuration).putRewarditem(projectId, id, putRewarditemBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignageApi - axios parameter creator
 * @export
 */
export const SignageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignage: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteSignage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSignage', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージの詳細設定を削除
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignageSetting: async (projectId: string, signageId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteSignageSetting', 'projectId', projectId)
            // verify required parameter 'signageId' is not null or undefined
            assertParamExists('deleteSignageSetting', 'signageId', signageId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSignageSetting', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{signage_id}/settings/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"signage_id"}}`, encodeURIComponent(String(signageId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定サイネージを取得
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignage: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSignage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSignage', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージの詳細設定を取得
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignageSetting: async (projectId: string, signageId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSignageSetting', 'projectId', projectId)
            // verify required parameter 'signageId' is not null or undefined
            assertParamExists('getSignageSetting', 'signageId', signageId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSignageSetting', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{signage_id}/settings/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"signage_id"}}`, encodeURIComponent(String(signageId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージ一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignages: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSignages', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/signages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージを追加
         * @param {string} projectId プロジェクトID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignage: async (projectId: string, signageRequestBody?: SignageRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postSignage', 'projectId', projectId)
            const localVarPath = `/admin/v1/projects/{project_id}/signages`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signageRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージの詳細設定を追加
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignageSetting: async (projectId: string, signageId: string, signageSettingRequestBody?: SignageSettingRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postSignageSetting', 'projectId', projectId)
            // verify required parameter 'signageId' is not null or undefined
            assertParamExists('postSignageSetting', 'signageId', signageId)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{signage_id}/settings`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"signage_id"}}`, encodeURIComponent(String(signageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signageSettingRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignage: async (projectId: string, id: string, signageRequestBody?: SignageRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putSignage', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putSignage', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signageRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サイネージの詳細設定を更新
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignageSetting: async (projectId: string, signageId: string, id: string, signageSettingRequestBody?: SignageSettingRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putSignageSetting', 'projectId', projectId)
            // verify required parameter 'signageId' is not null or undefined
            assertParamExists('putSignageSetting', 'signageId', signageId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putSignageSetting', 'id', id)
            const localVarPath = `/admin/v1/projects/{project_id}/signages/{signage_id}/settings/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"signage_id"}}`, encodeURIComponent(String(signageId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signageSettingRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignageApi - functional programming interface
 * @export
 */
export const SignageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignageApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignage(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSignage(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージの詳細設定を削除
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignageSetting(projectId: string, signageId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignageSettingUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSignageSetting(projectId, signageId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定サイネージを取得
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignage(projectId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignage(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージの詳細設定を取得
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignageSetting(projectId: string, signageId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignageSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignageSetting(projectId, signageId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージ一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignages(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignages(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージを追加
         * @param {string} projectId プロジェクトID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignage(projectId: string, signageRequestBody?: SignageRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignageUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignage(projectId, signageRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージの詳細設定を追加
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignageSetting(projectId: string, signageId: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignageSettingUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignageSetting(projectId, signageId, signageSettingRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSignage(projectId: string, id: string, signageRequestBody?: SignageRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSignage(projectId, id, signageRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サイネージの詳細設定を更新
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSignageSetting(projectId: string, signageId: string, id: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignageSettingUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSignageSetting(projectId, signageId, id, signageSettingRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignageApi - factory interface
 * @export
 */
export const SignageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignageApiFp(configuration)
    return {
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignage(projectId: string, id: string, options?: any): AxiosPromise<GetSignageResponse> {
            return localVarFp.deleteSignage(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージの詳細設定を削除
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignageSetting(projectId: string, signageId: string, id: string, options?: any): AxiosPromise<SignageSettingUpdateResponse> {
            return localVarFp.deleteSignageSetting(projectId, signageId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定サイネージを取得
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignage(projectId: string, id: string, options?: any): AxiosPromise<GetSignageResponse> {
            return localVarFp.getSignage(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージの詳細設定を取得
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignageSetting(projectId: string, signageId: string, id: string, options?: any): AxiosPromise<GetSignageSettingResponse> {
            return localVarFp.getSignageSetting(projectId, signageId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージ一覧を取得する
         * @param {string} projectId プロジェクトID
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignages(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<GetSignagesResponse> {
            return localVarFp.getSignages(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージを追加
         * @param {string} projectId プロジェクトID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignage(projectId: string, signageRequestBody?: SignageRequestBody, options?: any): AxiosPromise<SignageUpdateResponse> {
            return localVarFp.postSignage(projectId, signageRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージの詳細設定を追加
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignageSetting(projectId: string, signageId: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: any): AxiosPromise<SignageSettingUpdateResponse> {
            return localVarFp.postSignageSetting(projectId, signageId, signageSettingRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定サイネージを更新
         * @param {string} projectId プロジェクトID
         * @param {string} id サイネージID
         * @param {SignageRequestBody} [signageRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignage(projectId: string, id: string, signageRequestBody?: SignageRequestBody, options?: any): AxiosPromise<GetSignageResponse> {
            return localVarFp.putSignage(projectId, id, signageRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * サイネージの詳細設定を更新
         * @param {string} projectId プロジェクトID
         * @param {string} signageId サイネージID
         * @param {string} id サイネージの詳細設定ID
         * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSignageSetting(projectId: string, signageId: string, id: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: any): AxiosPromise<SignageSettingUpdateResponse> {
            return localVarFp.putSignageSetting(projectId, signageId, id, signageSettingRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignageApi - object-oriented interface
 * @export
 * @class SignageApi
 * @extends {BaseAPI}
 */
export class SignageApi extends BaseAPI {
    /**
     * 指定サイネージを更新
     * @param {string} projectId プロジェクトID
     * @param {string} id サイネージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public deleteSignage(projectId: string, id: string, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).deleteSignage(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージの詳細設定を削除
     * @param {string} projectId プロジェクトID
     * @param {string} signageId サイネージID
     * @param {string} id サイネージの詳細設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public deleteSignageSetting(projectId: string, signageId: string, id: string, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).deleteSignageSetting(projectId, signageId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定サイネージを取得
     * @param {string} projectId プロジェクトID
     * @param {string} id サイネージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public getSignage(projectId: string, id: string, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).getSignage(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージの詳細設定を取得
     * @param {string} projectId プロジェクトID
     * @param {string} signageId サイネージID
     * @param {string} id サイネージの詳細設定ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public getSignageSetting(projectId: string, signageId: string, id: string, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).getSignageSetting(projectId, signageId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージ一覧を取得する
     * @param {string} projectId プロジェクトID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public getSignages(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).getSignages(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージを追加
     * @param {string} projectId プロジェクトID
     * @param {SignageRequestBody} [signageRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public postSignage(projectId: string, signageRequestBody?: SignageRequestBody, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).postSignage(projectId, signageRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージの詳細設定を追加
     * @param {string} projectId プロジェクトID
     * @param {string} signageId サイネージID
     * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public postSignageSetting(projectId: string, signageId: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).postSignageSetting(projectId, signageId, signageSettingRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定サイネージを更新
     * @param {string} projectId プロジェクトID
     * @param {string} id サイネージID
     * @param {SignageRequestBody} [signageRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public putSignage(projectId: string, id: string, signageRequestBody?: SignageRequestBody, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).putSignage(projectId, id, signageRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サイネージの詳細設定を更新
     * @param {string} projectId プロジェクトID
     * @param {string} signageId サイネージID
     * @param {string} id サイネージの詳細設定ID
     * @param {SignageSettingRequestBody} [signageSettingRequestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignageApi
     */
    public putSignageSetting(projectId: string, signageId: string, id: string, signageSettingRequestBody?: SignageSettingRequestBody, options?: AxiosRequestConfig) {
        return SignageApiFp(this.configuration).putSignageSetting(projectId, signageId, id, signageSettingRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantNoticesApi - axios parameter creator
 * @export
 */
export const TenantNoticesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 運営からのテナント向けお知らせを削除する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantNotice: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTenantNotice', 'id', id)
            const localVarPath = `/admin/v1/tenants/notices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNotice: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTenantNotice', 'id', id)
            const localVarPath = `/admin/v1/tenants/notices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNoticeByTenant: async (tenantId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantNoticeByTenant', 'tenantId', tenantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTenantNoticeByTenant', 'id', id)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/notices/{id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNotices: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/tenants/notices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNoticesByTenant: async (tenantId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantNoticesByTenant', 'tenantId', tenantId)
            const localVarPath = `/admin/v1/tenants/{tenant_id}/notices`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせを作成する 
         * @param {PostTenantNoticeBody} [postTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTenantNotices: async (postTenantNoticeBody?: PostTenantNoticeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/tenants/notices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTenantNoticeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 運営からのテナント向けお知らせを更新する 
         * @param {string} id id of tenant_notice
         * @param {PutTenantNoticeBody} [putTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenantNotice: async (id: string, putTenantNoticeBody?: PutTenantNoticeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTenantNotice', 'id', id)
            const localVarPath = `/admin/v1/tenants/notices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTenantNoticeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantNoticesApi - functional programming interface
 * @export
 */
export const TenantNoticesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantNoticesApiAxiosParamCreator(configuration)
    return {
        /**
         * 運営からのテナント向けお知らせを削除する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantNotice(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantNotice(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantNotice(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantNotice(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantNoticeByTenant(tenantId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantNoticeByTenant(tenantId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantNotices(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantNotices(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantNoticesByTenant(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantNoticesByTenant(tenantId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせを作成する 
         * @param {PostTenantNoticeBody} [postTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTenantNotices(postTenantNoticeBody?: PostTenantNoticeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTenantNotices(postTenantNoticeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 運営からのテナント向けお知らせを更新する 
         * @param {string} id id of tenant_notice
         * @param {PutTenantNoticeBody} [putTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTenantNotice(id: string, putTenantNoticeBody?: PutTenantNoticeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantNoticeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTenantNotice(id, putTenantNoticeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantNoticesApi - factory interface
 * @export
 */
export const TenantNoticesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantNoticesApiFp(configuration)
    return {
        /**
         * 運営からのテナント向けお知らせを削除する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantNotice(id: string, options?: any): AxiosPromise<TenantNoticeResponse> {
            return localVarFp.deleteTenantNotice(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNotice(id: string, options?: any): AxiosPromise<TenantNoticeResponse> {
            return localVarFp.getTenantNotice(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせを取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {string} id id of tenant_notice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNoticeByTenant(tenantId: string, id: string, options?: any): AxiosPromise<TenantNoticeResponse> {
            return localVarFp.getTenantNoticeByTenant(tenantId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNotices(page?: number, perPage?: number, options?: any): AxiosPromise<TenantNoticesResponse> {
            return localVarFp.getTenantNotices(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせ一覧を取得する 
         * @param {string} tenantId tenant_id of tenant
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantNoticesByTenant(tenantId: string, page?: number, perPage?: number, options?: any): AxiosPromise<TenantNoticesResponse> {
            return localVarFp.getTenantNoticesByTenant(tenantId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせを作成する 
         * @param {PostTenantNoticeBody} [postTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTenantNotices(postTenantNoticeBody?: PostTenantNoticeBody, options?: any): AxiosPromise<TenantNoticeResponse> {
            return localVarFp.postTenantNotices(postTenantNoticeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 運営からのテナント向けお知らせを更新する 
         * @param {string} id id of tenant_notice
         * @param {PutTenantNoticeBody} [putTenantNoticeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenantNotice(id: string, putTenantNoticeBody?: PutTenantNoticeBody, options?: any): AxiosPromise<TenantNoticeResponse> {
            return localVarFp.putTenantNotice(id, putTenantNoticeBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantNoticesApi - object-oriented interface
 * @export
 * @class TenantNoticesApi
 * @extends {BaseAPI}
 */
export class TenantNoticesApi extends BaseAPI {
    /**
     * 運営からのテナント向けお知らせを削除する 
     * @param {string} id id of tenant_notice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public deleteTenantNotice(id: string, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).deleteTenantNotice(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせを取得する 
     * @param {string} id id of tenant_notice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public getTenantNotice(id: string, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).getTenantNotice(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせを取得する 
     * @param {string} tenantId tenant_id of tenant
     * @param {string} id id of tenant_notice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public getTenantNoticeByTenant(tenantId: string, id: string, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).getTenantNoticeByTenant(tenantId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせ一覧を取得する 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public getTenantNotices(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).getTenantNotices(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせ一覧を取得する 
     * @param {string} tenantId tenant_id of tenant
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public getTenantNoticesByTenant(tenantId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).getTenantNoticesByTenant(tenantId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせを作成する 
     * @param {PostTenantNoticeBody} [postTenantNoticeBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public postTenantNotices(postTenantNoticeBody?: PostTenantNoticeBody, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).postTenantNotices(postTenantNoticeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 運営からのテナント向けお知らせを更新する 
     * @param {string} id id of tenant_notice
     * @param {PutTenantNoticeBody} [putTenantNoticeBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantNoticesApi
     */
    public putTenantNotice(id: string, putTenantNoticeBody?: PutTenantNoticeBody, options?: AxiosRequestConfig) {
        return TenantNoticesApiFp(this.configuration).putTenantNotice(id, putTenantNoticeBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * テナントの論理削除を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTenant', 'id', id)
            const localVarPath = `/admin/v1/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントの詳細取得を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTenant', 'id', id)
            const localVarPath = `/admin/v1/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントの作成を要求する。 
         * @param {PostTenantsBody} [postTenantsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTenants: async (postTenantsBody?: PostTenantsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTenantsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントの更新を要求する。 
         * @param {string} id id of tenant
         * @param {PutTenantBody} [putTenantBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenant: async (id: string, putTenantBody?: PutTenantBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTenant', 'id', id)
            const localVarPath = `/admin/v1/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTenantBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユニークキーの更新を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenantUniquekey: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTenantUniquekey', 'id', id)
            const localVarPath = `/admin/v1/tenants/{id}/uniquekey`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration)
    return {
        /**
         * テナントの論理削除を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントの詳細取得を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenants(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenants(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントの作成を要求する。 
         * @param {PostTenantsBody} [postTenantsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTenants(postTenantsBody?: PostTenantsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTenants(postTenantsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントの更新を要求する。 
         * @param {string} id id of tenant
         * @param {PutTenantBody} [putTenantBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTenant(id: string, putTenantBody?: PutTenantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTenant(id, putTenantBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユニークキーの更新を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTenantUniquekey(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTenantUniquekey(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantsApiFp(configuration)
    return {
        /**
         * テナントの論理削除を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant(id: string, options?: any): AxiosPromise<TenantResponse> {
            return localVarFp.deleteTenant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントの詳細取得を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant(id: string, options?: any): AxiosPromise<TenantResponse> {
            return localVarFp.getTenant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants(page?: number, perPage?: number, options?: any): AxiosPromise<TenantsResponse> {
            return localVarFp.getTenants(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントの作成を要求する。 
         * @param {PostTenantsBody} [postTenantsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTenants(postTenantsBody?: PostTenantsBody, options?: any): AxiosPromise<TenantResponse> {
            return localVarFp.postTenants(postTenantsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントの更新を要求する。 
         * @param {string} id id of tenant
         * @param {PutTenantBody} [putTenantBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenant(id: string, putTenantBody?: PutTenantBody, options?: any): AxiosPromise<TenantResponse> {
            return localVarFp.putTenant(id, putTenantBody, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユニークキーの更新を要求する。 
         * @param {string} id id of tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTenantUniquekey(id: string, options?: any): AxiosPromise<TenantResponse> {
            return localVarFp.putTenantUniquekey(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     * テナントの論理削除を要求する。 
     * @param {string} id id of tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public deleteTenant(id: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).deleteTenant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントの詳細取得を要求する。 
     * @param {string} id id of tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public getTenant(id: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).getTenant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public getTenants(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).getTenants(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントの作成を要求する。 
     * @param {PostTenantsBody} [postTenantsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public postTenants(postTenantsBody?: PostTenantsBody, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).postTenants(postTenantsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントの更新を要求する。 
     * @param {string} id id of tenant
     * @param {PutTenantBody} [putTenantBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public putTenant(id: string, putTenantBody?: PutTenantBody, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).putTenant(id, putTenantBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユニークキーの更新を要求する。 
     * @param {string} id id of tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public putTenantUniquekey(id: string, options?: AxiosRequestConfig) {
        return TenantsApiFp(this.configuration).putTenantUniquekey(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TradesApi - axios parameter creator
 * @export
 */
export const TradesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrade: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrade', 'id', id)
            const localVarPath = `/admin/v1/trades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTradeItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTradeItem', 'id', id)
            const localVarPath = `/admin/v1/tradeItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrade: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrade', 'id', id)
            const localVarPath = `/admin/v1/trades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードアイテムの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTradeItem', 'id', id)
            const localVarPath = `/admin/v1/tradeItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItems: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/tradeItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItemsByTrade: async (tradeId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tradeId' is not null or undefined
            assertParamExists('getTradeItemsByTrade', 'tradeId', tradeId)
            const localVarPath = `/admin/v1/tradeItems/{trade_id}`
                .replace(`{${"trade_id"}}`, encodeURIComponent(String(tradeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrades: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradesByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTradesByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/trades/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {PostTradeItemsBody} [postTradeItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTradeItemsByTrade: async (tradeId: string, postTradeItemsBody?: PostTradeItemsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tradeId' is not null or undefined
            assertParamExists('postTradeItemsByTrade', 'tradeId', tradeId)
            const localVarPath = `/admin/v1/tradeItems/{trade_id}`
                .replace(`{${"trade_id"}}`, encodeURIComponent(String(tradeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTradeItemsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostTradesBody} [postTradesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTradesByProject: async (projectId: string, postTradesBody?: PostTradesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postTradesByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/trades/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTradesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeBody} [putTradeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrade: async (id: string, putTradeBody?: PutTradeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTrade', 'id', id)
            const localVarPath = `/admin/v1/trades/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTradeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeItemBody} [putTradeItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTradeItem: async (id: string, putTradeItemBody?: PutTradeItemBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTradeItem', 'id', id)
            const localVarPath = `/admin/v1/tradeItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putTradeItemBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradesApi - functional programming interface
 * @export
 */
export const TradesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradesApiAxiosParamCreator(configuration)
    return {
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrade(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrade(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTradeItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTradeItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrade(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrade(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードアイテムの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradeItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradeItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradeItems(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradeItems(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradeItemsByTrade(tradeId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradeItemsByTrade(tradeId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrades(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrades(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradesByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradesByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {PostTradeItemsBody} [postTradeItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTradeItemsByTrade(tradeId: string, postTradeItemsBody?: PostTradeItemsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTradeItemsByTrade(tradeId, postTradeItemsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostTradesBody} [postTradesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTradesByProject(projectId: string, postTradesBody?: PostTradesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTradesByProject(projectId, postTradesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeBody} [putTradeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTrade(id: string, putTradeBody?: PutTradeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTrade(id, putTradeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeItemBody} [putTradeItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTradeItem(id: string, putTradeItemBody?: PutTradeItemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTradeItem(id, putTradeItemBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TradesApi - factory interface
 * @export
 */
export const TradesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradesApiFp(configuration)
    return {
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrade(id: string, options?: any): AxiosPromise<TradeResponse> {
            return localVarFp.deleteTrade(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの論理削除を要求する。 
         * @param {string} id id of trade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTradeItem(id: string, options?: any): AxiosPromise<TradeItemResponse> {
            return localVarFp.deleteTradeItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrade(id: string, options?: any): AxiosPromise<TradeResponse> {
            return localVarFp.getTrade(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードアイテムの取得を要求する。 
         * @param {string} id id of trade schme type integer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItem(id: string, options?: any): AxiosPromise<TradeItemResponse> {
            return localVarFp.getTradeItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItems(page?: number, perPage?: number, options?: any): AxiosPromise<TradeItemsResponse> {
            return localVarFp.getTradeItems(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードアイテムの一覧取得を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradeItemsByTrade(tradeId: string, page?: number, perPage?: number, options?: any): AxiosPromise<TradeItemsResponse> {
            return localVarFp.getTradeItemsByTrade(tradeId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrades(page?: number, perPage?: number, options?: any): AxiosPromise<TradesResponse> {
            return localVarFp.getTrades(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradesByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<TradesResponse> {
            return localVarFp.getTradesByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} tradeId trade_id of trade
         * @param {PostTradeItemsBody} [postTradeItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTradeItemsByTrade(tradeId: string, postTradeItemsBody?: PostTradeItemsBody, options?: any): AxiosPromise<TradeItemResponse> {
            return localVarFp.postTradeItemsByTrade(tradeId, postTradeItemsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの作成を要求する。 
         * @param {string} projectId project_id of project
         * @param {PostTradesBody} [postTradesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTradesByProject(projectId: string, postTradesBody?: PostTradesBody, options?: any): AxiosPromise<TradeResponse> {
            return localVarFp.postTradesByProject(projectId, postTradesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeBody} [putTradeBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrade(id: string, putTradeBody?: PutTradeBody, options?: any): AxiosPromise<TradeResponse> {
            return localVarFp.putTrade(id, putTradeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * トレードの更新を要求する。 
         * @param {string} id id of item
         * @param {PutTradeItemBody} [putTradeItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTradeItem(id: string, putTradeItemBody?: PutTradeItemBody, options?: any): AxiosPromise<TradeItemResponse> {
            return localVarFp.putTradeItem(id, putTradeItemBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradesApi - object-oriented interface
 * @export
 * @class TradesApi
 * @extends {BaseAPI}
 */
export class TradesApi extends BaseAPI {
    /**
     * トレードの論理削除を要求する。 
     * @param {string} id id of trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public deleteTrade(id: string, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).deleteTrade(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの論理削除を要求する。 
     * @param {string} id id of trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public deleteTradeItem(id: string, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).deleteTradeItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの取得を要求する。 
     * @param {string} id id of trade schme type integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTrade(id: string, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTrade(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードアイテムの取得を要求する。 
     * @param {string} id id of trade schme type integer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTradeItem(id: string, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTradeItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードアイテムの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTradeItems(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTradeItems(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードアイテムの一覧取得を要求する。 
     * @param {string} tradeId trade_id of trade
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTradeItemsByTrade(tradeId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTradeItemsByTrade(tradeId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTrades(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTrades(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの一覧取得を要求する。 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public getTradesByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).getTradesByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの作成を要求する。 
     * @param {string} tradeId trade_id of trade
     * @param {PostTradeItemsBody} [postTradeItemsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public postTradeItemsByTrade(tradeId: string, postTradeItemsBody?: PostTradeItemsBody, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).postTradeItemsByTrade(tradeId, postTradeItemsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの作成を要求する。 
     * @param {string} projectId project_id of project
     * @param {PostTradesBody} [postTradesBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public postTradesByProject(projectId: string, postTradesBody?: PostTradesBody, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).postTradesByProject(projectId, postTradesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの更新を要求する。 
     * @param {string} id id of item
     * @param {PutTradeBody} [putTradeBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public putTrade(id: string, putTradeBody?: PutTradeBody, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).putTrade(id, putTradeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレードの更新を要求する。 
     * @param {string} id id of item
     * @param {PutTradeItemBody} [putTradeItemBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    public putTradeItem(id: string, putTradeItemBody?: PutTradeItemBody, options?: AxiosRequestConfig) {
        return TradesApiFp(this.configuration).putTradeItem(id, putTradeItemBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserprofileItemsApi - axios parameter creator
 * @export
 */
export const UserprofileItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザープロフィールのアイテムの論理削除を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserprofileItem: async (userprofileId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('deleteUserprofileItem', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserprofileItem', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/items/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールのアイテムの取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofileItem: async (userprofileId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('getUserprofileItem', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserprofileItem', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/items/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールのアイテム一覧取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofileItems: async (userprofileId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('getUserprofileItems', 'userprofileId', userprofileId)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/items`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールのアイテムの作成を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {PostUserprofileItemsBody} [postUserprofileItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserprofileItems: async (userprofileId: string, postUserprofileItemsBody?: PostUserprofileItemsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('postUserprofileItems', 'userprofileId', userprofileId)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/items`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserprofileItemsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールのアイテムの更新を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {PutUserprofileItemBody} [putUserprofileItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserprofileItem: async (userprofileId: string, id: string, putUserprofileItemBody?: PutUserprofileItemBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userprofileId' is not null or undefined
            assertParamExists('putUserprofileItem', 'userprofileId', userprofileId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUserprofileItem', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{userprofile_id}/items/{id}`
                .replace(`{${"userprofile_id"}}`, encodeURIComponent(String(userprofileId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserprofileItemBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserprofileItemsApi - functional programming interface
 * @export
 */
export const UserprofileItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserprofileItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザープロフィールのアイテムの論理削除を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserprofileItem(userprofileId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserprofileItem(userprofileId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールのアイテムの取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofileItem(userprofileId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofileItem(userprofileId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールのアイテム一覧取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofileItems(userprofileId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofileItems(userprofileId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールのアイテムの作成を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {PostUserprofileItemsBody} [postUserprofileItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserprofileItems(userprofileId: string, postUserprofileItemsBody?: PostUserprofileItemsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserprofileItems(userprofileId, postUserprofileItemsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールのアイテムの更新を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {PutUserprofileItemBody} [putUserprofileItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserprofileItem(userprofileId: string, id: string, putUserprofileItemBody?: PutUserprofileItemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserprofileItem(userprofileId, id, putUserprofileItemBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserprofileItemsApi - factory interface
 * @export
 */
export const UserprofileItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserprofileItemsApiFp(configuration)
    return {
        /**
         * ユーザープロフィールのアイテムの論理削除を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserprofileItem(userprofileId: string, id: string, options?: any): AxiosPromise<UserprofileItemResponse> {
            return localVarFp.deleteUserprofileItem(userprofileId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールのアイテムの取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofileItem(userprofileId: string, id: string, options?: any): AxiosPromise<UserprofileItemResponse> {
            return localVarFp.getUserprofileItem(userprofileId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールのアイテム一覧取得を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofileItems(userprofileId: string, page?: number, perPage?: number, options?: any): AxiosPromise<UserprofileItemsResponse> {
            return localVarFp.getUserprofileItems(userprofileId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールのアイテムの作成を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {PostUserprofileItemsBody} [postUserprofileItemsBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserprofileItems(userprofileId: string, postUserprofileItemsBody?: PostUserprofileItemsBody, options?: any): AxiosPromise<UserprofileItemResponse> {
            return localVarFp.postUserprofileItems(userprofileId, postUserprofileItemsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールのアイテムの更新を要求する。 
         * @param {string} userprofileId userprofile_id of userprofile
         * @param {string} id id of useritem
         * @param {PutUserprofileItemBody} [putUserprofileItemBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserprofileItem(userprofileId: string, id: string, putUserprofileItemBody?: PutUserprofileItemBody, options?: any): AxiosPromise<UserprofileItemResponse> {
            return localVarFp.putUserprofileItem(userprofileId, id, putUserprofileItemBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserprofileItemsApi - object-oriented interface
 * @export
 * @class UserprofileItemsApi
 * @extends {BaseAPI}
 */
export class UserprofileItemsApi extends BaseAPI {
    /**
     * ユーザープロフィールのアイテムの論理削除を要求する。 
     * @param {string} userprofileId userprofile_id of userprofile
     * @param {string} id id of useritem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofileItemsApi
     */
    public deleteUserprofileItem(userprofileId: string, id: string, options?: AxiosRequestConfig) {
        return UserprofileItemsApiFp(this.configuration).deleteUserprofileItem(userprofileId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールのアイテムの取得を要求する。 
     * @param {string} userprofileId userprofile_id of userprofile
     * @param {string} id id of useritem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofileItemsApi
     */
    public getUserprofileItem(userprofileId: string, id: string, options?: AxiosRequestConfig) {
        return UserprofileItemsApiFp(this.configuration).getUserprofileItem(userprofileId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールのアイテム一覧取得を要求する。 
     * @param {string} userprofileId userprofile_id of userprofile
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofileItemsApi
     */
    public getUserprofileItems(userprofileId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return UserprofileItemsApiFp(this.configuration).getUserprofileItems(userprofileId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールのアイテムの作成を要求する。 
     * @param {string} userprofileId userprofile_id of userprofile
     * @param {PostUserprofileItemsBody} [postUserprofileItemsBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofileItemsApi
     */
    public postUserprofileItems(userprofileId: string, postUserprofileItemsBody?: PostUserprofileItemsBody, options?: AxiosRequestConfig) {
        return UserprofileItemsApiFp(this.configuration).postUserprofileItems(userprofileId, postUserprofileItemsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールのアイテムの更新を要求する。 
     * @param {string} userprofileId userprofile_id of userprofile
     * @param {string} id id of useritem
     * @param {PutUserprofileItemBody} [putUserprofileItemBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofileItemsApi
     */
    public putUserprofileItem(userprofileId: string, id: string, putUserprofileItemBody?: PutUserprofileItemBody, options?: AxiosRequestConfig) {
        return UserprofileItemsApiFp(this.configuration).putUserprofileItem(userprofileId, id, putUserprofileItemBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserprofilesApi - axios parameter creator
 * @export
 */
export const UserprofilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザープロフィールの論理削除を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserprofile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserprofile', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールの取得を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserprofile', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザープロフィールの更新を要求する。 
         * @param {string} id id of userprofile
         * @param {PutUserprofileBody} [putUserprofileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserprofile: async (id: string, putUserprofileBody?: PutUserprofileBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUserprofile', 'id', id)
            const localVarPath = `/admin/v1/userprofiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserprofileBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserprofilesApi - functional programming interface
 * @export
 */
export const UserprofilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserprofilesApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザープロフィールの論理削除を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserprofile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserprofile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールの取得を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザープロフィールの更新を要求する。 
         * @param {string} id id of userprofile
         * @param {PutUserprofileBody} [putUserprofileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserprofile(id: string, putUserprofileBody?: PutUserprofileBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserprofileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserprofile(id, putUserprofileBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserprofilesApi - factory interface
 * @export
 */
export const UserprofilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserprofilesApiFp(configuration)
    return {
        /**
         * ユーザープロフィールの論理削除を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserprofile(id: string, options?: any): AxiosPromise<UserprofileResponse> {
            return localVarFp.deleteUserprofile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールの取得を要求する。 
         * @param {string} id id of userprofile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(id: string, options?: any): AxiosPromise<UserprofileResponse> {
            return localVarFp.getUserprofile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザープロフィールの更新を要求する。 
         * @param {string} id id of userprofile
         * @param {PutUserprofileBody} [putUserprofileBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserprofile(id: string, putUserprofileBody?: PutUserprofileBody, options?: any): AxiosPromise<UserprofileResponse> {
            return localVarFp.putUserprofile(id, putUserprofileBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserprofilesApi - object-oriented interface
 * @export
 * @class UserprofilesApi
 * @extends {BaseAPI}
 */
export class UserprofilesApi extends BaseAPI {
    /**
     * ユーザープロフィールの論理削除を要求する。 
     * @param {string} id id of userprofile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofilesApi
     */
    public deleteUserprofile(id: string, options?: AxiosRequestConfig) {
        return UserprofilesApiFp(this.configuration).deleteUserprofile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールの取得を要求する。 
     * @param {string} id id of userprofile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofilesApi
     */
    public getUserprofile(id: string, options?: AxiosRequestConfig) {
        return UserprofilesApiFp(this.configuration).getUserprofile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザープロフィールの更新を要求する。 
     * @param {string} id id of userprofile
     * @param {PutUserprofileBody} [putUserprofileBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserprofilesApi
     */
    public putUserprofile(id: string, putUserprofileBody?: PutUserprofileBody, options?: AxiosRequestConfig) {
        return UserprofilesApiFp(this.configuration).putUserprofile(id, putUserprofileBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザーの取得を要求する。 
         * @param {string} id id of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/admin/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByProject: async (projectId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getUsersByProject', 'projectId', projectId)
            const localVarPath = `/admin/v1/users/project/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーを無効にする（論理削除） 
         * @param {string} projectId project_id of project
         * @param {PostToggleDisableUserBody} [postToggleDisableUserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleDisableUser: async (projectId: string, postToggleDisableUserBody?: PostToggleDisableUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('toggleDisableUser', 'projectId', projectId)
            const localVarPath = `/admin/v1/users/project/{project_id}/toggle_disable`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postToggleDisableUserBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザーの取得を要求する。 
         * @param {string} id id of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersByProject(projectId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーを無効にする（論理削除） 
         * @param {string} projectId project_id of project
         * @param {PostToggleDisableUserBody} [postToggleDisableUserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleDisableUser(projectId: string, postToggleDisableUserBody?: PostToggleDisableUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostToggleDisableUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleDisableUser(projectId, postToggleDisableUserBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * ユーザーの取得を要求する。 
         * @param {string} id id of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(page?: number, perPage?: number, options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.getUsers(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーの一覧取得を要求する。 
         * @param {string} projectId project_id of project
         * @param {number} [page] ページ番号
         * @param {number} [perPage] 1ページの件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByProject(projectId: string, page?: number, perPage?: number, options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.getUsersByProject(projectId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーを無効にする（論理削除） 
         * @param {string} projectId project_id of project
         * @param {PostToggleDisableUserBody} [postToggleDisableUserBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleDisableUser(projectId: string, postToggleDisableUserBody?: PostToggleDisableUserBody, options?: any): AxiosPromise<PostToggleDisableUserResponse> {
            return localVarFp.toggleDisableUser(projectId, postToggleDisableUserBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * ユーザーの取得を要求する。 
     * @param {string} id id of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの一覧取得を要求する。 
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの一覧取得を要求する。 
     * @param {string} projectId project_id of project
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページの件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersByProject(projectId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersByProject(projectId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーを無効にする（論理削除） 
     * @param {string} projectId project_id of project
     * @param {PostToggleDisableUserBody} [postToggleDisableUserBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public toggleDisableUser(projectId: string, postToggleDisableUserBody?: PostToggleDisableUserBody, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).toggleDisableUser(projectId, postToggleDisableUserBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ジェムを付与する。 
         * @param {string} projectId project_id of project
         * @param {PostEarnFreeGemsRequest} [postEarnFreeGemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earnFreeGems: async (projectId: string, postEarnFreeGemsRequest?: PostEarnFreeGemsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('earnFreeGems', 'projectId', projectId)
            const localVarPath = `/admin/v1/project/{project_id}/wallet/earn`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEarnFreeGemsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * ジェムを付与する。 
         * @param {string} projectId project_id of project
         * @param {PostEarnFreeGemsRequest} [postEarnFreeGemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async earnFreeGems(projectId: string, postEarnFreeGemsRequest?: PostEarnFreeGemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostEarnFreeGemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.earnFreeGems(projectId, postEarnFreeGemsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * ジェムを付与する。 
         * @param {string} projectId project_id of project
         * @param {PostEarnFreeGemsRequest} [postEarnFreeGemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earnFreeGems(projectId: string, postEarnFreeGemsRequest?: PostEarnFreeGemsRequest, options?: any): AxiosPromise<PostEarnFreeGemsResponse> {
            return localVarFp.earnFreeGems(projectId, postEarnFreeGemsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * ジェムを付与する。 
     * @param {string} projectId project_id of project
     * @param {PostEarnFreeGemsRequest} [postEarnFreeGemsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public earnFreeGems(projectId: string, postEarnFreeGemsRequest?: PostEarnFreeGemsRequest, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).earnFreeGems(projectId, postEarnFreeGemsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


