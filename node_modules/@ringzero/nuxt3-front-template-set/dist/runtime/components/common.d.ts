import { POSITION, SNACKBAR_TYPE, THEME_COLOR } from '../composables/constants';
import { type SelectItemKey, type DataTableCompareFunction } from '../types';
export interface ListButtonProps {
    text: string;
    value: any;
    icon?: {
        icon?: string;
        top?: string;
        rotation?: string;
        layout?: POSITION;
    };
    default?: boolean;
    hint?: string;
    style?: string | Object;
    type?: LISTBUTTON_TYPE;
}
export declare enum LISTBUTTON_TYPE {
    DISABLED = "disabled",
    LINK = "simple",
    DEFAULT = "default"
}
export interface CheckBoxSetProps extends ListButtonProps {
    checked: boolean;
}
export interface snackbarProp {
    id?: number;
    title?: string;
    text: string;
    icon?: SNACKBAR_TYPE;
    time?: number;
    color?: string;
}
import { RULE, type ruleParams } from '../composables/validation';
export declare enum FORM_MODE {
    INLINE = "inline",
    BOTH = "both",
    DEFAULT = "default",
    SIMPLE = "simple"
}
export declare enum FORM_ITEM {
    INPUT = "input",
    PASSWORD = "password",
    TEXTAREA = "text",
    NUMERIC = "numeric",
    EMAIL = "email",
    NAME = "name",
    KANA = "kana",
    TEL = "tel",
    ZIPCODE = "zipcode",
    DATE = "date",
    DATETIME = "datetime",
    TIME = "time",
    SELECTTIME = "selecttime",
    MONTH = "month",
    CHECK_BOX = "check_box",
    RADIO_GROUP = "radio_group",
    CHECK_GROUP = "check_group",
    SELECT_MENU = "select_menu",
    SELECT_CHECK = "select_check",
    SUGGEST_SELECT_MENU = "suggest_select_menu",
    ASSOCIATE_SELECT_MENU = "associate_select_menu",
    ASSOCIATE_SELECT_CHECK = "associate_select_check",
    INVOICE = "invoice",
    LIST = "list",
    ICON_OR_LINK = "iconOrlink",
    FILE = "file",
    MULTI_FILE = "multi_file",
    HEADLINE = "headline",
    BLANK_COLUMN = "key_blank_column",
    ACTION = "key_action",
    DELETE = "key_delete",
    BLANK = "key_blank",
    LINE = "key_line",
    COMMENT = "key_comment",
    NOTE = "key_note",
    ATTENTION = "key_attention",
    WARNING = "key_warning",
    MODAL_LINK = "key_modallink",
    TERMS_CHECK = "key_termsCheck",
    DATE_RANGE = "date_range",//フォームでは使わない。フィルタで期間範囲指定で使用
    DATETIME_RANGE = "datetime_range",//フォームでは使わない。フィルタで期間範囲指定で使用
    TIME_RANGE = "time_range"
}
export declare enum TABLE_ITEM_KEY {
    ID = "id",
    SORT = "key_sort",
    ACTION = "key_action",
    DELETE = "key_delete",
    EDIT = "key_edit",
    LINE = "key_line",
    HEADLINE = "key_headline",
    BLANK_COLUMN = "key_blank_column",
    BLANK = "key_blank",
    COMMENT = "key_comment",
    NOTE = "key_note",
    ATTENTION = "key_attention",
    WARNING = "key_warning",
    MODAL_LINK = "key_modallink",
    ICON_OR_LINK = "key_iconOrlink",
    OSS_THUMBNAIL = "key_oss_image_url"
}
export declare const CONST_TABLE_ITEM: {
    [key: string]: DataTableHeader;
};
/** フォーム用アイテムとして使用する場合にまとめて渡すデータ */
export interface formItem {
    name: string;
    label: string;
    type: FORM_ITEM;
    onCheck?: string;
    isCheck?: boolean;
    error?: string;
    defaultValue?: string;
    value?: string;
    values?: string[];
    rule?: RULE[];
    hint: string;
    readOnly?: boolean;
    output?: boolean;
    hidden?: boolean;
    ruleParams?: ruleParams;
    associateKey?: string;
    notitle?: boolean;
    index?: number;
    fileValue?: {
        file?: File;
        name?: string;
        path?: string;
    };
    fileValues?: {
        file?: File;
        name?: string;
        path?: string;
    }[];
}
export interface DataTableHeader {
    key: string;
    value?: SelectItemKey;
    title: string;
    colspan?: number;
    rowspan?: number;
    fixed?: boolean;
    align?: 'start' | 'end' | 'center';
    width?: number;
    colWidth?: string;
    strWidth?: string;
    minWidth?: string;
    maxWidth?: string;
    sortable?: boolean;
    sort?: DataTableCompareFunction;
    file?: File;
    files?: {
        file?: File;
        name?: string;
        path?: string;
    }[];
    defaultValue?: string;
    userSelect?: boolean;
    readOnly?: boolean;
    newOnly?: boolean;
    editOnly?: boolean;
    hidden?: boolean;
    nolist?: boolean;
    listOnly?: boolean;
    noform?: boolean;
    output?: boolean;
    disabled?: boolean;
    notitle?: boolean;
    filter?: string;
    link?: string;
    choice?: boolean;
    dialog?: boolean;
    type: FORM_ITEM;
    row?: number;
    resize?: boolean;
    color?: string;
    margin?: string;
    contents?: any[];
    contentObjects?: {
        [key: string]: any[];
    };
    getContents?: Function;
    floatCard?: {
        height: number;
    };
    hint?: string;
    hintchip?: boolean;
    placeholder?: string;
    list?: boolean;
    selectDisable?: string;
    rule?: RULE[];
    ruleParams?: ruleParams;
    associateKey?: string;
    min?: number;
    max?: number;
    extensions?: string[];
    dataList?: string[];
    inputType?: SELECT_INPUT_TYPE;
    selectType?: SELECT_LIST_TYPE;
    time?: any[];
    viewFunction?: Function;
    selectFunction?: Function;
    formValueFunction?: Function;
    formShowFunction?: Function;
    formParamFunction?: Function;
    readOnlyFunction?: Function;
    customAction?: string;
    subtitlekey?: string;
    noNewLink?: boolean;
}
export interface formProps {
    base?: baseProps;
    label?: string;
    width?: number;
    colWidth?: string;
    labelWidth?: number;
    margin?: string;
    rule?: RULE[];
    ruleParams?: ruleParams;
    min?: number;
    max?: number;
    mode?: FORM_MODE;
    edit?: boolean;
    prefix?: string;
    suffix?: string;
    placeholder?: string;
    data?: formItem;
    error?: string;
    hint?: string;
    hintchip?: boolean;
    line?: boolean;
    small?: boolean;
    medium?: boolean;
}
export interface labelProps {
    text?: string;
    width?: number;
    innerWidth?: number;
    size?: string;
    weight?: string;
    align?: string;
    color?: string;
    margin?: string;
}
export interface baseProps {
    label: labelProps;
    width?: number;
    size?: string;
    mode?: FORM_MODE;
    edit?: boolean;
    disable?: boolean;
    userSelect?: boolean;
    small?: boolean;
    medium?: boolean;
    column?: number;
}
export declare const defaultBase: baseProps;
export declare enum SELECT_INPUT_TYPE {
    LINK = "link",
    TEXT = "text",
    BUTTON = "button",
    INPUT = "input",
    FRAME = "frame",
    STRETCH_ICON = "stretch_icon"
}
export declare enum SELECT_LIST_TYPE {
    RADIO = "radio",
    CHECK = "check",
    DEFAULT = "default"
}
export interface informationItem {
    text: string;
    style?: any;
}
export interface informationItems {
    id: string;
    title: string;
    date: string;
    type?: string;
    body?: string;
    items?: informationItem[];
    opened?: boolean;
}
export declare enum HOVER_TYPE {
    DARKEN = "darken",
    LIGHTEN = "lighten"
}
export interface TabProps {
    text: string;
    value: string | number;
    url?: string;
    extraData?: {
        text: string;
        style: string;
    };
}
export declare enum TOGGLE_TYPE {
    RADIO = "radio",
    CHECK = "check",
    SQUARE = "square",
    CIRCLE = "circle",
    OTHER = "other"
}
export interface ToggleProps {
    icon?: string;
    color?: string;
}
export interface ToggleSetProps {
    icon?: string;
    text?: string;
    value: string | number;
    back?: string;
    color?: string;
    activeBack?: string;
    activeColor?: string;
}
export interface RectSize {
    minWidth: Number;
    maxWidth: Number;
    minHeight: Number;
    maxHeight: Number;
}
export declare enum CALENDAR_TYPE {
    DISPLAY = "display",
    DAY_INPUT = "dayInput",
    DAY_CALENDAR = "dayCalendar",
    PERIOD_INPUT = "periodInput",
    PERIOD_CALENDAR = "periodCalendar",
    MULTI_DAYS_INPUT = "multiDaysInput",
    MULTI_DAYS_CALENDAR = "multiDaysCalendar",
    PERMITTED_INPUT = "permittedInput",
    PERMITTED_CALENDAR = "permittedCalendar"
}
export declare enum DATE_FORMAT {
    default = "YYYY-MM-DD",
    yymm = "YYYY-MM",
    yymm_jp = "\u5E74\u6708",
    yymmdd_jp = "\u5E74\u6708\u65E5"
}
export interface EventItem {
    id: number;
    value: string;
    start: Date;
    end: Date;
    color: THEME_COLOR;
    isEditable: boolean;
}
export interface DateItem {
    date: number;
    month: string;
    dayEvents: EventItem[];
}
export declare enum CLOCK_TYPE {
    DISPLAY = "display",
    INPUT_DIAL = "input_dial",
    DIAL = "dial"
}
export declare enum DROP_TYPE {
    DROP_AREA = "area",
    DIAPLAY_FILES = "files",
    DISPLAY_FILE = "file",
    FORM = "form"
}
export declare enum FILE_UPLOAD_TYPE {
    SINGLE = "single",
    MULTI = "multi"
}
export declare enum FILE_EXTENSION {
    TEXT_TXT = "txt",
    TEXT_CSV = "csv",
    TEXT_XLS = "xls",
    TEXT_XLSX = "xlsx",
    AUDIO_MP3 = "mp3",
    MOVIE_MP4 = "mp4",
    IMG_PNG = "png",
    IMG_JPG = "jpg",
    IMG_JPEG = "jpeg",
    IMG_GIF = "gif",
    ZIP = "zip",
    APP_JSON = "json",
    APP_PDF = "pdf"
}
export declare enum FILE_TYPE {
    TEXT_TXT = "text/plain",
    TEXT_CSV = "text/csv",
    TEXT_XLS = "application/vnd.ms-excel",
    TEXT_XLSX = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    AUDIO_MP3 = "audio/mpeg",
    MOVIE_MP4 = "video/mp4",
    IMG_PNG = "image/png",
    IMG_JPG = "image/jpeg",
    IMG_JPEG = "image/jpeg",
    IMG_GIF = "image/gif",
    MAC_ZIP = "application/zip",
    WIN_ZIP = "application/x-zip-compressed",
    APP_JSON = "application/json",
    APP_PDF = "application/pdf"
}
export interface VariableSize {
    x?: number;
    y?: number;
    width?: number;
    minWidth?: number;
    maxWidth?: number;
    height?: number;
    minHeight?: number;
    maxHeight?: number;
    justify?: string;
    align?: string;
}
export interface FixedSize {
    justify?: string;
    align?: string;
    offsetX?: string;
    offsetY?: string;
    width?: string;
    height?: string;
    minHeight?: string;
    maxHeight?: string;
    minWidth?: string;
    maxWidth?: string;
    canvasMinHeight?: string;
    canvasMaxHeight?: string;
}
export interface DataProps {
    new: boolean;
    data?: any;
}
