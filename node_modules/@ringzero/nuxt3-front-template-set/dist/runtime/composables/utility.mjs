import { readonly } from "vue";
import { useState } from "nuxt/app";
import {
  useFooterStatus,
  useHeaderStatus,
  useLocalMenuStatus,
  useMainNavigationStatus,
  useSubHeaderStatus
} from "./states.mjs";
export function useHitTest(rect, x, y) {
  if (rect.left <= x && rect.right > x && rect.top <= y && rect.bottom > y) {
    return true;
  } else {
    return false;
  }
}
export function useDelay() {
  const state = useState("deley-status", () => ({ id: null }));
  function wait(ms) {
    return new Promise((resolve) => {
      state.value.id = setTimeout(resolve, ms);
    });
  }
  function cancel() {
    if (state.value.id)
      clearTimeout(state.value.id);
  }
  return {
    wait,
    cancel
  };
}
export function useLock() {
  const state = useState("lock-status", () => ({
    level: 0,
    lock: false,
    icon: false,
    color: "rgba(0, 0, 0, 0.4)"
  }));
  function lockOn(level = 0, icon = false, color = "rgba(0, 0, 0, 0.4)") {
    state.value.level = level;
    state.value.lock = true;
    state.value.icon = icon;
    state.value.color = color;
  }
  function lockOff() {
    state.value.lock = false;
  }
  return {
    state: readonly(state.value),
    on: lockOn,
    off: lockOff
  };
}
export function useMask() {
  const state = useState("lock-mask", () => ({
    cursor: "pointer",
    lock: false
  }));
  function lockOn(cursor = "pointer") {
    state.value.cursor = cursor;
    state.value.lock = true;
  }
  function lockOff() {
    state.value.lock = false;
  }
  return {
    state: readonly(state.value),
    on: lockOn,
    off: lockOff
  };
}
export function useActiveRect(level) {
  const header = useHeaderStatus();
  const subHeader = useSubHeaderStatus();
  const footer = useFooterStatus();
  const navi = useMainNavigationStatus();
  const local = useLocalMenuStatus();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const result = { top: "0", left: "0", width: "100%", height: "100%", radius: "0" };
  if (level === 1) {
    result.top = header.value.height + "px";
    result.width = "100%";
    result.height = `calc(100% - ${header.value.height + footer.value.height}px)`;
  } else if (level === 2) {
    result.top = header.value.height + subHeader.value.height + "px";
    result.width = "100%";
    result.height = `calc(100% - ${header.value.height + subHeader.value.height + footer.value.height}px)`;
  } else if (level === 3) {
    result.top = header.value.height + subHeader.value.height + "px";
    result.left = navi.value.width + "px";
    result.width = `100%`;
    result.height = `calc(100% - ${header.value.height + subHeader.value.height + footer.value.height}px)`;
  } else if (level === 4) {
    result.top = header.value.height + subHeader.value.height + 20 + "px";
    result.left = navi.value.width + local.value.width + 34 + "px";
    result.width = `calc(100% - ${navi.value.width + local.value.width + 54}px)`;
    result.height = `calc(100% - ${header.value.height + subHeader.value.height + footer.value.height + 40}px)`;
    result.radius = "7px";
  } else if (level === 5) {
    result.top = header.value.height + subHeader.value.height + 20 + 34 + "px";
    result.left = navi.value.width + local.value.width + 34 + "px";
    result.width = `calc(100% - ${navi.value.width + local.value.width + 54}px)`;
    result.height = `calc(100% - ${header.value.height + subHeader.value.height + footer.value.height + 40 + 34}px)`;
    result.radius = "0 0 7px 7px";
  }
  return result;
}
export function useActiveRectNum(level) {
  const header = useHeaderStatus();
  const subHeader = useSubHeaderStatus();
  const footer = useFooterStatus();
  const navi = useMainNavigationStatus();
  const local = useLocalMenuStatus();
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;
  const result = { top: 0, left: 0, width: viewportWidth, height: viewportHeight, radius: 0 };
  if (level === 1) {
    result.top = header.value.height;
    result.width = viewportWidth;
    result.height = viewportHeight - (header.value.height + footer.value.height - 1);
  } else if (level === 2) {
    result.top = header.value.height + subHeader.value.height;
    result.width = viewportWidth;
    result.height = viewportHeight - (header.value.height + subHeader.value.height + footer.value.height - 1);
  } else if (level === 3) {
    result.top = header.value.height + subHeader.value.height;
    result.left = navi.value.width;
    result.width = viewportWidth - navi.value.width;
    result.height = viewportHeight - (header.value.height + subHeader.value.height + footer.value.height - 1);
  } else if (level === 4) {
    result.top = header.value.height + subHeader.value.height + 20;
    result.left = navi.value.width + local.value.width + 34;
    result.width = viewportWidth - (navi.value.width + local.value.width + 54);
    result.height = viewportHeight - (header.value.height + subHeader.value.height + footer.value.height + 39.5);
    result.radius = 6;
  }
  return result;
}
export function useCheckFileType(str) {
  if (!str)
    return { mode: "file" };
  const words = ['"file"', '"copy"', '"url"'];
  const anyExist = words.some((word) => str.includes(word));
  if (anyExist) {
    const obj = JSON.parse(str);
    return obj;
  } else {
    return { mode: "file", type: str };
  }
}
