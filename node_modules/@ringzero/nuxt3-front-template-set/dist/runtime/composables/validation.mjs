import dayjs from "@/node_modules/dayjs";
import * as googleLibPhonenumber from "google-libphonenumber";
import isEmail from "validator/es/lib/isEmail";
import isURL from "validator/es/lib/isURL";
import matches from "validator/es/lib/matches";
export var RULE = /* @__PURE__ */ ((RULE2) => {
  RULE2["required"] = "required";
  RULE2["number"] = "number";
  RULE2["numeric"] = "numeric";
  RULE2["alphabet"] = "alphabet";
  RULE2["alphanumeric"] = "alphanumeric";
  RULE2["symbol"] = "symbol";
  RULE2["hyphen"] = "hyphen";
  RULE2["katakana"] = "katakana";
  RULE2["corpKatakana"] = "corp_katakana";
  RULE2["hiragana"] = "hiragana";
  RULE2["invoice"] = "hiragjigyousya_no";
  RULE2["countBoth"] = "countBoth";
  RULE2["max"] = "max";
  RULE2["min"] = "min";
  RULE2["datetime"] = "datetime";
  RULE2["date"] = "date";
  RULE2["dateList"] = "dateList";
  RULE2["time"] = "time";
  RULE2["selecttime"] = "selectTime";
  RULE2["format"] = "format";
  RULE2["mail"] = "mail";
  RULE2["phone"] = "phone";
  RULE2["url"] = "url";
  RULE2["zipcode"] = "zipcode";
  RULE2["zipcode2"] = "zipcode2";
  RULE2["zipcodeBoth"] = "zipcodeBoth";
  RULE2["mp3"] = "audio/mpeg";
  RULE2["mp4"] = "video/mp4";
  RULE2["text"] = "text/plain";
  RULE2["csv"] = "text/csv";
  RULE2["xls"] = "application/vnd.ms-excel";
  RULE2["xlsx"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
  RULE2["jpg"] = "image/jpeg";
  RULE2["jpeg"] = "image/jpeg";
  RULE2["gif"] = "image/gif";
  RULE2["png"] = "image/png";
  RULE2["json"] = "application/json";
  RULE2["maczip"] = "application/zip";
  RULE2["winzip"] = "application/x-zip-compressed";
  RULE2["fileSize"] = "fileSize";
  RULE2["duplication"] = "duplication";
  return RULE2;
})(RULE || {});
export function useValidation(value, rules, result, ruleParams = {
  format: "",
  info: "",
  min: 1,
  max: 10,
  region: "ja"
  //zip-codeや、電話番号の国コード
}, size) {
  if (!rules)
    return true;
  if (rules.includes("required" /* required */) && !value) {
    return "\u5FC5\u9808\u9805\u76EE\u3067\u3059\u3002";
  }
  if (!value) {
    result.value = void 0;
    return true;
  }
  if (rules.includes("number" /* number */)) {
    const pattern = /^[0-9]*$/;
    if (!pattern.test(value))
      return "\u534A\u89D2\u6570\u5B57\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("numeric" /* numeric */)) {
    let pattern = /^-?\d+(\.\d+)?$/;
    if (!pattern.test(value))
      return "\u6570\u5024\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
    if (value) {
      pattern = /^(?!0\d)-?\d+(\.\d+)?$/;
      if (!pattern.test(value))
        return "\u6570\u5024\u304C0\u304B\u3089\u59CB\u307E\u3063\u3066\u3044\u307E\u3059";
    }
  }
  if (rules.includes("alphabet" /* alphabet */)) {
    const pattern = /^[a-zA-Z]*$/;
    if (!pattern.test(value))
      return "\u534A\u89D2\u82F1\u6642\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("alphanumeric" /* alphanumeric */)) {
    const pattern = /^[a-zA-Z0-9]*$/;
    if (!pattern.test(value))
      return "\u534A\u89D2\u82F1\u6570\u6642\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("symbol" /* symbol */)) {
    const pattern = /^[a-zA-Z0-9!-/:-@¥[-`{-~]*$/;
    if (!pattern.test(value))
      return "\u534A\u89D2\u82F1\u6570\u8A18\u53F7\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("hyphen" /* hyphen */) || rules.includes("phone" /* phone */)) {
    const pattern = /^[0-9-]*$/;
    if (!pattern.test(value))
      return "\u534A\u89D2\u306E\u6570\u5B57\u3068\u30CF\u30A4\u30D5\u30F3\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("katakana" /* katakana */)) {
    const pattern = /^[\u30A0-\u30FF\u3000\uFF70\uFF65]*$/;
    if (!pattern.test(value))
      return "\u30AB\u30BF\u30AB\u30CA\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("corp_katakana" /* corpKatakana */)) {
    const pattern = /^[\u30A0-\u30FF\u3000\uFF70\uFF65\uFF08\uFF09]*$/;
    if (!pattern.test(value))
      return "\u30AB\u30BF\u30AB\u30CA\u3068\u5168\u89D2\uFF08\uFF09\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("hiragana" /* hiragana */)) {
    const pattern = /^[\u3040-\u309F\u309B\u309C\u30FC]*$/;
    if (!pattern.test(value))
      return "\u3072\u3089\u304C\u306A\u4EE5\u5916\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u3059";
  }
  if (rules.includes("hiragjigyousya_no" /* invoice */)) {
    const pattern = /^\d{13}$/;
    if (!pattern.test(value))
      return "13\u6841\u306E\u6570\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093";
  }
  if (rules.includes("min" /* min */) && rules.includes("max" /* max */)) {
    const len = useGetStrLength(value, rules.includes("countBoth" /* countBoth */));
    if (!(len >= Number(ruleParams.min) && len <= Number(ruleParams.max))) {
      return `${ruleParams?.min}\u6587\u5B57\u4EE5\u4E0A${ruleParams?.max}\u6587\u5B57\u4EE5\u4E0B:\u73FE\u5728${len}\u6587\u5B57${rules.includes("countBoth" /* countBoth */) ? "(\u534A\u89D2\u76F8\u5F53)" : ""}`;
    } else {
      result.value = `${ruleParams.min}\u6587\u5B57\u4EE5\u4E0A${ruleParams.max}\u6587\u5B57\u4EE5\u4E0B:\u73FE\u5728${len}\u6587\u5B57${rules.includes("countBoth" /* countBoth */) ? "(\u534A\u89D2\u76F8\u5F53)" : ""}`;
    }
  }
  if (rules.includes("max" /* max */)) {
    const len = useGetStrLength(value, rules.includes("countBoth" /* countBoth */));
    if (!(value && len <= Number(ruleParams.max))) {
      return `\u6700\u5927${ruleParams.max}\u6587\u5B57:\u73FE\u5728${len}\u6587\u5B57${rules.includes("countBoth" /* countBoth */) ? "(\u534A\u89D2\u76F8\u5F53)" : ""}`;
    } else {
      result.value = `\u6700\u5927${ruleParams?.max}\u6587\u5B57:\u73FE\u5728${len}\u6587\u5B57${rules.includes("countBoth" /* countBoth */) ? "(\u534A\u89D2\u76F8\u5F53)" : ""}`;
    }
  }
  if (rules.includes("min" /* min */)) {
    const len = useGetStrLength(value, rules.includes("countBoth" /* countBoth */));
    if (!(value && len >= Number(ruleParams.min)))
      return `\u6700\u5C0F${ruleParams.min}\u6587\u5B57:\u73FE\u5728${len}\u6587\u5B57${rules.includes("countBoth" /* countBoth */) ? "(\u534A\u89D2\u76F8\u5F53)" : ""}`;
  }
  if (rules.includes("datetime" /* datetime */)) {
    const date = dayjs(value, "YYYY-MM-DD HH:mm:ss", true);
    if (!date.isValid())
      return "YYYY-MM-DD HH:mm:ss\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044";
  }
  if (rules.includes("date" /* date */)) {
    const date = dayjs(value, "YYYY-MM-DD", true);
    if (!date.isValid())
      return "YYYY-MM-DD\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044";
  }
  if (rules.includes("dateList" /* dateList */)) {
    const date = dayjs(value, "YYYY-MM", true);
    if (!date.isValid())
      return "YYYY-MM\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044";
  }
  if (rules.includes("time" /* time */)) {
    const date = dayjs(value, "HH:mm:ss", true);
    if (!date.isValid())
      return "HH:mm:ss\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044";
  }
  if (rules.includes("selectTime" /* selecttime */)) {
    const date = dayjs(value, "HH:mm:ss", true);
    if (!date.isValid())
      return "HH:mm:ss\u3067\u5165\u529B";
  }
  if (rules.includes("format" /* format */) && ruleParams.format) {
    const date = dayjs(value, ruleParams.format, true);
    if (!date.isValid())
      return ruleParams.format + "\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044";
  }
  if (rules.includes("phone" /* phone */)) {
    const region = "JP";
    const util = googleLibPhonenumber.PhoneNumberUtil.getInstance();
    const number = util.parseAndKeepRawInput(value, region);
    if (!util.isValidNumberForRegion(number, region)) {
      return "\u96FB\u8A71\u756A\u53F7\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093";
    } else {
      result.value = util.format(number, googleLibPhonenumber.PhoneNumberFormat.NATIONAL);
    }
  }
  if (rules.includes("mail" /* mail */)) {
    if (!isEmail(value, { allow_utf8_local_part: true }))
      return "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093";
  }
  if (rules.includes("url" /* url */)) {
    if (!isURL(value, { protocols: ["http", "https"], require_protocol: true })) {
      return "URL\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093";
    }
  }
  if (rules.includes("zipcode" /* zipcode */)) {
    if (!matches(value, /^[0-9]{7}$/)) {
      return "\u65E5\u672C\u306E\u90F5\u4FBF\u756A\u53F7\u3067\u306F\u3042\u308A\u307E\u305B\u3093";
    }
  }
  if (rules.includes("zipcode2" /* zipcode2 */)) {
    if (!matches(value, /^[0-9]{7}$/)) {
      return "\u65E5\u672C\u306E\u90F5\u4FBF\u756A\u53F7\u3067\u306F\u3042\u308A\u307E\u305B\u3093";
    }
  }
  if (rules.includes("zipcodeBoth" /* zipcodeBoth */)) {
    if (!matches(value, /^[0-9]{3}-?[0-9]{4}$/)) {
      return "\u65E5\u672C\u306E\u90F5\u4FBF\u756A\u53F7\u3067\u306F\u3042\u308A\u307E\u305B\u3093";
    }
  }
  if (rules.includes("duplication" /* duplication */)) {
    return "\u30D5\u30A1\u30A4\u30EB\u540D\u304C\u91CD\u8907\u3057\u3066\u3044\u307E\u3059";
  }
  return true;
}
function useGetStrLength(str, both) {
  let count = 0;
  if (!both) {
    count = str.length;
  } else {
    for (let i = 0, len = str.length; i < len; i++) {
      const c = str.charCodeAt(i);
      if (!str[i].match(/\r?\n/g)) {
        if (c >= 0 && c <= 127) {
          count += 1;
        } else {
          count += 2;
        }
      }
    }
  }
  return count;
}
export function useFileValidation(value, rules, result, ruleParams = {
  format: "",
  info: "",
  min: 1,
  max: 10,
  region: "ja"
  //zip-codeや、電話番号の国コード
}, size) {
  const fileTypes = [
    "audio/mpeg" /* mp3 */,
    "video/mp4" /* mp4 */,
    "image/jpeg" /* jpeg */,
    "image/jpeg" /* jpg */,
    "image/png" /* png */,
    "image/gif" /* gif */,
    "text/plain" /* text */,
    "application/zip" /* maczip */,
    "application/x-zip-compressed" /* winzip */,
    "text/csv" /* csv */,
    "application/vnd.ms-excel" /* xls */,
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" /* xlsx */,
    "application/json" /* json */
  ];
  const fileTypeRules = rules.filter((rule) => fileTypes.includes(rule));
  let isFileTypeValid = false;
  for (let i = 0; i < fileTypeRules.length; i++) {
    const fileTypeRule = fileTypeRules[i];
    if (fileTypeRule === "audio/mpeg" /* mp3 */ && matches(value, /^audio\/mpeg$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "video/mp4" /* mp4 */ && matches(value, /^video\/mp4$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "image/jpeg" /* jpeg */ && matches(value, /^image\/jpeg$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "image/jpeg" /* jpg */ && matches(value, /^image\/jpeg$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "image/png" /* png */ && matches(value, /^image\/png$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "image/gif" /* gif */ && matches(value, /^image\/gif$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "text/plain" /* text */ && matches(value, /^text\/plain$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "text/csv" /* csv */ && matches(value, /^text\/csv$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "application/vnd.ms-excel" /* xls */ && matches(value, /^application\/vnd.ms-excel$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" /* xlsx */ && matches(value, /^application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "application/zip" /* maczip */ && matches(value, /^application\/zip$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "application/x-zip-compressed" /* winzip */ && matches(value, /^application\/x-zip-compressed$/)) {
      isFileTypeValid = true;
      break;
    } else if (fileTypeRule === "application/json" /* json */ && matches(value, /^application\/json$/)) {
      isFileTypeValid = true;
      break;
    }
  }
  if (!isFileTypeValid) {
    return "\u62E1\u5F35\u5B50\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093";
  }
  return true;
}
