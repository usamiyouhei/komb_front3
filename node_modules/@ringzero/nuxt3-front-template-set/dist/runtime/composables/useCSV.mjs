export function convertRecordsToCSV(headers, list) {
  let TABLE_PRINT_ITEM_KEY;
  ((TABLE_PRINT_ITEM_KEY2) => {
    TABLE_PRINT_ITEM_KEY2["SORT"] = "key_sort";
    TABLE_PRINT_ITEM_KEY2["ACTION"] = "key_action";
    TABLE_PRINT_ITEM_KEY2["DELETE"] = "key_delete";
    TABLE_PRINT_ITEM_KEY2["EDIT"] = "key_edit";
    TABLE_PRINT_ITEM_KEY2["LINE"] = "key_line";
    TABLE_PRINT_ITEM_KEY2["HEADLINE"] = "key_headline";
    TABLE_PRINT_ITEM_KEY2["BLANK_COLUMN"] = "key_blank_column";
    TABLE_PRINT_ITEM_KEY2["BLANK"] = "key_blank";
    TABLE_PRINT_ITEM_KEY2["COMMENT"] = "key_comment";
    TABLE_PRINT_ITEM_KEY2["NOTE"] = "key_note";
    TABLE_PRINT_ITEM_KEY2["ATTENTION"] = "key_attention";
    TABLE_PRINT_ITEM_KEY2["WARNING"] = "key_warning";
    TABLE_PRINT_ITEM_KEY2["MODAL_LINK"] = "key_modallink";
    TABLE_PRINT_ITEM_KEY2["ICON_OR_LINK"] = "key_iconOrlink";
    TABLE_PRINT_ITEM_KEY2["OSS_THUMBNAIL"] = "key_oss_image_url";
  })(TABLE_PRINT_ITEM_KEY || (TABLE_PRINT_ITEM_KEY = {}));
  const unHeaderKeys = Object.values(TABLE_PRINT_ITEM_KEY);
  const choiceHeader = headers.filter((header) => {
    unHeaderKeys.includes(header.key);
    if (!header.disabled && !header.hidden && !header.nolist && !unHeaderKeys.includes(header.key)) {
      return header;
    } else {
      return;
    }
  });
  const headerStr = choiceHeader.map((item) => item.title).join(",") + "\n";
  const rows = list.map((record) => {
    const valuesArray = Object.values(record);
    const joinedValues = valuesArray.join(",");
    return joinedValues;
  }).join("\n");
  console.log(headerStr, rows);
  return headerStr + rows;
}
export function downloadCSV(csvString, filename = "data.csv") {
  const BOM = "\uFEFF";
  const blob = new Blob([BOM + csvString], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.setAttribute("download", filename);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
