export function useCreateFormData(headers, value, formDatas) {
  let view = "";
  let error = true;
  if (!formDatas)
    return { error, view };
  for (let i = 0; i < headers.length; i++) {
    const key = headers[i].key;
    if (!headers[i].listOnly && !(value.new && headers[i].editOnly)) {
      formDatas.value[key] = {
        name: key,
        label: headers[i].title,
        type: headers[i].type,
        rule: headers[i].rule,
        ruleParams: headers[i].ruleParams,
        defaultValue: headers[i].defaultValue,
        value: headers[i].defaultValue,
        values: void 0,
        isCheck: headers[i].defaultValue ? true : false,
        error: void 0,
        readOnly: headers[i].readOnly,
        output: headers[i].output,
        notitle: headers[i].notitle,
        onCheck: "clear",
        associateKey: headers[i].associateKey,
        fileValue: headers[i].file,
        fileValues: headers[i].files,
        hint: headers[i].hint
      };
      if (!value.new) {
        if (value.data[key] !== void 0) {
          formDatas.value[key].defaultValue = JSON.parse(JSON.stringify(value.data[key]));
          formDatas.value[key].value = JSON.parse(JSON.stringify(value.data[key]));
          formDatas.value[key].values = Array.isArray(value.data[key]) ? JSON.parse(JSON.stringify(value.data[key])) : void 0;
        }
        formDatas.value[key].isCheck = true;
      }
      error = true;
      if (value.new) {
        view = "edit";
        if (headers[i].newOnly && !formDatas.value[key].readOnly) {
          formDatas.value[key].readOnly = false;
        }
      } else {
        view = "view";
        if (headers[i].hidden) {
          formDatas.value[key].hidden = true;
        } else if (headers[i].newOnly && !formDatas.value[key].readOnly) {
          formDatas.value[key].readOnly = true;
        }
      }
    }
  }
  return { error, view };
}
